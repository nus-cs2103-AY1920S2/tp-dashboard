[
  {
    "path": "README.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d BB Productive"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "https://travis-ci.org/AY1920S2-CS2103T-W16-1/main[image:https://api.travis-ci.org/AY1920S2-CS2103T-W16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* This is a desktop Task manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* It is a Java application to help anyone manage their tasks and time with Pomodoro techniques."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "* It is *written in OOP fashion*. It provides a *reasonably well-written* code example that is *significantly bigger* (around 6 KLoC)than what students usually write in beginner-level SE modules."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* This project was built upon AddressBook-Level3 project created by SE-EDU initiative at https://se-education.org/[this site]."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://openjfx.io/[JavaFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 5,
      "-": 21
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    id \u0027com.github.sherter.google-java-format\u0027 version \u00270.8\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "googleJavaFormat {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    source \u0027src/main\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    source \u0027src/test\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    include \u0027**/*.java\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    options style: \u0027AOSP\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormat"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "task format(type: GoogleJavaFormat) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "  source \u0027src/main\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "  source \u0027src/test\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "  include \u0027**/*.java\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    archiveName \u003d \u0027bbproductive.jar\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        \u0027site-name\u0027: \u0027BB Productive\u0027,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W16-1/main\u0027,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "BransonNg": 19,
      "-": 152
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "BB Productive was developed by the https://ay1920s2-cs2103t-w16-1.github.io/main/team/hardoh.html[W-16-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "_{The project is a task manager which incorporates Pomodor techniques to help our users manage their tasks better. We also have statistics provided and a pet to keep reward you for completing tasks.}_ +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d Hardy Shein"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::hardoh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "{empty}[https://github.com/hardoh[github]] [\u003c\u003chardoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Role: Team Lead"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Fyonn Oh"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::fyonnoh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "{empty}[http://github.com/fyonnoh[github]] [\u003c\u003cfyonnoh#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Role: Documentation, Code Quality"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Permas Teo"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::permas-teo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "{empty}[http://github.com/permas-teo[github]] [\u003c\u003cpermas-teo#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Role: Deliverables, Testing"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Arthur Lee"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::artlee06.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "{empty}[http://github.com/artlee06[github]] [\u003c\u003cartlee06#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Role: Ui/Design, Scheduling and tracking"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Branson Ng"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::bransonng.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "{empty}[http://github.com/bransonng[github]] [\u003c\u003cbransonng#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Role: Git expert, Integration"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "Hardoh": 3,
      "BransonNg": 18,
      "-": 30
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: ContactUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/AY1920S2-CS2103T-W16-1/main/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Email us* : You can also reach us at `project82312@gmail.com`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 4
    }
  },
  {
    "path": "docs/DevOps.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d AddressBook Level 3 - Dev Ops"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level3/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "We use https://travis-ci.org/[Travis CI] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".  Tag the repo with the version number. e.g. `v1.4`"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "A project often depends on third-party libraries. For example, BB Productive depends on the https://github.com/FasterXML/jackson[Jackson library] for JSON parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[loweralpha]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Include those libraries in the repo (this bloats the repo size)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Require developers to download those libraries manually (this creates extra work for developers)"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 37
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d BB Productive - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W16-1/main"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "By: `Team CS2103T-W16-1`      Since: `Mar 2020`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cSettingUp#, here\u003e\u003e."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "The `.puml` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the \u003c\u003cUsingPlantUml#, Using PlantUML guide\u003e\u003e to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has two classes called link:{repoURL}/src/main/java/seedu/address/Main.java[`Main`] and link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "The following class plays an important role at the architecture level:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::LogicClassDiagram2.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d How the architecture components interact with each other"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::ui[]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PomodoroDisplay`, `StatisticsDisplay`, `PetDisplay` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::ui[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::LogicClassDiagram2.png[]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".  `Logic` uses the `TaskListParser` class to parse the user command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a task)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".  In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user or highlighting the text input field with a certain color."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1, 2\")` API call."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1, 2` Command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeleteSequenceDiagram.png[]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* stores the Task List, Pet, Pomodoro and statistics data."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cTask\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image:BetterModelClassDiagram.png[]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* can save the Task List data in json format and read it back."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* can save the Pet data in json format and read it back."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* can save the Pomodoro data in json format and read it back."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* can save the Statistics data in json format and read it back."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d TaskList"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Shown below is a high level overview of task class and related classes. This is represented in a class diagram."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task Class Diagram with all aforementioned attributes including recurring and reminder"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::TaskClassDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::add[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d Add"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The Add feature allows the user to add a `Task`. Its only compulsory field is `Name`. `Description`, `Priority`, `Reminder`, `Recurring` and `Tag` are optional fields."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Default `Priority` of \u0027low\u0027 is assigned if it is not specified."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The user can specify multiple `Tag`s."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The mechanism of how `SwitchTabCommand` updates the `Ui` is described below through an example usage."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 1. The user executes `add n/Homework 1 des/Read up on Semaphotes p/3` to add a new `Task`. `LogicManager` calls execute on this inputs."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 2. `TaskListParser` creates an `AddCommandParser` to parse this input. `AddCommandParser` creates the relevant objects for the fields specified in input. Based on the input, it creates a `Task` with its assigned `Name`, `Priority` and `Description`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 3. `AddCommandParser` returns a new `AddCommand` with the newly created `Task` as its only argument to `LogicManager`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 4. `AddCommand` executes. It checks if the `TaskList` contains a duplicate `Task` to it through `Model#hasTask`. If a duplicate `Task` exists, a `CommandException` is thrown. If not, it adds the new `Task` into the `Tasklist` through `Model#addTask`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 5. `AddCommand` creates and return the resulting `CommandResult` to the `Ui`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The following sequence diagram shows how the `AddCommand` is executed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Add Command Sequence Diagram"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::AddSequenceDiagram.png[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The following activity diagram summarises what happens when the `AddCommand` is executed."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Add Command Activity Diagram"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::AddCommandActivityDiagram.png[]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::add[]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::editTaskList[]"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d Edit"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The edit feature allows the user to edit the task, adding or updating fields in a task accordingly."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The edit command is done in 2 parts. `EditCommandParser` as well as `EditCommand` itself."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "artlee06"
        },
        "content": "`EditCommandParser` parses the user input including the `index` and the relevant prefixes that will be edited. This is done by checking the prefixes for each of the different task fields and calling the relevant parser for it. The parser then returns the relevant field, be it `name`, `priority`, `reminder` etc and this is set in the `EditTaskDescriptor` instance. This `EditTaskDescriptor` instance is a container for the updated fields. This instance is passed in the constructor of a new `EditCommand`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "artlee06"
        },
        "content": "`EditCommand` is executed. During execution, an edited task is created from retrieving the stored updated fields data from `EditTaskDescriptor` and copying the field from the original task to edit for the unchanged fields. This updated task is set in the `Model` for storage. Subsequently, a new `CommandResult` is generated to display that the task has been edited in the result display to the user. The general flow of `EditCommand` and `EditCommandParser` can be seen in the sequence diagram below."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Sequence of executing an edit command"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::EditSequenceDiagram.png[]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::editTaskList[]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//tag::branson[]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Sort"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "The sort order is not maintained after the application closes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/logic/commands/SortCommand.java[`SortCommand.java`]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Sequence of executing a sort command"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::SortSequenceDiagram.png[]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "The sort command takes in a list of fields and generates FieldComparators as seen in the diagram and then uses Comparator.thenComparing to aggregate the comparators. The first field provided will be of the highest sort order. The `Model` will then set the aggregated comparator on the `TaskList`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Class diagram of SortedList"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::SortedListClassDiagram.png[]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "We use a new `SortedList` from JavaFx within `TaskList` because `FilteredList` does not allow for sorting. As such we have the `FilteredList` reference the `SortedList` and the `SortedList` refernce the `UniqueTaskList`. By warpping the lists around another, this allows the `SortedList` and `FilteredList` to read changes to the `UniqueTaskList` and perform the appropriate filtering and sorting."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Sequence of initializing the Sorted List"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::SortInitliazeDiagram.png[]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Due to the requirements mentioned, this is how we generate our `FilteredList`. We set `FilteredList` to reference the `SortedList` and then the `SortedList` to reference the `UniqueTaskList`."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Updating UI"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Sequence of how sort updates the UI"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::SortUiSequenceDiagram.png[]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Meanwhile to update the UI on the newest sorting order, the latest sortOrder is set on the `TaskList`. The `LogicManager` is then able to access the sort order from the `TaskList` throgh the `Model` and provide the `MainWindow` with the sort order. The `MainWindow` then sets it on the `TaskListPanel`."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d AutoComplete"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Auto complete is triggered when users press tab while focussed on the command line."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/logic/commands/CommandCompletor.java[`CommandCompletor.java`]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".AutoComplete Sequence Diagram"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::ACSequenceDiagram.png[]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "When a user presses tab on the command line, a key event handler in the `CommandBox` calls the suggestCommand function of `MainWindow` with the user input. The `MainWindow` then passes the user input through the `LogicManager` to the CommandCompletor. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "The input is pass through the `LogicManager` so that we can get TaskList details from the `LogicManager` and transfer it to the CommandCompletor (e.g. taskList length). The CommandCompletor then parses the input and returns one of three things which lead to different changes to the UI:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". `CompletorResult`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Will cause `CommandBox` to setSuccess on `CommandTextField`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". `CompletorDeletionResult` [inherits from `CompletorResult`]"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Contains deleted input which will be shown as feedback"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Will cause `MainWindow` to call setWarning on `ResultDisplay`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". `CompletorException`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Will cause `CommandBox` to setFailure on `CommandTextField`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Auto Complete Overview"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Activity diagram of auto complete"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::ACActivityDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[#criteria]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Auto completion of a word happens when either:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". the input matches the start of a target word"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". the edit distance between the input and the target \u003c 2."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "The above diagram provides a big picture overview of decisions `CommandCompletor` goes through when processing user input."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". It attempts to complete the command word as in the callout above"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. if command word is unrecognized, `CommandCompletor` throws a `CompletorException` which leads to Unknown Command UI"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. else it performs argument checks and auto completes as necessary"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Argument checks overview"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". If the input is an add/edit/pom command then `CommandCompletor` will attempt to add prefixes."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. add/edit command -\u003e add priority and reminder prefixes"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... Edit auto complete will only add prefixes after the second word to avoid adding a prefix to the compulsory INDEX field of edit commands"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. pom command -\u003e add timer prefix"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". If input is a delete/done command"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. remove any invalid indices that are greater than the length of the displayed task list or that are not a positive integer"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". If input is a sort command"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Auto completion of fields is performed based on the \u003c\u003ccriteria, criteria\u003e\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. If the field is not recongized, then it is removed"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Auto Complete output:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "As seen from the activity diagram above:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Known Command UI is displayed when:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Any kind of completion has happened or nothing has changed for the input"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... `CompletorResult` is returned"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Any input is deleted (invalid index or sort field)"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... `CompletorDeletionResult` is returned"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Unknown Command UI is displayed when:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Command word provided is not recognized"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... `CompletorException` is raised"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Known Command UI"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".AutoComplete Success UI"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::ACsuccess.png[width\u003d600]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* `CommandTextField` is set to green"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* `CommandTextField` text is replaced by the suggested command"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Feedback is also provided on what changes have been made"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** If input has been removed, `ResultDisplay` is set to orange"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Unknown Command UI"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".AutoComplete Failure UI"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::ACfailure.png[width\u003d500]"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* `CommandTextField` is set to red"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* `CommandTextField` text is unchanged"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Feedback is provided that command word is not recognized"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Prefix Completion"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::ACPrefixActivityDiagram.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Here we take a closer look at how prefix completion is implemented. We iterate through every word of the user\u0027s input and then check if the word is a valid task field. If it is, we append the prefix and update the hasPrefix boolean to true so that we don\u0027t append duplicate prefixes. The input is then updated and we continue iterating."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Index Completion"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::ACIndexActivityDiagram.png[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Similar to before, we iterate through the arguments and we remove indexes that are either out of the displayed `TaskList` size or that is not a positive integer. We then append it to a removed list so that we can inform the user what input has been removed."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Sort field Completion"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Sort field completion is done by iterating through all arguments word by word and performing the auto complete checks against all possible sort fields. The auto complete checks were the same as the above \u003c\u003ccriteria, criteria\u003e\u003e."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Enhanced Find"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "We\u0027ve built upon the existing find function in AB-3 to filter tasks based on phrases (with some degree of typing errors) and based on task tags."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "The filtered list is not maintained after the application closes"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand.java`]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Find Command Sequence diagram"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::FindSequenceDiagram.png[]"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* After setting the predicate on the model and `FilteredList`, the `FilteredList` will apply the Test method of the predicate."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** The test method calculates a score for every task and only displays tasks with score \u003c 2."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* A comparator is then retrived from the Predicate by comparing Tasks based on their score and is used to sort the filtered list to show the more relevant searches first"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Lower scores means a more relevant task to the search term."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Tasks with lower scores will preceed those with higher scores based on the comparator."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Any existing comparator set by previous sort commands is replaced by the find command\u0027s relevance comparator."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Predicate"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java[`NameContainsKeywordsPredicate.java`]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Scoring decision"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "The score is first initialized to 2 and is later replaced by name score if the name score is lower than 2. We then subtract tag score from it to get the final score."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Overview of predicate sequence"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::PredicateSequenceDiagram.png[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Name scoring"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Please refer to the above\u0027s name score group"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* The name score of a task is the minimum score of all chunks of a task."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** A chunk is a String subsequence of the task name that has the same number of words as the search term."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* We iterate through all chunks of the task name and calculate a score for each chunk."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Here is how we set the score for each chunk:"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** edit distance between one of the chunks and the search term \u003c 2, chunk score is set to 1."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** search term matches the start of one of the chunks, chunk score is set to 1."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** one of the chunks is the same as the search term, chunk score is set to 0."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** else chunk score is 2."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* We then get the minimum of these chunk scores."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Name scoring in predicate"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::PredicateNameSequenceDiagram.png[]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Tag scoring"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "For every tag in the search term that appears in a Task, we increment the tag score by 1."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Tag scoring in predicate"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::PredicateTagSequenceDiagram.png[]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Final score"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "final score \u003d name score - tag score. Search results are displayed in ascending order of final score."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". The idea is to first ensure that tasks that are too different are not shown while allowing some degree of typo error on the user\u0027s end when searching for a task."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. This is supported by the use of edit distance and a small threshold."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Next we also wanted the user to be able to find a task name without searching the full name."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. We show tasks who have a chunk who\u0027s start matches the search term."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". We also wanted to allow users to search by tags."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Thus tag score is introduced."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". While the score helps to determine which tasks to show, it serves another job in providing the search relevance so that while accommodating for some degree of error from user input, they are still seeing what\u0027s more relevant first."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Users can also narrow their search by performing find with more tags or a more complete task name so that only that task has a chunk that matches."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". We chose to not use edit distance for search terms of string length less than 3 as this would bring about alot of false positives given that that the edit distance between words of length \u003c 3 will easily be 1."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//end::branson[]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//tag::pomodoro[]"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[[Pomodoro]]"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Pomodoro"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Pomodoro is activated by the `pom` command. It follows the same execution flow as many of the other commands in BBProductive."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Interactions Inside Logic Component for the pom 1 command"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::PomSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Pomosoero\u0027s features are implemented mainly in `seedu.address.logic` package. The `PomodoroManager` class is used to maniulate the timer and configure the relevant UI elements. The timer is facilitated by `javafx.animation.Timeline`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "When the `PomCommand` is executed, the `PomodoroManager` will handle the actual timer systems and update the relevant entities in the app. This is evident in the following sequence diagram."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Interactions with PomodoroManager through a time cycle"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::PomExtendedSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Through the use of the Pomodoro feature, there are occasions where the app has to prompt the user for specific input in order to progress. This behaviour flow is represented in the _Pomodoro Acctivity_ diagram."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Pomodoro Activity Diagram"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::PomodoroActivityDiagram.png[width\u003d395]"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "The `PomodoroManager` maintains a  `prompt_state` indicating what the app might be prompting the user at a given time."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Pomodoro Prompt States*"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* `NONE`: There is no particular prompt happening. The default state when the app is in the neutral state. (i.e. No pomodoro running.)"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* `CHECK_DONE`: This state occurs when a timer expires during a Pomodoro cycle."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* `CHECK_TAKE_BREAK`: This state occurs after user response has been received in the CHECK_DONE state."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* `CHECK_DONE_MIDPOM`: This state occurs when the user calls done on a task that is the Pomodoro running task."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Pomodoro has settings that can be configured by the user:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* Pomodoro Time: This defines how long the Pomodoro work period is. The default is 25 minutes."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* Break Time: This defines how long the breaks last in between Pomodoro periods. The default is 5 minutes."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "This data is captured and stored in the `Pomodoro` class in `seedu.address.model`, which interacts with the app’s storage system. `PomodoroManager` also updates the `Pomodoro` model on what task is being run and the time remaining in a particular cycle. This allows the time progress to be persistent in between app closures and relaunches."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//end::pomodoro[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::reminder[]"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Reminders"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The user\u0027s reminder functionality is achieved by calculating the time delay from the current time and the time from the user input. This time delay as well as the Task name and description is passed to the MainWindow for the reminder to be triggered as a pop up at the right time."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "artlee06"
        },
        "content": "A `DateTimeFormatter` is used to parse the date time from the user input, which is just the date in the r/ flag when adding or editing a task, into a `LocalDateTime` object. This `LocalDateTime` is used to store the date and time information. When the reminder is instantiated, a `setDelay` method is called setting in motion the calculation of time delay between the current time and the reminder time, and triggering of reminder on the `MainWindow`. The reminder class is stored as an `Optional` in the Task class itself."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Reminder is stored as a string in the `JsonAdaptedTask`. This string contains the exact format of the date and time that the user inputs, this allows the same constructor to be used when the data is read and changed to a task and thus reminder object. A sequence diagram of the reminder flow is shown below for reference."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Reminder Sequence Diagram"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::ReminderSequenceDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::reminder[]"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::recurring[]"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Recurring"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The user\u0027s recurring tasks functionality is twofold. Resetting the task to be unfinished after the stipulated time interval and resetting the task\u0027s reminder date according to the stipulated time interval. The behaviour for this recurring feature is mainly represented in the activity diagram below."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Recurring Activity Diagram"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::RecurringActivityDiagram.png[width\u003d790]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The logic is mainly implemented in the `Recurring` class and `ModelManager` class in `seedu.address.model`, which interacts with the app’s storage system especially with respect to task storage. This `Recurring` instance is stored in `Task` as an optional field."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "artlee06"
        },
        "content": "In the `Recurring` class, whenever a task is added or edited, the recurring type is then parsed to be either daily or weekly. Afterward, based on the time the recurring attribute is added, a reference LocalDateTime is noted in the `Recurring` instance itself. This ensures that the first recurring behaviour will trigger in the given interval with respect to that referenceDateTime and following the same interval afterwards."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The recurring behaviour is orchestrated in `ModelManager` whenever a task is added or edited, a `setTask` method is called that will generate a `Timer` and `TimerTask`. A `TimerTask` is the logic run to update the task, namely resetting the done and the reminder accordingly. The `Timer` schedules `TimerTasks` at a fixed rate based on the the time interval chosen, if it is daily it will be every 24 hours (but for testing purposes it will be every 60 seconds) and if it is weekly it will be every 7 days. There is only 1 `Timer` for the `ModelManager` that handles the scheduling of each `TimerTask` that corresponds to every task that has a recurring behaviour. On boot the `Timer` is canceled and replaced with a new instance, subsequently all the tasks are iterated through. Every task with a recurring attribute will have a `TimerTask` generated and scheduled accordingly."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The recurring behaviour triggered will set the task as undone. If a reminder exists and has been triggered, it will increment the reminder to be the next day or week depending on the interval set. When the recurring behaviour is triggered, the result display will show a message that the recurring task has been reset."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Additionally, a flag has been made to check if the task needs to be changed, if it does not it will not be unnecessarily updated in the `Model`. A class diagram of the tasks and all its attributes is shown below."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Recurring is stored as a string in the `JsonAdaptedTask`. This string contains the LocalDateTime information for the reference date as well as the type of interval itself. A special constructor for this string is used to reconstruct the recurring attribute when reading from storage."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::recurring[]"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::statistics[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Switch Tab Feature"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The Switch tab feature allows the user to traverse between the Tasks, Statistics and Settings tabs."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The user can switch tabs through 2 main methods:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "1. User calls a valid `SwitchTabCommand` that displays the appropriate tab defined."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "2. User calls a valid command that changes the display of Tab B while he or she is on Tab A. In this scenario, Tab B will display automatically."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "This behaviour is represented in the following activity diagram."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Activity Diagram of Tab Switches"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::SwitchTabActivityDiagram.png[]"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The mechanism of how `SwitchTabCommand` updates the `Ui` is described below."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 1. `MainWindow` executes the user input through logic and retrieves the `SwitchTabCommandResult commandResult` from `Logic`."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 2. `MainWindow` retrieves the `tabToSwitchIndex` from `commandResult`."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 3. `MainWindow` updates the `tabToSwitchIndex` tab through `tabPanePlaceholder`."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The following sequence diagram shows how `SwitchTabCommand` updates the tab in the `Ui`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Sequence Diagram of SwitchTabCommand"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::SwitchTabSequenceDiagram.png[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Statistics Feature"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The Statistics feature allows the user to view information about their number of tasks completed and Pomodoro duration ran (in minutes) on a daily basis for the past `CONSTANT_SIZE` days."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "`CONSTANT_SIZE` can be set to any number for any future developments. In our current implementation, we chose to store data for only the past 7 days to keep Statistics simple and intuitive for users."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The Statistics feature is mainly supported by the `Statistics` class, which in turn is facilitated by the `CustomQueue` class. Its class diagram is given below."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Class Diagram of the Statistics Component"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::StatisticsClassDiagram.png[]"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The `CustomQueue` class enforces the following constraints:"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "1. Size of `CustomQueue` must be of `CONSTANT_SIZE` after each method call through `Statistics`."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "2. DayData dates in `CustomQueue` must be only 1 day apart between its elements, and sorted from oldest to latest date."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The `CustomQueue` class implements the following methods for other components to access or update its data:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* `Model#updateDataDatesStatistics` - Updates data to current day while retaining stored data."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* `Model#updatesDayDataStatistics` - Replaces existing DayData in Statistics with new DayData of the same date."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* `Model#getDayDataFromDateStatistics` - Returns the DayData object from Statistics with the specified date."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The Statistics feature does not support any explicit commands. Instead, `Ui` is updated and displayed when the SwitchTabCommand \u0027stats\u0027 is called. The mechanism of this behaviour is described below."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 1. `MainWindow` receives the `SwitchTabCommandResult commandResult` from `Logic`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 2. `MainWindow` calls `StatisticsManager#updateStatisticsDisplayValues()` which retrieve the latest `Statistics` from `Model` and generates the display information."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Step 3. `MainWindow` then retrieves these display information from `StatisticsManager` and sets this information in `StatisticsDisplay`."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "`SwitchTabCommand` also switches the focused tab to the `Statistics` tab to display the results to the user."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The following sequence diagram shows how the `Statistics` is updated to the display."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Sequence Diagram of how Statistics"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::StatisticsUiSequenceDiagram.png[]"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d Design considerations"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support Statistics"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* **Alternative 1 (current choice):** Use a list that stores a fixed number of DayData objects, with elements being strictly 1 day apart and sorted from oldest to latest date."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Pros: Lightweight, does not store unnecessary data. Easy to pass data to generate graphs. Systematic removal of outdated data."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Cons: Need to enforce constraints in methods."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* **Alternative 2:** Use a list with elements sorted from oldest to latest date."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Cons: Harder to pass data to generate graphs. Need to handle outdated dates."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: when to update StatisticsDisplay"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* **Alternative 1 (current choice):** Update when the user runs the command to view Statistics"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Cons: Progress can only be viewed at the Statistics tab."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* **Alternative 2:** Update when any changes are made to Statistics."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Pros: In the event of future developments, any component of Statistics can be displayed at all times."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Cons: Need to keep track of all instances that can modify Statistics\u0027 values."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::statistics[]"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "//tag::DGpet"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d Pet"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "The pet feature aims to provide a virtual pet for the app in order to motivate the user. The pet has three main components: the XP points, the evolution and the mood. To facilitate this function, a Pet class is created to represent the pet. A PetManager class is created to manage the pet via communications from MainWindow. Lastly, a PetDisplay class is created to handle the UI of the pet."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Pet Class Diagram"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::PetClassDiagram.png[]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "To exemplify the implementation for the components of the XP points and the evolution of the pet, an example usage scenario is given below."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 1. User finishes a task. User calls the done command for the task. MainWindow would execute this command and generate a DoneCommandResult object"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::DoneCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 2. The MainWindow will update PetManager to increase XP points after the DoneCommandResult Object is received. This is done by calling the method `PetManager#incrementExp`. PetManager would then update XP points of Pet by calling `Pet#incrementExp`. This method also checks whether the XP points have reached the milestones for the levels and will update the level of the pet accordingly."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Pet Sequence Diagram"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::PetSequenceDiagram.png[]"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 3. Following the update of XP points, MainWindow also updates the mood of the pet. Supposedly, the pet is originally in \"HANGRY\" mood, MainWindow will call \"MainWindow#updateMoodWhenDone\" method to change the pet\u0027s mood to Happy. It will also update the time of the last done task and reschedules a new timertask so that the pet will turn \"Hangry\" at the correct time. Lastly, this method also updates the elements"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 4. MainWindow would then update the string of the filepaths for the respective UI elements in PetDisplay by executing the method `PetManager#updateDisplayElements`."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 5. Lastly, MainWindow will the update PetDisplay. The user will then see the UI be updated accodingly. For example, the progress bar would increase."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".update PetDisplay Diagram"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::UpdatePetDisplaySequenceDiagram.png[]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "//tag::DGsetcommands"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d Set Commands"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Set command class diagram"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::SetClassDiagram.png[]"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "The Set Commands can be used to customise the features in BB Productive. It can be used to customised the name of the pet, the duration for pomodoro and the daily challenge target so as to better cater to the needs of the user."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Below is an example scenario when the user runs the set command."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 1. User runs the command \"Set pet/momu pom/30 daily/150\". MainWindow will take the user input and call upon LogicManager to pasrse it. LogicManager will the call AddressBookParser which in creates a SetcommandParser object and then parse the user argument. A SetCommand object is then executed and returned to logic."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Set command sequence diagram"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::SetCommandSequenceDiagram.png[]"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 2. Logic calls upon the method `SetCommand#execute` which eventually calls the methods `Model#SetPetName` and `Model#setPomodoroDefaultTime`. A SetCommandResult object is return once these methods are executed."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Step 3. Upon receiving the SetCommandResult object, MainWindow then calls the method `MainWindow:UpdatePetDisplay` to update the UI for Pet. It also calls `PomodormoManager#SetDefaultStartTime` and `PomdooroDisplay#setTimerText` to update the Ui of pomodoro. Lastly, `StatisticsManager#setDailyTarget` is called to update the value of the dailyTargetText."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".set command updating Ui"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::SetCommandUpdatingUi.png[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d Design Consideration"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g user prefs file location, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDocumentation#, here\u003e\u003e."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cTesting#, here\u003e\u003e."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide \u003c\u003cDevOps#, here\u003e\u003e."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* has a need to manage a significant number of tasks"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* need motivation to get things done"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*Value proposition*: We integrate a Pomodoro-Pet environment into a full fledged task manager. The pet system serves to gamify the act of doing tasks, thereby motivating users, and the Pomodoro helps users get into a regular work/rest cycle. This integrationcovers all aspects of productivity in line platform. It covers motivation, organising of tasks and also how to go about doing them. This all in one solution is seldom found in other applications which implement maybe 1 or 2 of these features."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::userStories[]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |view all current ongoing tasks |manage my tasks and time"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |able to edit my task description |make changes in the event something unexpected happens"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |add a task by specifying a task description only |record tasks that needs to be done."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |add a task by specifying a task description and a reminder |record tasks that needs to be done by a specific period"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|`* * *` |user |add a task that is recurring |record tasks that are either recurring daily or weekly without having to input it every day or week"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |sort upcoming tasks by date |filter out the latest/oldest tasks according to my needs"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |sort my tasks by priority |manage my tasks"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |delete a task |remove tasks that I no longer care to track"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |utilise the Pomodoro technique to break down my work into structured intervals |boost productivity and keep track of time"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |be able to remind myself on when I plan to work on a task |be on track to complete my tasks"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |get a visual cue from my pet to prompt me to do work|be motivated to work when my productivity is low"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* * *` |user |keep track of the time spent on each task |check my progress"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* *` |pro user |navigate commands using shortcuts |save more time"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "artlee06"
        },
        "content": "// |`* *` |pro user |delete several tasks at once |save more time"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "artlee06"
        },
        "content": "// |`* *` |pro user |mark several tasks done at once |save more time"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* *` |pro user |customise the rate at which I should do work in the Pomodoro |fit my workstyle better"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|`* * *` |pro user |be able to remind myself on a recurring basis for repetitive tasks |be on track to complete my tasks, including those that are repetitive and also done on a recurring basis"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "artlee06"
        },
        "content": "// |`* *` |pro user |automate when my done tasks are cleared |customise when I want my tasks to be removed"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* *` |user |view the total number of tasks/duration spent on tasks I have done over a period of time |track my productivity over different periods"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* *` |user |view the durations in which I have currently spent on different tasks |better allocate my time"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`* *` |user |see my pet grow because of my productivity |am more motivated to stay productive"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|`*` |user |be greeted by a cute mascot |feel happy and motivated to do work"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::userStories[]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//tag::usecase[]"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[[UseCases]]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "(For all use cases below, the *System* is `BBProductive` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Use case diagram for BBProductive"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::use_cases.png[width\u003d790]"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC01 - View tasks"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1. User requests to see the task list."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2. BB Productive displays the view under the tasks tab."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC02 - Add task"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1. User requests to add a task to the task list."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2. BB Productive shows view with updated task list."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. Task of the same name already exists."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"This task already exists in the task list\"_ in response box."
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC03 - Done task"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1. User requests to set a task to done."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2. BB Productive shows view with updated task list."
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. Task specified by user already marked as done."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"Task has already been marked as done!\"_ in response box."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1b. User fed in an invalid index."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1b1. BBProductive shows _\"Invalid command format! \"_ in response box."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 2a. A pommed task is among the tasks to be set to done."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 2a1. BBProductive prompts user if they want to `pom` another task, or `N` to return the app to neutral."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 2a2. If user `pom` another task, use case resumes at stage 2 of UC09."
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC04 - Edit task"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1. User requests to update a task with updated fields and informs the task list."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2. BB Productive shows view with updated task list."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "+"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. New task name matches that of another task."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"This task already exists in the task list.\"_ in response box."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1b. User fed in an invalid index"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1b1. BBProductive shows _\"Invalid command format! \"_ in response box."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC05 - Set a reminder for a task"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1. User requests to set a task with a Reminder."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2. BB Productive creates/updates a task and shows the view with updated task list."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "3. A reminder pops up when the specified time has elapsed."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "+"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. New task name matches that of another task."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"This task already exists in the task list.\"_ in response box."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC06 - Set a task to recurring"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1. User requests to set a task to be a recurring task."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2. BB Productive creates/updates a task and shows the view with updated task list."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "3. A reminder pops up when the specified time has elapsed."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. New task name matches that of another task."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "+"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"This task already exists in the task list.\"_ in response box."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC07 - Delete task"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1.  User requests to list tasks."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2.  BBProductive shows a list of tasks."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "3.  User requests to delete a specific person in the list."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "4.  BBProductive deletes the task."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. New task name matches that of another task."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"This task already exists in the task list.\"_ in response box."
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1b. User fed in an invalid index."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1b1. BBProductive shows _\"Invalid command format!\"_ in response box."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1c. Task to be deleted is being pommed."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1c1. BBProductive shows _\"You can\u0027t delete a task you\u0027re pom-ming!\"_ in response box."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC08 - Sort tasks"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1.  User requests to list tasks."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2.  BBProductive shows a list of tasks."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "3.  User requests to sort the list by one or more parameters."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "4.  BBProductive creates a new view and updates the task list view."
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC09 - Start pomodoro"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1.  User requests to start pomodoro on a specific task."
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2.  BBProductive starts timer and sets task-in-progress to said task."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "3.  Pomodoro timer expires."
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "4.  BBProductive sets task-in-progress to null and prompts user if user has done the task."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "5.  User replies the affirmative."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "6.  BBProductive shows view with updated task list with done task. Pet adds additional points."
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "7.  BBProductive prompts user if user wants to do break time."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "8.  User replies the affirmative."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "9.  BBProductive starts break timer."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "10. Break timer expires."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "11. BBProductive returns to neutral state."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1a. User fed in an invalid index."
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1a1. BBProductive shows _\"Invalid command format! \"_ in response box."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 1b. Task specified by user already marked as done."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 1b1. BBProductive shows _\"Task has already been marked as done!\"_ in response box."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 5a. User replies negative."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 5a1. BBProductive will leave the task list as is."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case resumes at stage 7."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 5b. User replies with answer that is neither `Y/y` nor `N/n`."
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 5b1. BBProductive will leave the task list as is."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case resumes at stage 7."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* 8a. User replies negative."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** 8a1. BBProductive will start no timer."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case resumes at stage 11."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC10 - View stats"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1.  User requests to see the statistics tab."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2.  BBProductive displays the view under the statistics tab."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC11 - View settings"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1.  User requests to see the settings tab."
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2.  BBProductive displays the view under the settings tab."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "+"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Use Case: UC12 - Set settings"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "1.  User requests to update the app\u0027s settings."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "2.  BBProductive takes the input and updates the app\u0027s internal settings."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "3.  User requests to see the settings tab."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "4.  BBProductive displays the view under the settings tab with the updated preferences."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "+"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//end::usecase[]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::nfr[]"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".  Should be able to hold up to 1000 tasks without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".  Graphics should not be offensive to any culture in any way."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".  Product should be fully functional with CLI alone."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".  Storage should be done in a human readable and editable format."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".  Commands should be user-friendly."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::nfr[]"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//tag::glossary[]"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[%header,cols\u003d\"2,6\"]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Term"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Detail"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Mainstream OS"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Pomodoro [[pomodoro]]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|A time management method developed by Francesco Cirillo. Traditionally, cycles of 25 minutes of work and 5 minutes of rest."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Task [[task]]"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|A snippet of text specified by the user that can be tracked (done/time spent)."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Pet [[pet]]"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|A cute little companion whom the player can care for and accessorise with more tasks being done."
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|CLI"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Command Line Interface - a typing interface which is used to interact with the application"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Command"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Executes user input in the application"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|CommandBox"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|UI component that takes in user input"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|ResultDisplay"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|UI component that displays the feedback to the user"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|FXML"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|XML-based user interface markup language for defining user interface of a JaxaFX application"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|TaskListCard"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|UI component that displays information on an item"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|TaskListPanel"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|UI component that displays list of items"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|JavaFX"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Software platform for creating and delivering desktop applications and rich Internet applications"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|JSON"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|An open-standard file format that uses human-readable text to transmit data objects consisting of attribute–value pairs and array data types"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Logic"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Handles user input for the application and returns the application’s output"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|MainWindow"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Provides the basic application layout containing a pet and CLI sidebar and a task list interface with pomodoro timer"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Model"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Represents and exposes data in the task list, pet, pomodoro and statistics"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Parser"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Converts user input into a Command object"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|ReadOnlyTaskList"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Provides an unmodifiable view of a task list"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Storage"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Manages data of the pet, pomodoro, tasklist and statistics in local storage"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Edit distance"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Integer calculated with the levenshtein distance that represents the number of changes to get from one string to another"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//end::glossary[]"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::manualTesting[]"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. In the home folder for BBproductive, launch the jar file by double clicking on the jar file itself. +"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   Expected: Shows the GUI with a set of sample items. The window size may not be optimum."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Saving user preferences"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Add or edit tasks accordingly"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Re-launch the app by double clicking the jar file. +"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   Expected:  The same GUI list of tasks appears."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Viewing Relevant Screens on command"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". On launch"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Upon double clicking the JAR file, a GUI with the tasks list on the right panel appears."
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". On typing stats"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Type stats in the input command box if you are in either the tasks or settings panel."
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "artlee06"
        },
        "content": "... Expected: The right panel shows a GUI with multiple graphs."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". On typing settings"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Type settings in the input command box if you are in either the tasks or statistics panel."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "artlee06"
        },
        "content": "... Expected: The right panel shows a GUI with multiple fields for the settings."
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". On typing tasks"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Type tasks in the input command box if you are in either the settings or statistics panel."
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "artlee06"
        },
        "content": "... Expected: The right panel shows a GUI with the task list."
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Adding a task"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Adding from a screen with 0 tasks"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. First run `clear` to clear all tasks if there are still tasks on the screen."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Add a task by running the command `add n/test1` +"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: A task card appears in the tasklist with the name test1."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Adding from a screen with 1 task"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Add another task by running the command `add n/test2` +"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: A task card appears in the tasklist with the name test2."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Editing a task"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "artlee06"
        },
        "content": "+ Prerequisite : Run `clear` and add a task using the command `add n/editTest`"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Editing a task\u0027s name"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Run the command `edit 1 n/editedTest`. +"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: The command will result in the first task card\u0027s name to change from editTest to editedTest."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Editing a task\u0027s description"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Run the command `edit 1 des/testDescription`. +"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: The command will result in the testDescription being the description of the task card."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Editing a task\u0027s priority"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Run the command `edit 1 p/2`. +"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: The command will result in the priority to change from low to medium on the task card."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Editing a task\u0027s tags"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Run the command `edit 1 t/test`. +"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: The command will result in the test tag to appear below the task name on the task card."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Adding and triggering a reminder for the task"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Adding a task with a reminder. +"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Prerequisite: Take note of the current time plus 1 minute and date in the format `DD/MM/YY@HH:mm`, for example if the current time is `15/03/20@15:47` then you should get the command ready `15/03/20@15:48` (but use the current date and time instead)"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Run the command `add n/reminderTest des/test r/DD/MM/YY@HH:mm` +"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: When the time has arrived a a pop up with a title `reminderTest` and description `test` appears."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Editing a task to have a reminder. +"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Prerequisite: Take note of the current time plus 1 minute and date in the format `DD/MM/YY@HH:mm`, for example if the current time is `15/03/20@15:47` then you should get the command ready `15/03/20@15:48` (but use the current date and time instead)"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Add a task `add n/editReminderTest des/test` first and see it added on the tasklist panel"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Take note of the index of that task"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Edit the task with `edit \u003cindex\u003e r/DD/MM/YY@HH:mm` +"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: The task displays the reminder date in the task card. When the time comes, a pop up with a title `editReminderTest` and description `test` appears."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d Adding a recurring attribute to a task"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Adding a task with a recurring attribute. +"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Run the command add n/recurTest rec/t"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Take note of the index of that task."
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Run the done command done \u003cindex\u003e +"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Expected: For testing purposes, the time delay is set to 60 seconds and it mimics a weekly recurring task. After 60 seconds, the done is set back to unfinished, with the tick being removed from the task card."
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Editing a task to have a recurring attribute. +"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Add a task add n/editRecurringTest first and see it added on the tasklist panel"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Take note of the index of that task"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Edit the task with edit \u003cindex\u003e rec/t"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Run the done command done \u003cindex\u003e +"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Expected: The task is marked as done at first. After 60 seconds, the done is set back to unfinished, with the tick being removed from the task card."
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". Adding a task with a reminder and recurring attribute. +"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Prerequisite: Take note of the current time plus 1 minute and date in the format DD/MM/YY@HH:mm, for example if the current time is 15/03/20@15:47 then you should get the command ready 15/03/20@15:48 (but use the current date and time instead)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Run the command add n/recurReminderTest r/DD/MM/YY@HH:mm rec/t"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".. Take note of the index of that task."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Run the done command done \u003cindex\u003e +"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Expected: After 60 seconds, the done is set back to unfinished, with the tick being removed from the task card. After the reminder appears, the date displayed changes to the next week as it mimics a weekly recurring task albeit with a 60 second time delay, for example 15 March at 15:48 changes to 22 March at 15:48."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Sorting the task list"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Add a bunch of tasks with different priorities, reminder dates and done values"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Next perform sorts of various permutations of {(r-)priority, (r-)name, (r-)done, (r-)date} with spaces in between"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. sort fields that appear first are of higher priority than those that appear less"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Expect the sort order of the tasklist to change, please reference our user guide for the specific changes to the tasklist if unsure"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. also expect the UI to change to display the most recent sort order"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. e.g. sort name priority -\u003e UI shows Tasks by name"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... Note that sort order is not maintained after application closes"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Finding a task"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Add a bunch of tasks with names with phrases that overlap and tags as well"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Next you can perform one of the three permutations"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. `find phrase`"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. `find phrase [t/TAG]...`"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. `find t/TAG [t/TAG]...`"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Expected order of search results: [those mentioned first should appear first]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. tasks that have multiple tag matches"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. tasks that have full name match and tag match"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. tasks that have full name match or 2 tag matches"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. tasks that match a tag or phrase is partially matched"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". tasks that don\u0027t meet any of the above won\u0027t be shown"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d Auto complete"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". UI changes"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Any known command words will have command text field set to green"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Any unknown command words will have command text field set to red"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Any input deletion or invalid indexes will have the result display set to orange"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Test the command words"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. try partial start matches: `fi` -\u003e `find`"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. try typo matches: `fand` -\u003e `find`"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... All command word partial matches should work"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. `asdf` -\u003e `asdf`"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... [command text field set to red]"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. try misspelled words by 1 character: `fand` -\u003e `find`"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Test prefix completion"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Add: `add 20/10/20@10:30 3` -\u003e `add r/20/10/20@10:30 p/3`"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Edit: `edit 2 20/10/20@10:30 1` -\u003e `edit 2 r/20/10/20@10:30 p/1`"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... Ensure that the date values are valid"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Pom: `pom 2 2.5` -\u003e `pom 2 tm/2.5`"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Test index checking"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. Edit: `edit -2` -\u003e `edit -2`"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... [result display shown to user and turned orange]"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... any non positive integer or integers outside of the displayed task list\u0027s size will trigger the same deletion and feedback"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. delete/done: `done -2 a 1999 2` -\u003e `done 2`"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... [result display also set to orange]"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". Sort field completion"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".. sort: `sort na prioruty blabla` -\u003e `sort name priority`"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "... result display set to orange if input has been deleted"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d Activating Pomodoro"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ". Activating Pomodoro. +"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Run the command `pom 1`"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Take note of the index of that task. +"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Expected: Pomodoro timer will start counting down from 25:00 minutes (default). Upon expiry of the time, app will prompt user in the response bubble, asking if done or no."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ". Activating Pomodoro with special time. +"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Run the command `pom 1 tm/0.5`"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Take note of the index of that task +"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Expected: Pomodoro timer will start counting down from 00:30 minutes. Upon expiry of the time, app will prompt user in the response bubble, asking if done or no."
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ". Pausing and Resuming Pomodoro. +"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Run the command `pom 2`"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Then, run the command `pom pause`."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".. Then, run the command `pom continue`. +"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Expected: After the firs command, Pomodoro timer will start counting down from 25:00 minutes (default). After `pom pause`, the timer will pause. After `pom continue`, timer will resume."
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::manualTesting[]"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Switching tabs"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ". Switching tabs by using the SwitchTabCommands. +"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `stats`"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Expected: The right screen displays the \u0027Statistics\u0027 tab. The \u0027Statistics\u0027 tab should have an orange background to indicate selection."
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ". Switching tabs by using other Commands. +"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `stats`."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Take note that the right screen displays the \u0027Statistics\u0027 tab."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `set daily/50`. This is a SetCommand, and the right screen should automatically display the \u0027Settings\u0027 tab."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Expected: The right screen displays the \u0027Statistics\u0027 tab. The \u0027Statistics\u0027 tab should have an orange background to indicate selection."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Checking Statistics"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ". Check done tabulation"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `stats`."
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Take note of the number of tasks done on the current day."
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `clear`."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `add n/new task`."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `done 1`."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `stats` again."
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Expected: The number of tasks done on the current day should increase by 1."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ". Check Pomodoro duration tabulation"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `stats`."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Take note of the Pomodoro duration on the current day."
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `clear`."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `add n/new task`."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `pom 1 tm/1`. This runs the Pomodoro for 1 minute."
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Run the command `stats` again."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Expected: The Pomodoro duration on the current day should increase by 1."
      }
    ],
    "authorContributionMap": {
      "Hardoh": 310,
      "FyonnOh": 49,
      "artlee06": 140,
      "BransonNg": 285,
      "Permas-Teo": 207,
      "-": 350
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize User Stories `[LO-UserStories]`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/userStories/[se-edu/se-book: Requirements: Specifying Requirements: User Stories]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more user stories"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Assume you are planing to expand the functionality of the AddressBook (but keep it as a CLI application)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "What other user stories do you think AddressBook should support? Add those user stories to the `DeveloperGuide.adoc`."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Utilize use cases `[LO-UseCases]`"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/specifyingRequirements/useCases/[se-edu/se-book: Requirements: Specifying Requirements: Use Cases]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a \u0027Rename tag\u0027 use case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a use case to the `DeveloperGuide.adoc` to cover the case of _renaming of an existing tag_."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. rename the tag `friends` to `buddies` (i.e. all persons who had the `friends` tag will now have"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "a `buddies` tag instead)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Assume that AddressBook confirms the change with the user before carrying out the operation."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Non Functional Requirements `[LO-NFR]`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/requirements/nonFunctionalRequirements/[se-edu/se-book: Requirements: Non-Functional Requirements]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more NFRs"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Add some more NFRs to the `DeveloperGuide.adoc`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Polymorphism `[LO-Polymorphism]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Command::execute()` method shows polymorphic behavior."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/polymorphism/[se-edu/se-book: Paradigms: OOP: Polymorphism]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/polymorphism/[se-edu/se-book: C++ to Java: OOP: Polymorphism]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a polymorphic `isMutating` method"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a method `boolean isMutating()` to the `Command` class. This method will return `true` for"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "command types that mutate the data. e.g. `AddCommand`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently, AddressBook data are saved to the file after every command."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Take advantage of the the new method you added to limit file saving to only for command types that mutate data."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `add` command should always save the data while `list` command should never save data to the file."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "There may be better ways to limit file saving to commands that mutate data. The above approach, while not"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "optimal, will give you chance to implement a polymorphic behavior."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use abstract classes/methods `[LO-Abstract]`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/abstractClasses/[se-edu/se-book: Paradigms: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/abstractClassesAndMethods/[se-edu/se-book: C++ to Java: OOP: Abstract Classes]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Make `Command#execute()` method abstract"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* Make the `Command#execute()` method abstract (hint: refer to the comment given below the method)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use interfaces `[LO-Interfaces]`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `AddressBook` class implements the `ReadOnlyAddressBook` interface so that clients who don\u0027t need write access to the `AddressBook` can access the `AddressBook` through the `ReadOnlyAddressBook` interface instead."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "image::ReadOnlyAddressBookUsage.png[width\u003d500]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/oop/inheritance/interfaces/[se-edu/se-book: Paradigms: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/cppToJava/inheritance/interfaces/[se-edu/se-book: C++ to Java: OOP: Abstract Interfaces]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add a `Printable` interface"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `Printable` interface as follows."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "image::PrintableInterface.png[width\u003d400]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* `Override` the `getPrintableString` in classes `Name`, `Priority`, `Email`, and `Address` so that each produces a printable string representation of the object. e.g. `Name: John Smith`, `Priority: 12349862`"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* Add the following method in a suitable place of some other class. Note how the method depends on the Interface."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns a concatenated version of the printable strings of each object."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "String getPrintableString(Printable... printables) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "The above method can be used to get a printable string representing a bunch of person details."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "For example, you should be able to call that method like this:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "// p is a Person object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "return getPrintableString(p.getPriority(), p.getEmail(), p.getAddress());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Follow Liskov Substitution Principle `[LO-LSP]`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/liskovSubstitutionPrinciple/[se-edu/se-book: Principles: Liskov Substitution Principle]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add an exception to an overridden method"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Add a `throws Exception` clause to the `AddCommand::execute` method. Notice how Java compiler will not allow it,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "unless you add the same `throws` clause to the parent class method. This is because if a child class throws"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "an exception that is not specified by the Parent\u0027s contract, the child class is no longer substitutable in place of"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "the parent class."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note that while in the above example the compiler enforces LSP, there are other situations where it is up to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "the programmer to enforce it. For example, if the method in the parent class works for `null` input, the overridden"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "method in the child class should not reject `null` inputs. This will not be enforced by the compiler."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Java-FX for GUI programming `[LO-JavaFx]`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/javaTools/javaFXBasic/[se-edu/se-book: Tools: Java: JavaFX: Basic]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance GUI"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* Do some enhancements to the AddressBook GUI. e.g. add an application icon, change font size/style"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Analyze Coupling and Cohesion of designs `[LO-CouplingCohesion]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how having a separate `ParserUtil` class to handle user input validation, space trimming etc. of model data (an application of the Single Responsibility Principle) improves the _cohesion_ of the model component (since it does not need to be concerned with handling user input) as well as the `ParserUtil` class."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/coupling/[se-edu/se-book: Design: Design Principles: Coupling]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designFundamentals/cohesion/[se-edu/se-book: Design: Design Principles: Cohesion]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Identify places to reduce coupling and increase cohesion"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the design coupling can be reduced further, or cohesion can be increased further?"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "[[apply-dependency-inversion-principle-lo-dip]]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Dependency Inversion Principle `[LO-DIP]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the `LogicManager` class doesn\u0027t depend on `StorageManager` directly, but rather the interface `Storage`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "This is an application of the Dependency Inversion Principle."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicStorageDIP.png[width\u003d300]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Where else in the code do you notice the application of DIP?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/dependencyInversionPrinciple/[se-edu/se-book: Principles: Dependency Inversion Principle]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Dependency Injection `[LO-DI]`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Notice how the `LogicManager` class does not depend on the `StorageManager` class, but depends on the `Storage` interface."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to use _Dependency Injection_ to test the `LogicManager` class without getting the `StorageManager` class involved."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/dependencyInjection/[se-edu/se-book: Quality Assurance: Testing: Dependency Injection]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Facilitate injecting a StorageStub"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* Notice how `LogicManagerTest` tests `LogicManager` by constructing a `StorageManager` object."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "* Implement `StorageStub` such that calls to its `save*` methods do nothing (i.e. empty method body)."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "* Update `LogicManagerTest` to work with the `StorageStub` instead of the actual `StorageManager` object."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "i.e. `LogicManagerTest` injects a `StorageStub` object when constructing a `LogicManager` before testing it."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjection.png[width\u003d600]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "* The example above uses \u003c\u003capply-dependency-inversion-principle-lo-dip, DIP\u003e\u003e as a means to achieve DI."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Note that there is another way to inject a `StorageStub` object, as shown below."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "In this case we do not apply the DIP but we still achieve DI."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "image::DependencyInjectionWithoutDIP.png[width\u003d250]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Open-Closed Principle `[LO-OCP]`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d References"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/principles/openClosedPrinciple/[se-edu/se-book: Principles: Open-Closed Principle]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Analyze OCP-compliance of the `LogicManager` class"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "* Consider adding a new command to the Address Book. e.g. an `edit` command. Notice how little you need to change in the `LogicManager` class to extend its behavior so that it can execute the new command."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "That is because `LogicManager` follows the OCP i.e. `LogicManager` is _open to be extended_ with more commands but _closed for modifications_."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* Is it possible to make the `AddressBookParser` class more OCP-compliant in terms of extending it to handle more"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "command types?"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* In terms of how it saves data, is `LogicManager` more OCP-compliant"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "due to the application of DIP as given in \u003c\u003capply-dependency-inversion-principle-lo-dip, `LO-DIP`\u003e\u003e?"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "How can you improve ``LogicManager``\u0027s OCP-compliance further so that it can not only work with different types"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "of storages, but different number of storages (e.g. save to both a text file and a database)."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Work in a 3KLoC code base `[LO-3KLoC]`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Enhance AddressBook"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "* Enhance AddressBook in some way. e.g. add a new command"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 214
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d BB Productive - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ":important-caption: :heavy_exclamation_mark:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": ":repoURL: https://github.com/AY1920S2-CS2103T-W16-1/main"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "By: `AY1920S2-CS2103T-W16-1`      Since: `Jan 2020`      Licence: `NUS`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::CoverPage.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d What is BB Productive? (Fyonn)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Feeling unproductive lately? Try BB Productive! BB Productive is a productivity application that consists of three main features: a task manager, a Pomodoro timer and a Pet, to help you get rid of those unproductive days. It is *targeted towards students who are prone to procrastination and prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast and needs help feeling motivated, BB Productive can help you to start your journey of productivity!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Interested? Jump to \u003c\u003cquickstart, Section 3. Quick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d About this document (Fyonn)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "This document provides information about the multitude of features in BB Productive, and how you can best utilise them to your benefit."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Note the following symbols and formatting used in this document:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Symbols:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "This formating indicates important information."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "This formatting indicates that this is additional information"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Formating:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "[cols\u003d2*]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| *Formatting*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| *Meaning*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| _preface_"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| A paragraph in italics indicates that the paragraph is a preface to the section below."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| `Command`"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "| A grey highlight indicates that the word is a command to be entered by the user."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| `UPPER_CASE`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| Words in `UPPER_CASE` are the parameters to be supplied by the user E.g. add `n/NAME`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "`NAME` is a parameter. It can be used as add `n/Math Homework`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| [Square brackets]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|Items in square brackets are optional"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "E.g. `n/NAME [t/TAG]` can be used as"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "`n/Math HomeWork t/Urgent`"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "or"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": " as `n/Math Homework`"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "| `…​`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|Items with `…​` after them can be used multiple times or not used at all."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "E.g. `[t/TAG]…`​ can be used as"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "`t/friend"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "or"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "t/friend t/family`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Indexes refer to the current tasklist on display, it does not refer to the indices of the entire task list. Note also that indexes start from 1 and not 0."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Parameters can be in any order e.g. if the command specifies `pet/PETNAME pom/POMDURATION`, `pom/POMDURATION pet/PETNAME` is also acceptable."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::quickStart[]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Quick Start (Arthur)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "anchor:quickstart[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "_This section provides a quick guide on firing up BB Productive._"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Overview of BBproductive features"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::BBProductiveQuickStart_Graphic.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Follow the steps below to install and launch BB Productive:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".  Download the latest `bb_productive.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your BB Productive."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Image of User Interface on boot."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".  Type the command in the Pet Chat (Command box) and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* **`add`**`n/Do math homework des/pages 1-2 r/11/11/21@23:59` : adds a task of the name `Do math homework` to the Task List with a date and time that follows the r/ prefix and a `pages 1-2` description."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* **`delete`**`3` : deletes the 3rd task shown in the list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".  Refer to \u003c\u003cfeatures, Section 6 Features\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::quickStart[]"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[#index]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[[Terminology]]"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Terminology (Branson)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "_This section provides a quick description for the common terminologies used in this user guide._"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*Task*: A task is something that you need to complete. It is represented as a card on the right side of the window. Set reminders, add tags and more to better manage your tasks!"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*Pomodoro*: A productivity technique that consists of doing focused work for 25 minutes followed by a 5-minute break. This technique prevents you from tiring out while doing work."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*Pet*: The pet you will interact with to manage your tasks and Pomodoros. You can also level up the pet by completing more tasks/Pomodoros."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::gui[]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Graphical User Interface (Permas)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "_This section gives you a brief overview of the various GUI components present in BB Productive._"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Pet View"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Pet View is where you can view your pet, its name, level, and experience points. With diligent usage of BB Productive, you can increase the experience points of your pete. The pet will evolve as it levels up, encouraging you to work harder! Further details of the Pet can be found in \u003c\u003cpet, Section 6.2. Pet\u003e\u003e."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Pet"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::pet.png[width\u003d395]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Command Box"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "The Command Box is the one-stop place for you to input any commands to interact with the app. Simply click the box and type the command of your choice. Hit [Enter] on your keyboard to execute the command. The program will respond to each command through the Pet Dialog Box. Occasionally, the app may also prompt you for your response via the Dialog Box. You can reply through the command box as well."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Command Box"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::command_box.png[width\u003d395]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Tasks Tab"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Task Tab is where you can view your task list and the Pomodoro Timer. Any changes made to the task list through the commands will be reflected here! The Pomodoro Timer activates when you run the Pom Command as described in \u003c\u003cpomodoro, Section 6.3. Pomodoro\u003e\u003e."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Tasks Tab"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::tasks_tab.png[width\u003d790]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Statistics Tab"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Statistics Tab shows you your progress on the Daily Challenge and your Productivity Charts. They help you to visualize your productivity over the past week, so that you can reflect on your progress to hit your productivity goals! You can find out more about this tab in \u003c\u003cstatistics, Section 6.4. Statistics\u003e\u003e."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Statistics Tab"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::stats_tab.png[width\u003d395]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Settings Tab"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Settings Tab lets you customize the app to your preference. In this tab, you can view your configurations for Pet Name, Pomodoro Duration, and Daily Challenge Target. To find out more about how you can use this tab, head to Section 6.11. Set Commands."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Settings Tab"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::settings_tab.png[width\u003d395]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::gui[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "anchor:features[]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "_This section describes the features of BBProductive._"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//tag::TaskList[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d TaskList (Branson)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::tasks.png[width\u003d790]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Task Fields"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Use `add` and `edit \u003c\u003cindex, INDEX\u003e\u003e` attached with any combination of the following task field prefixes to perform them. These prefixes can be in any order."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Constraints for fields are _italicized_ in the Notes column."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Task Fields"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[cols\u003d\"1,2m,3m\", frame\u003d\"topbot\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Field |Format |Notes"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Name"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|`n/NAME` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Eg. n/Any name is possible"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* _Name must be in alphanumeric characters or spaces. It cannot be blank._"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Name provided has to be unique in the tasklist and is used as an identifying field."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* It is the **only compulsory** field when creating a task."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Description"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|`[des/DESCRIPTION]` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Eg.des/Lab of weightage 20% on NP-Completeness"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|* Description that accompanies a task"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Priority"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|`[p/PRIORITY]` +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Eg. `p/1`"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* _Priority can only be 1 or 2 or 3_"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* If not provided, the task is created with a low priority ie. 1."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* `PRIORITY` can only be one of these numbers `1,2,3` ranging from low to high in that order."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Reminder"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|`[r/REMINDER]` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Eg. `r/10/06/20@12:30`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*_ Format should be in DD/MM/YY@HH:mm_"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* A DateTime value in this format `DD/MM/YY@HH:mm`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Recurring tag"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|`[rec/FREQUENCY]` +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "`rec/d` +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*_ Recurring tag should either be d or w_"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Options are _`d`_ or _`w`_ which respectively are daily or weekly."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Tag"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|`[t/TAG]...` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "artlee06"
        },
        "content": "`t/errand t/home`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*_Tags should be in alphanumeric characters only_"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* There can be multiple tags or none at all."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* spaces and symbols are disallowed."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Done"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|_No prefix available_"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "a|"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* When a task is created, it is set as undone."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Task can then be marked with `done INDEX`."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Add Command"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `add n/This is a new task p/3 des/We have alot of work to do today! t/This t/Is t/Fun`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Alright, time to start your productivity journey! Let\u0027s add our very first task by using the command stated above."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "artlee06"
        },
        "content": "When adding tasks, you only need the `n/` prefix as only the name field is compulsory."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Add success"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::add_success.png[width\u003d790]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Edit Command"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `edit INDEX n/Look edited the task des/BB Productive is the best app I\u0027ve ever used t/NewTag`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Made a mistake when adding your task? don\u0027t worry you can always edit your tasks! But first, a few things to take note of:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* You can edit all fields except the done field."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Please indicate an `\u003c\u003cindex, INDEX\u003e\u003e` so that BB Productive knows which task to edit."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Edit success"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::edit_success.png[width\u003d790]"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Done Command"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `done \u003c\u003cindex, INDEX\u003e\u003e INDEX...`"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "artlee06"
        },
        "content": "After some hard work, you have finally finished a task! Let us now mark it as done by using the done command. You can also mark multiple tasks as done by using space to separate the \u003c\u003cindex, indexes\u003e\u003e."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Done success"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::done_success.png[width\u003d790]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Sort Command"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `sort FIELD FIELD...`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Oh boy, after a couple of hours, you have filled your day with so many activities! You can choose to change the current ordering of your task list to something more suitable by sorting it by one or more of these task fields:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "_All fields with r- prepended refers to a reverse of the original._"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". priority -\u003e Shows task of highest priority first."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". r-priority -\u003e Shows task of lowest priority first."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". done -\u003e Shows undone tasks first."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". r-done -\u003e Shows done tasks first."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". date -\u003e Shows tasks with reminders closer to today first then tasks without reminders."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "artlee06"
        },
        "content": ". r-date -\u003e Shows tasks with no reminders first then tasks with reminders further from today."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". name -\u003e Shows tasks in alphanumeric order."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ". r-name -\u003e Shows tasks in reverse alphanumeric order."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Sort order is removed after any find command is applied. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "artlee06"
        },
        "content": "However, it, remains when any other task commands are applied - add, edit, done, delete, etc. +"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Also, sort orders are not retained after closing the application"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Sort success"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::sort_success.png[width\u003d790]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Find Command"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `find PHRASE`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `find t/TAG t/TAG...`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `find PHRASE t/TAG...`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Even after sorting, you still have so many tasks in your tasklist. You can perform a search for tasks by name or tag to find the tasks most important to you."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* You can choose to search by both name and tag, just name or just tag."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* For phrase searching, it is tolerant to typographical errors and will show tasks that differ from the `PHRASE` by a little."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* However, tag names provided must be an exact match (ignoring casing of letters)."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Filtered selection is unapplied when the `add` or `edit` commands are used"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Find success"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::find_success.png[width\u003d790]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Tag Command"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command : `tag`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Wondering what types of tasks you have? You can view all existing tags in BB Productive by entering the Tag command!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Tags success"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::tag_success.png[width\u003d790]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Delete Command"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `delete \u003c\u003cindex, INDEX\u003e\u003e INDEX...`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Tasklist getting overcrowded? Use the delete command to delete one or more tasks To clean up your tasklist!"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Delete success"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::delete_success.png[width\u003d790]"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d Clear Command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: `clear`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "artlee06"
        },
        "content": "It\u0027s been a productive month and you want to  start on a clean slate. You may delete all tasks from your list by issuing a clear command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Clear success"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::clear_success.png[width\u003d790]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//end::TaskList[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Pet (Fyonn)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "anchor:pet[]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "_This section provides information about the virtual pet_"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d What\u0027s Pet?"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "BB productive provides you with a virtual pet to act as your companion to motivate you to do work. It is also a visual embodiment of your productivity so as to remind you of your productivity progress. The pet achieves these functions through three components: Experience points, Evolution and Pet\u0027s Mood."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d Experience (XP) Points"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Just like in a game, the pet has experience (XP) points that are used to level up. Notice whenever a task is done, the XP increases by 5 points? You can also increase the XP by 25 points when you finish a Pomodoro cycle. When the XP points accumulates to a total of 100, the pet levels up! Through this reward system, you will be motivated to start doing your work and completing them! Proceed to the next section for information about the evolution of the pet."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Done Before"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::UG_Done_before.png[width\u003d790]"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Done After"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::UG_Done_Finish.png[width\u003d790]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d Evolution"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The pet has three stages in its evolution: the baby, the teenager and the dad. Each level can be achieved after every successive accumulation of 100 XP points. Can\u0027t wait to see your pet grow? Start doing work to gain more XP!"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Evolution of Pet"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::BBProductiveGrowing.png[width\u003d790]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d\u003d\u003d Pet\u0027s Mode"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Oh no! Is your pet looking like it is angry? You might be wondering why. That is because the pet has two moods: *Happy* and *Hangry*. When the pet is happy, that means you have been consistent in your work. Good Job! However, when the pet is hangry, that indicates that you have not been doing work for awhile. The pet acts as a visual cue to remind you when you have not been productive in awhile. Want to make your pet happy again? Start doing work now!"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Example of different hangry modes"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::hangry-moods-examples.png[width\u003d790]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//tag::pomodoro[]"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[[Pomodoro]]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Pomodoro (Hardy)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "anchor:pomodoro[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "_In this section, let\u0027s learn how you can take advantage of the Pomodoro feature to boost your productivity! Learn all the commands you can use for Pomodoro._"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d What\u0027s Pomodoro?"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "In the late 1980s, a gentleman named Francesco Cirillo devised a time management method called the Pomodoro Technique. Essentially, a single cycle consists of two parts, 25 minutes of work, followed by a 5 minutes break. This cycle repeats for as long as you want to get work done."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d Let\u0027s get started!"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "BBProductive\u0027s Pomodoro feature is very easy to use. Let\u0027s take a look at the following steps!"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 1: `pom` a task to get started!"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "You can activate the Pomodoro timer and set a task you want to focus on. The default timer for a work cycle is 25 minutes. However, you can add an optional timer amount field for a particular cycle."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Format: `pom \u003cindex\u003e [tm/\u003camount in minutes\u003e]`"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Indexes refer to the current tasklist on display, it does not refer to the indices of the entire task list. Note that indexes start from 1 and not 0."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "artlee06"
        },
        "content": "You can input a value  (decimals allowed) following the prefix `tm/` to represent your desired amount of time in *minutes* for a particular Pomodoro cycle."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "After you\u0027ve successfully _pommed_ a task, you can see the task\u0027s name in the bar at the top of the task list. The timer there will start counting down as well."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Example screen when pom is successfully executed"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::pom_success.png[width\u003d790]"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 2: `pom pause` if you need to take a quick break."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Not exactly a break. But let\u0027s say you need to leave your desk real quick. You can pause a running Pomodoro timer by simply calling `pom pause`."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Once you\u0027ve paused Pomodoro, the timer will freeze and remain so until you resume in the next step."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Example screen when pom is successfully paused"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::pom_pause.png[width\u003d790]"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 3: `pom continue` to get back to work."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Now that you\u0027re back and ready to get back to work, simply use `pom continue` to resume for where you left off."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Example screen when pom is successfully resumed"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::pom_continuing.png[width\u003d790]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 4: Time\u0027s up!"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Once the timer expires, the app will prompt you if you have finished the task. You need only respond with Yes (Y) or No (N) in order to proceed."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Prompt when the Pomodoro timer expires"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::pom_time_expire.png[width\u003d790]"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Step 5: Break-time!"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Afterwards, the app will prompt you if you would like to begin a 5-minute break (as per the Pomodoro technique). Similarly, you need to respond with Yes (Y) or No (N). Responding with No(N) will set the app to its neutral state. Responding with a Yes(Y) will start the break timer."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ".Prompt checking if you\u0027d like to take a break"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::pom_prompt_break.png[width\u003d790]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "artlee06"
        },
        "content": "You will not be able to execute other commands during these prompts. Please respond to the prompts to proceed."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Back to Step 1"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "artlee06"
        },
        "content": "At the end of the break, the app will return to its \"neutral\" state. Wish to start on another Pomodoro cycle? Head back to step 1 for another journey of productivity."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".End of Pomodoro cycle screen"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::pom_break_end.png[width\u003d790]"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//end::pomodoro[]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::statisticsug[]"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Statistics (Permas)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "anchor:statistics[]"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "As you continue to use BB Productive, you may start to wonder how productive you have been over time. This is where our Statistics feature comes in! Simply type in the command `stats` to access the Statistics Tab and track your productivity. Look out for the background color of the \"Statistics\" Tab. If it turns orange after you run the command, you are on the correct tab."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Statistics Tab"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::stats_tab.png[width\u003d400]"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Statistics Tab consists of two features to help you keep track of your productivity : the Daily Challenge and the productivity charts."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d Daily Challenge"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Daily Challenge tracks the total duration you have completed with the Pomodoro running on the current day. The more you run the Pomodoro, the more the progress bar fills, and the closer you are to clearing the challenge! Try to clear the Daily Challenge every day to hit your productivity goals!"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "artlee06"
        },
        "content": "You can customize the duration you aim to achieve on a daily basis by using the Set Command as described in \u003c\u003csettings, Section 6.11 Set Commands\u003e\u003e."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d Productivity Charts"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The Productivity Charts tracks two main data points daily. Firstly, it tracks the number of tasks you have completed. Secondly, it tracks the total duration you ran the Pomodoro. With this information, you can gauge your productivity over time and make proper adjustments to your schedule to improve your productivity. If you start noticing the orange bars getting shorter, realize that it is time to buckle up and work harder, or else you may lose your productivity momentum!"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::statisticsug[]"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//tag::AutoComplete[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d AutoComplete (Branson)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "artlee06"
        },
        "content": "As much as you enjoy typing, we\u0027ve added some extra grease to help you type even faster. You can trigger our intelligent autocomplete function by pressing `tab` on the keyboard."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "You can expect: +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Auto completion of command words: `del -\u003e delete`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Command word auto complete"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::AC_command.png[]"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Addition of prefixes for common values: `20/10/20@10:30 -\u003e r/20/10/20@10:30`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Prefix auto complete"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::prefix_complete.png[]"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Auto completion of sort fields `sort pri` -\u003e `sort priority`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Sort auto complete"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::sort_complete.png[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Removal of indexes that are invalid [not a positive integer or out of the tasklist\u0027s size]"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Done index removal"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::AC_removal_success.png[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* If we can\u0027t find a valid command, you will observe feedback like below:"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ".Auto complete not found"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::complete_fail.png[]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "//end::AutoComplete[]"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::reminder[]"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Reminders (Arthur)"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d What\u0027s a reminder?"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "artlee06"
        },
        "content": "BBProductive provides you with the option to remind you during those forgetful times. BBProductive can help to remind you to do time-sensitive tasks such as taking temperature in the afternoon. When the time for the reminder has arrived, BBProductive alerts you to do the task! Never forget to buy milk or any other time-sensitive task ever again!"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d How do you use it?"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "artlee06"
        },
        "content": "You can add a reminder to your task by adding `r/DD/MM/YY@HH:mm` when editing or adding a task. A pop up containing the task name and description will then appear reminding you to complete the task at the specified date and time."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d Command `r/DD/MM/YY@HH:MM`"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Task with reminder"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Add a task with a reminder using the following command `add n/\u003cname\u003e r/DD/MM/YY@HH:mm`. You can also include the other flags such as `t/`, `des/` and more."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "artlee06"
        },
        "content": "For example: `add n/Buy Milk r/11/11/20@23:59`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "artlee06"
        },
        "content": "After you have successfully added the task, you will see the following success message in the dialogue box!"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for adding a task with reminder on result display(top)."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::AddTaskReminderUp.png[width\u003d395]"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for adding a task with reminder on result display(scroll to bottom)."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::AddTaskReminderDown.png[width\u003d395]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for adding a task with reminder(top)."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::reminder_add_success.png[width\u003d790]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "artlee06"
        },
        "content": "- Firstly, the format for the date must adhere strictly to the `r/DD/MM/YY@HH:mm` format or else it will not be recognized."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "artlee06"
        },
        "content": "- Secondly, the date can only be set in the future and not the past. +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "artlee06"
        },
        "content": "An error message will be shown on the result display if either of the 2 aforementioned issues is breached. This applies when editing a task to have a reminder as well."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Edit Task with reminder"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Edit a task to include a reminder with the following command `edit \u003cindex\u003e r/DD/MM/YY@HH:MM`. You can also include the other flags such as `t/`, `des/` and more."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "artlee06"
        },
        "content": "For example: `edit 1 r/01/11/20@11:59`."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "artlee06"
        },
        "content": "This results in a task with the reminder\u0027s date in the task card as well as result display giving feedback."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for editing task\u0027s reminder, reminder date appears on task card."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::reminder_edit_success.png[width\u003d790]"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::reminder[]"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//tag::recurring[]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Recurring (Arthur)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d What\u0027s Recurring?"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Have a task you need to complete every day or every week? BBProductive has you covered with recurring tasks! Add a recurring task and the task will be marked as unfinished every day or every week? This means not having to add the same task over and over again! Furthermore, you can accompany these recurring tasks with reminders. Now you don\u0027t have to worry about forgetting to do your daily or weekly tasks!"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d How do you use it?"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Add a recurring attribute to your task by adding `rec/d` for daily recurring tasks or `rec/w` for weekly. This will trigger the recurring behaviour for the task, meaning tasks will be reset according to the delay you set! This means after marking a task as done, the next day (or week) it will be marked as unfinished. For reminders, BBProductive will also add a day(or week) to the reminder date! This ensures you are reminded on a recurring basis!"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command `rec/d` or `rec/w`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Task with recurring"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Add a task with a recurring attribute using the following command `add n/\u003cname\u003e rec/d` or `add n/\u003cname\u003e rec/w`. You can also include the other flags such as `t/`, `des/` and more."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "artlee06"
        },
        "content": "For example: `add n/Buy Milk rec/d`"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "artlee06"
        },
        "content": "After you have successfully added the task, you will see the following success message in the dialogue box!"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for adding a task with recurring attribute on result display(top)."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::AddTaskRecurringUp.png[width\u003d395]"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for adding a task with recurring attribute on result display(scroll to bottom)."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::AddTaskRecurringDown.png[width\u003d395]"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "artlee06"
        },
        "content": "You will see the task appear in the tasklist with a recurring attribute at the side!"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Success for adding recurring attribute to task card."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::recurring_add_success.png[width\u003d790]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "artlee06"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "artlee06"
        },
        "content": "The format for recurring is strictly `rec/d` or `rec/w` as there are only daily and weekly recurring tasks. Any other input will be recognized as invalid and an error message will be shown on the result display."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Edit Task with recurring"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Want to make an existing task recurring? You can edit a task to include a recurring with the following command `edit \u003cindex\u003e rec/d` or `edit \u003cindex\u003e rec/w`. You can also include the other flags such as `t/`, `des/` and more."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "artlee06"
        },
        "content": "For example: `edit 1 rec/w`."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Once completed, you will see that the task details will be updated with a recurring attribute."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task card now has a weekly recurring attribute"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::EditRecurringTaskWeekly.png[width\u003d790]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Recurring behaviour when a task is marked as done (Arthur)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Mark a task as done as you would normally using the command `done \u003cindex\u003e`. For a recurring task, after the stipulated amount of time(either daily or weekly), the task will be reset as unfinished."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "artlee06"
        },
        "content": "For example: `done 1` on a daily recurring task."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task initially marked as done on a task card."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::recurring_behaviour_done.png[width\u003d790]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "artlee06"
        },
        "content": "After one day, the task will be set from done to unfinished, meaning the tick in the checkbox will disappear."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task has been reset shown on result display."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::recurring_behaviour_undone_resultDisplay.png[width\u003d395]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task has been reset as shown on the task card."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::recurring_behaviour_undone.png[width\u003d790]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Recurring behaviour when the task has a reminder (Arthur)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Add a reminder as you would normally using the command `edit \u003cindex\u003e r/DD/MM/YY@HH:mm` or `add n/\u003cname\u003e r/DD/MM/YY@HH:mm rec/\u003ctype\u003e` if you are adding the task. For a recurring task, after the stipulated amount of time(either daily or weekly), the reminder will be incremented by the time interval if it has been triggered. This means that the reminder will be incremented by 1 day if the time interval is daily, and 7 days if the time interval is weekly."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task initially has a reminder for 13th April 2020 at 9:32 PM."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::recurring_behaviour_reminder.png[width\u003d790]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "artlee06"
        },
        "content": "After one day, you will see that the reminder time is updated!"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "artlee06"
        },
        "content": ".Task has been reset shown on task card with an updated reminder time of 14th April 2020 at 9:32 PM."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::recurring_behaviour_new_reminder.png[width\u003d790]"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "artlee06"
        },
        "content": "//end::recurring[]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[[Navigation]]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Navigation (Fyonn)"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "artlee06"
        },
        "content": "_This section shows all the commands to navigate the app. There are multiple tabs that can be shown: tasklist, statistics, and settings._"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d Commands"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Tasks"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Command: `tasks`"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "You can call the `tasks` command to view the tab where your _task list_ resides in. The orange background on the Tasks tab indicates that you are currently on this tab."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::tasks.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Command: `stats`"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "You can use the `stats` command to view the _Statistics_ tab. The orange background on the Statistics tab indicates that you are currently on this tab."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::stats.png[width\u003d\"790]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Command: `settings`"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "Use the `settings` command to view the _Settings_ tab. The orange background on the Settings tab indicates that you are currently on this tab."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "image::settings.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Set Commands (Fyonn)"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "anchor:settings[]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "_This section explains how to use the set commands_"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Tired of the name \"BB\"? Is 25 minutes of Pomodoro time too short for you? Want to achieve more with the daily challenge? BB productive provides you with the option to customize the various features! Simply use the set commands to customize it the way you want."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "command: `set [pet/PETNAME] [pom/POMDURATION] [daily/DAILYTARGET]`"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Parameters can be in any order e.g. if the command specifies `pet/PETNAME pom/POMDURATION`, `pom/POMDURATION pet/PETNAME` is also acceptable."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "For example, you might like the name to be \"Momu\", the Pomodoro duration to be 30 mins and the daily challenge target to be 150 minutes. To do so, run this command:"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "eg. Command `set pet/Momu pom/30 daily/150`"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Set before"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::UG_Set_Before.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Once the set is successful, you will see this success message being displayed."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".set success message"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::UG_set_successmessage.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "artlee06"
        },
        "content": "This is the view you will be seeing after running the set command. As you can see the pet name, Pomodoro duration and daily challenge target have been changed!"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ".Set after"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::UG_Set_After.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Now that you know how to use the set commands, start customising the app to better suit your needs!"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Take note that there are restrictions on the values you can set."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Pet Name: Only alphanumerics are allowed"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Pomodoro Duration: The maximum amount is 60 minutes so as to prevent you from burning out"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "artlee06"
        },
        "content": "Daily Target: The maximum amount is 720 minutes"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//tag::storage[]"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d\u003d Storage (Permas)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "_This section describes how you can transfer saved data._"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "All your progress, user preferences and settings are stored in the “data” folder. If you plan to switch devices, you may transfer your progress to another computer by copying the contents of the original device’s “data” folder to the new device’s data folder. This can be done through a thumb drive."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Please check that the following files are in the “data” folder to ensure that you are transferring the correct files!"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Files in data folder"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "image::storage.png[width\u003d\"395\"]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "//end::storage[]"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//tag::commandtablesummary[]"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[[CommandTableSummary]]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Command Table Summary (Hardy)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "_The following table summarizes all the commands that you can use. Input contained with in [...] are optional fields._"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".Command Table"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "[cols\u003d\"1,3m,3m\", frame\u003d\"topbot\",options\u003d\"header\"]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Command |Format |Example"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Add"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|add n/NAME [des/DESCRIPTION] [p/PRIORITY] [r/REMINDER] [rec/FREQUENCY] [t/TAG...]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|add n/Finish Quiz des/Pages 3-5 p/1 r/20/03/20@19:30 rec/d t/cs2100 t/school"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Edit"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|edit INDEX [n/NAME] [des/DESCRIPTION] [p/PRIORITY] [r/REMINDER] [rec/FREQUENCY] [t/TAG...]"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|edit 2 r/10/03/21@13:00"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Done"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|done INDEX"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|done 5 6 7"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Delete"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|delete INDEX"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|delete 1 2 3 7"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Pom"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|pom INDEX [tm/TIME IN MINUTES]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|pom 4 tm/45"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|find"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|find PHRASE [t/TAG...]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|find mum tells me to t/MA1521"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Tag"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|tag"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|tag"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Sort"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|sort FIELD1 FIELD2 FIELD3 ..."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|sort done priority r-done"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Tasks"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|tasks"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|tasks"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Stats"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|stats"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|stats"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|Settings"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|settings"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|settings"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|Set"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|Set [pet/PETNAME] [pom/POMDURATION] [daily/DAILYTARGET]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|Set pet/momu pom/30 daily/150"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|Clear"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|clear"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|clear"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "//end::commandtablesummary[]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous BB Productive folder."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Add* `add n/Do math homework des/pages 1-2 r/DD/MM/YY@HH:mm t/tag1 tag2` +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "e.g. `add n/Do math homework d/pages 1-2 r/09/08/20@12:30 t/Difficult InProgress`"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [des/DESCRIPTION] [r/REMINDER]` +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "e.g. `edit 2 n/Add Buy Feature ld/2020-03-04`"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "e.g. `find Quiz Essay`"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Statistics* : `stats`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Pom* : `pom 2 tm/5`"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Hardoh": 130,
      "FyonnOh": 95,
      "artlee06": 172,
      "Permas-Teo": 93,
      "BransonNg": 190,
      "-": 90
    }
  },
  {
    "path": "docs/team/artlee06.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d Arthur Lee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "image::artlee06.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d PROJECT: BB Productive"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "My team of 5 Computer Science students, including myself, aimed to build a product centered on making students who procrastinate more productive. This manifested itself into BBProductive. It is a gamified task manager that utilizes the Pomodoro productivity technique. The gamefied aspect comes into play in the form of a pet that gets hangry(hungry and angry) when tasks are not completed. The pomodoro technique consists of 25 minutes focused work and 5 minutes rest. These 2 aspects of the application as well as the task manager come together as a comprehensive solution for procrastinators to be productive."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* *Major enhancement*: I added the ability to have reminders for the tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** What it does: The “r/” flag allows the user to set the date and time inputted to be the time they are reminded. Once the time has arrived, a pop up with the task’s name and description appears, alerting and reminding the user to do the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Justification: In the event users have a time sensitive task or wants to come back to the task at a later date, the “r/” flag can be added in the AddCommand or EditCommand to remind the user of the task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Highlights: This enhancement works with the AddCommand or EditCommand and is optional. This implementation was challenging due to the nature of when the user closes the application. The duration until the stipulated time has to be recalculated on boot and thus the decision to trigger the reminder has to be made. Also when a task is marked as done, the reminder should not be triggered."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* *Major enhancement*: I added the ability to have recurring tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** What it does: The “rec/” flag allows the user to make the task reappear on a daily or weekly basis."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Justification:  In the event users have a repeatable task that occurs on a weekly basis, he can set the task as either daily or weekly recurring to ensure the task is set as undone after the stipulated time interval. (daily or weekly)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Highlights: This enhancement works with the AddCommand or EditCommand and is optional as well. This implementation was challenging due to how it requires to be deeply intertwined in the application’s MainWindow and model manager in order to display the fact that recurring behaviour has happened on the result display. This resulted in me applying the observer design pattern to facilitate further communication between the MainWindow and model manager."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* *My code contributions on RepoSense*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dartlee06\u0026tabRepo\u003dAY1920S2-CS2103T-W16-1%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Managed milestones `v1.1` - `v1.4rc` (3 milestones) on GitHub"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Implemented the foundation of the new stylesheet used for the application"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Adjusted the JavaFX layout to fit the Adobe XD mockup"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Wrote tests for both reminders and recurring tasks"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Design:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** I was primarily responsible for the design and UI/UX of the application for BBProductive"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** This includes coming up with wireframes for BBProductive. (Link: https://xd.adobe.com/view/58d6f355-4000-4cd3-4038-b9b8366c9fcd-2ee7/[wireframe])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** As well as a proper interactive mockup the team has been using for reference when building the application itself. (Link: https://xd.adobe.com/view/80a186f2-2b5a-42c2-42c2-27f82b9667eb-f690/[mockup])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** I also was responsible for any additional design collateral for the group, this means the BBProductive logo, user guide cover page, as well as minor styling of the user guide."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../UserGuide.adoc[tag\u003dquickStart]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../UserGuide.adoc[tag\u003dreminder]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../UserGuide.adoc[tag\u003drecurring]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "I also contributed content to the Developer Guide"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003deditTaskList]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dreminder]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003drecurring]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserStories]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmanualTesting]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com/AY1920S2-CS2103T-W16-1/main/pull/300[#300], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/306[#306], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/269[#269], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/145[#145], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/299[#299]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Collaborate with teammates to tie in non-trivial features: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/272[#272]]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: [https://github.com/AY1920S2-CS2103-W15-3/main/issues/156[#156]], [https://github.com/AY1920S2-CS2103-W15-3/main/issues/157[#157]], [hhttps://github.com/AY1920S2-CS2103-W15-3/main/issues/158[#158]])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Adobe XD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": "*** Adobe Illustrator"
      }
    ],
    "authorContributionMap": {
      "artlee06": 85
    }
  },
  {
    "path": "docs/team/bransonng.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d Branson Ng - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::bransonng.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "{empty}[http://github.com/bransonng[github]] +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "{empty}[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026until\u003d2020-03-30\u0026tabAuthor\u003dBransonNg\u0026tabRepo\u003dAY1920S2-CS2103T-W16-1%2Fmain%5Bmaster%5D[CodeBase]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Role: Git expert, Integration +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Responsibilities: Task Manager, AutoComplete"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d PROJECT: BB Productive"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "BBProductive is built upon a brown field project titled AddressBook. It was done for the purpose of a software-engineering module, CS2103T with a team of 5 other students. We decided to implement a task manager and a productivity application combined in one. Apart from the standard create, read, update and destroy capabilities of a task manager, BBProductive includes a “Pomodoro” timer [25 minutes work, 5 minute rest] to help users perform manageable work cycles. BBProductive also has a virtual pet that grows and changes in appearance depending on how much work the user has done. The pet serves to complement the pomodoro features by providing an incentive for users to work."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Major Enhancement*: Auto complete feature."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** What it does: When typing, users can press tab to autocomplete command words or add prefixes specific to the command. It also removes invalid indexes for done/delete commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Justification:  As we are targeting fast typists, auto completing and allowing users to write faster would definitely be a big plus to our users."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Highlights: I’ve decided to provide some additional visual feedback to users depending on the outcome of the auto complete. Given that it’s a separate mechanism from the commands itself, I decided to add additional text coloring to the command input field and result display to differentiate auto complete success/warning/error from command error feedback."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/122[#122], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/300[#300]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Major Enhancement*: Sort by multiple fields feature"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** What it does: Sorts the tasklist by multiple fields {name, priority, done, reminder}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Justification: Most task managers have a sorting function so that users are able to see what’s more important to them at the front."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Highlights: We’ve provided multiple fields to sort by so that users can have a more specific ordering. On the same thread, we’ve decided to provide reverse sorting orders as well."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/182[#182], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/140[#140], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/125[#125]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* *Major Enhancement*: Enhanced find command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** What it does: Rather than the original exact fit matching, we’ve decided to expand it to be more flexible. Now Tasks names whose start matches the search term or that has some typos will be recognized by the find command. Also we\u0027ve added searching by tags."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Justification:Typing often leads to typos, so we’ve decided to enhance the finding command so that users will be able to find tasks they want to look for with some error boundary. We’ve also allowed the find command to show tasks that have names who\u0027s start matches the keywords."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "*** i.e. `find tuto` \u003d\u003e a task with name `tutorial 1 CS2106` will be shown"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Highlights: We used a popular Dynamic programming approach that implements the Levenshtein distance algorithm to achieve a faster run time for scalability purposes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/300[#300]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Minor Enhancement: Worked on migrating Address Book features to Task list features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Changed fields like address, phone number to description and priority"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Added Done field"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/85[#85]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Minor Enhancement: added for done and delete commands for mulitple indexes"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Allow users to mark several tasks as done or to delete several tasks in one command"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/73[#73]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Minor Enhancement: Added Json classes and baseline models for Pomodoro and Pet features for other members to expand on"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Helped other members create baseline models for their features and linked it to JsonAdapted classes for storage purposes. Also modified JsonAdaptedTask to fit the new Task model."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/85[#85]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Minor Enhancement: Worked on the css styling and java FXML for the revamped BBProductive look"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Made new grid layout of tasks displayed, added margins. Added priority display."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Code contributed for this: https://github.com/AY1920S2-CS2103T-W16-1/main/pull/145[#145]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Other Contributions:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Dev Ops"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Set up team github repo"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Set up Travis CI to perform Continuous Integration on our project"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Set up auto binding of project website"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Set up auto formatting with pre-commit git hook with googleJavaFormat"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Contributions to team:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Handled git conflicts"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** PRs reviewed (with non-trivial comments): https://github.com/AY1920S2-CS2103T-W16-1/main/pull/272[#272], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/151[#151], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/123[#123], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/91[#91], https://github.com/AY1920S2-CS2103T-W16-1/main/pull/272[#272]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Also helped to write code to refactor https://github.com/AY1920S2-CS2103T-W16-1/main/pull/272[#272]"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "* Project management:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "** Managed releases `v1.3` on GitHub"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "include::../UserGuide.adoc[tag\u003dTaskList]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "include::../UserGuide.adoc[tag\u003dAutoComplete]"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbranson]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dglossary]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BransonNg": 91
    }
  },
  {
    "path": "docs/team/fyonnoh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d Fyonn Oh - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "image::fyonnoh.png[width\u003d\"200\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "{empty}[https://github.com/FyonnOh[github]] +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "{empty}[https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dFyonnOh\u0026tabRepo\u003dAY1920S2-CS2103T-W16-1%2Fmain%5Bmaster%5D[CodeBase]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Role: Documentation, Code Quality"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "Responsibilites: Pet feature, Set Commands"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d PROJECT: BB Productive - Level 3"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "---"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "My team and I were tasked to create an enhanced application that is built upon a basic command line interface called AddressBook. And thus, We created BB Productive, a productivity application that consists of three main features: a task manager, a Pomodoro timer and a Pet. We augmented the list feature of AddressBook and transform it into a task manager with a reminder system. We also added a pomodoro timer which users can use to manage his work cycle. Furthermore, we gamified productivity by retrofitting a virtual pet that would evolve as more tasks is done by the user. It would also become angry if the user has not been productive for a period of time. BB Productive is perfect for students who are procrastinators and are lazy."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "* *Major enhancement*: The Virtual Pet"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** What it does: The Pet is part of the gamification of our application to help them be more productive. When the user completes a task, he/she gains 5 XP points. When the user completes a 25 minutes of work, tracked by the Pomodoro timer, he/she gains 25 XP points. As the user accumulates points, the pet will evolve whenever the points reach a milestone. Furthermore, if the user does not do any work (no completed task) for 24 hours, the pet will change its mood to be angry, which signals to the user that he/she has not been productive. The pet will switch back to being happy once the user finished a task."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** Justification: The purpose of this pet is to gamify productivity so as to help them overcome the inertia to doing work. The user’s sense of attachment to the virtual pet acts as a source of motivation for them to do work."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** Highlights:  In order to track the amount of time that work has not been done, I had to utilise the Timer class provided by Java. Furthermore, I have made many attempts to restructure the code for this feature so as to better adhere to the principles commonly used in coding practices. I have also provided the graphics for the Pet."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "* *Major enhancement*: Settings tab + Set Commands"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** What it does: The settings tab and the set commands allow the user to customise the app to better suit his/her needs. The user can customise the name of the pet, the duration prefered for the pomodoro cycle and also the goal for the daily challenge."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** Justification: The purpose of the set commands is so the user will be able to modify the features provided in the application to better cater to his/her needs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** Highlights: In order to create the settings tab, I had to learn JavaFx. To create the set commands, I had to define my own set of classes and also learn Regex so as to determine the validity of certain inputs. Furthermore, I had to augment it on top of the code produced by my teammates (as I was changing the attributes of their code)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "*** PRs reviewed (with non-trivial review comments)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "*** Improved quality of UG"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpet]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsetcommands]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dabout]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDGpet]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDGsetcommands]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dDGDoneAndDelete]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 66
    }
  },
  {
    "path": "docs/team/hardoh.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d Hardy Shein - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::hardoh.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d PROJECT: BBProductive"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "\u003d\u003d About this project"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "My 5-man strong team of software-engineering students were tasked to take a basic command line interface desktop application called, addressbook, and improve upon it. We came up with Task Manager which offers gamification elements. Apart from standard CRUD capabilities expected of a task manager, BBProductive includes a “Pomodoro” timer to help users do manageable work cycles. BBProductive also has a virtual pet that grows and changes depending on how much work the user has done."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* Enhancements: I implemented the Pomodoro core feature of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** What it does: The “pom” command allows the user to activate the pomodoro feature. It takes a second input from the user, the index of a chosen task  and starts a timer. This timer is set to 25 minutes by default but can be adjusted by the user via settings or for a single instance via the “tm/” prefix. Upon expiration of the timer, the app prompts users to check on their progress and updates the task manager accordingly. The app will also prompt if the user wants to begin the pomodoro-standard break time."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** Justification: The Pomodoro technique is a productivity framework we decided to adopt as it has been championed by various sites and creatives. It was also voted one of the most popular techniques on LifeHacker."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** Highlights: First, the basic command parser provided by AB3 gave me a good foundation to branch from. I had to adapt the parser to accept multiple types of input (i.e. I accept “pom 1” and “pom pause” for example). Second, building the actual pomodoro feature required me to use JavaFX’s Timeline class. The Timeline class adequately served my requirements for the Pomodoro work and rest cycles. Lastly, to handle prompts during pomodoro cycles, I decided to swap the “Command Executor” that exists in the Main Window class so I could better encapsulate Pomodoro related responses."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** Relevant PRs: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/92[#92]], [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/126[#126]], [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/146[#146], [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/147[#147]], [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/262[#262]], [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/263[#263]], [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/269[#269]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* *Minor enhancement*: I added a switch tabs command that allows the user to navigate to between the tabs."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "** Relevant PR: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/127[#127]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* *My code contributions on RepoSense*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003d\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dHardoh\u0026tabRepo\u003dAY1920S2-CS2103T-W16-1%2Fmain%5Bmaster%5D[RepoSense]]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|_Given below are sections I contributed to the User Guide._"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpomodoro]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandtablesummary]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "I also contributed content to BBProductive\u0027s Developer Guide."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide._"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dpomodoro]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dusecase]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/288[#288]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*** Collaborate with teammates to tie in non-trivial features: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/123[#123]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: [https://github.com/AY1920S2-CS2103T-F11-1/main/issues/192[#192]], [https://github.com/AY1920S2-CS2103T-F11-1/main/issues/193[#193]], [https://github.com/AY1920S2-CS2103T-F11-1/main/issues/194[#194]])"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 28,
      "BransonNg": 3,
      "-": 17
    }
  },
  {
    "path": "docs/team/permas-teo.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003d Permas Teo - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "image::permas-teo.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d PROJECT: BBProductive"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "BBProductive is a gamified productivity app cum task manager. It provides CRUD functionalities for tasks and offers a built-in Pomodoro that helps a user focus on work at regular intervals. BBProductive also offers a virtual pet that grows along with the user\u0027s productivity."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* *Code contributed*: [https://nus-cs2103-ay1920s2.github.io/tp-dashboard/#search\u003dpermas\u0026sort\u003dtotalCommits%20dsc\u0026sortWithin\u003dtitle\u0026since\u003d2020-02-14\u0026timeframe\u003dcommit\u0026mergegroup\u003dfalse\u0026groupSelect\u003dgroupByRepos\u0026breakdown\u003dfalse\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dPermas-Teo\u0026tabRepo\u003dAY1920S2-CS2103T-W16-1%2Fmain%5Bmaster%5D[View on RepoSense]]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* *Major enhancement*: Added the ability for the user to track their app usage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** What it does: Generates data for the user to view in the statistics tab. Firstly, it displays the Daily Challenge, which tracks the total time the user ran the Pomodoro on the current day in an aesthetic progress bar. Secondly, it contains 2 bar graphs that track the number of tasks done and the total duration the user runs the Pomodoro for the past 7 days."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Justification: The user can keep track of their progress for the day as well as over the past week, and make necessary adjustments to ensure that they maintain their productivity."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Highlights: This implementation was challenging as the data structure for storing this information had to be well considered. I want to keep track of data only in the past n (7) days while accounting for usage across different days. I defined the CustomQueue data structure to store the data while enforcing table constraints to minimise memory usage and provide ease of use for the data to be displayed. Non-trivial storage classes and helper methods to access and update CustomQueue had to be defined as well."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Managed release `v1.2.1` on GitHub."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Morphed the basic GUI layout from addressbook to BBProductive by implementing PetDisplay, PomodoroDisplay and StatisticsDisplay. Relevant PRs: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/84[#84]] [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/88[#88]] [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/90[#90]]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Update tests for morphing addressbook. Relevant PRs: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/77[#77]] [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/78[#78]] [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/87/files[#87]]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Add additional tests to increase test coverage. [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/321[#321]]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Updated documentation for Add Feature, Switch Tab Feature, Statistics Feature, User Stories and Non-Functional Requirements in Developer Guide."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Updated documentation for GUI, Statistics and Storage in User Guide."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Collaborate with teammates to tie in non-trivial features: [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/123[#123]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/311[#311]] [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/85[#85]] [https://github.com/AY1920S2-CS2103T-W16-1/main/pull/147[#147]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class: [https://github.com/Permas-Teo/ped/issues[link to issues]]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgui]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstatisticsug]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../UserGuide.adoc[tag\u003dstorage]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dui]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dadd]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dstatistics]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnfr]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "BransonNg": 7,
      "Permas-Teo": 60
    }
  },
  {
    "path": "docs/tutorials/AddRemark.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Adding a new Command"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/add-remark"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll walk you through the implementation of a new command -- `remark`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "This command allows users of the AddressBook application to add optional remarks to people in their task list and edit it if required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "The command should have the format of `remark INDEX r/REMARK`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "An example of the command is `remark 2 r/Likes baseball`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "We\u0027ll assume that you have already set up the development environment as outlined in the Developer\u0027s Guide."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Create a new `remark` command"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Looking in the `logic.command` package, you will notice that each existing command have their own class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "All the commands inherit from the abstract class `Command` which means that they must override `execute()`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Each `Command` returns an instance of `CommandResult` upon success and `CommandResult#feedbackToUser` is printed to the `ResultDisplay`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by creating a new `RemarkCommand` class in the `src/main/java/seedu/address/logic/command` directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "For now, let\u0027s keep `RemarkCommand` as simple as possible and print some output."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "We accomplish that by returning a `CommandResult` with an accompanying message."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Changes the remark of an existing person in the task list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(\"Hello from remark\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Hook `RemarkCommand` into the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have our `RemarkCommand` ready to be executed, we need to update `AddressBookParser#parseCommand()` to recognize the `remark` keyword."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Add the new command to the `switch` block by creating a new `case` that returns a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "You can refer to the changes in this link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/7d04e49e364dad661cd88f462f01923fba972d2c#diff-5338391f3f6fbb4022c44add6590b74f[diff]."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Run the application"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Run `Main#main` and try out your new `RemarkCommand`."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should see something like this:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ".Output displayed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkHello.png[]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Change `RemarkCommand` to throw an exception"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "While we have successfully printed a message to `ResultDisplay`, the command does not do what it is supposed to do."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change the command to throw an `CommandException` to accurately reflect that our command is still a work in progress."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between RemarkCommand and Command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "image::CommandInterface.png[]"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Following the convention in other commands, we add relevant messages as constants and use them."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the person identified \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ [REMARK]\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"r/ Likes to swim.\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_IMPLEMENTED_YET \u003d \"Remark command not implemented yet\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_NOT_IMPLEMENTED_YET);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Enhancing `RemarkCommand`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` to  parse input from the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make the command accept parameters"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "We start by modifying the constructor of `RemarkCommand` to accept an `Index` and a `String`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "While we are at it, let\u0027s change the error message to echo the values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "While this is not a replacement for tests, it is an obvious way to tell if our code is functioning as intended."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ARGUMENTS \u003d \"Index: %1$d, Remark: %2$s\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit the remark"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param remark of the person to be updated to"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public RemarkCommand(Index index, String remark) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_ARGUMENTS, index.getOneBased(), remark));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "Your code should look something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/83dd9e6b03d6b83199ceb6f3b66166483155abed#diff-34ace715a8a8d2e5a66e71289f017b47[this] after you are done."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Parse user input"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s move on to writing a parser that will extract the index and remark from the input provided by the user."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Create a `RemarkCommandParser` class in the `seedu.address.logic.parser` package."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The class must extend the `Parser` interface."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ".The relationship between Parser and RemarkCommandParser"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "image::ParserInterface.png[]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Thankfully, `ArgumentTokenizer#tokenize()` makes it trivial to parse user input."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s take a look at the JavaDoc provided for the function to understand what it does."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentTokenizer.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes an arguments string and returns an {@code ArgumentMultimap}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": " * object that maps prefixes to their respective argument values. Only the"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": " * given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * @param argsString Arguments string of the form:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " * @return           ArgumentMultimap object that maps prefixes to their"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": " * arguments"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "We can tell `ArgumentTokenizer#tokenize()` to look out for our new prefix `r/` and it will return us an instance of `ArgumentMultimap`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s find out what we need to do in order to obtain the Index and String that we need."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s look through `ArgumentMultimap` :"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".ArgumentMultimap.java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    return values.isEmpty() ? Optional.empty() :"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "This appears to be what we need to get a String of the remark."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "But what about the Index? Taking a quick peek at existing an `Command`..."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ".DeleteCommandParser.java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "return new DeleteCommand(index);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "There appears to be another utility class that obtains an `Index` from the input provided by the user."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have the know-how to extract the data that we need from the user\u0027s input, we can create a new instance of `RemarkCommand`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommandParser.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(args);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        PREFIX_REMARK);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    Index index;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "NOTE: Don\u0027t forget to update `AddressBookParser` to use our new `RemarkCommandParser`!"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "If you are stuck, check out the sample link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/efdcdf0e80cec9489f7b47e3f65824f4688ad8f7#diff-fc19ecee89c3732a62fbc8c840250508[here]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add `Remark` to the model"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have all the information that we need, let\u0027s lay the groundwork for some _persistent_ changes."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "We achieve that by working with the `Person` model."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Each field in a Person is implemented as a separate class (e.g. a `Name` object represents the person\u0027s name)."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "That means we should add a `Remark` class so that we can use a `Remark` object to represent a remark given to a person."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Add a new `Remark` class"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Create a new `Remark` in `seedu.address.model.person`. Since a `Remark` is a field that is similar to `Address`, we can reuse a significant bit of code."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "A copy-paste and search-replace later, you should have something like link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b7a47c50c8e5f0430d343a23d2863446b6ce9298#diff-af2f075d24dfcd333876f0fbce321f25[this]."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Note how `Remark` has no constrains and thus does not require input validation."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Make use of `Remark`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s change `RemarkCommand` and `RemarkCommandParser` to use the new `Remark` class instead of plain `String`."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "These should be relatively simple changes."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Add a placeholder element for remark to the UI"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "Without getting too deep into `fxml`, let\u0027s go on a 5 minute adventure to get some placeholder text to show up for each person."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Simply add"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "private Label remark;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-0c6b6abcfac8c205e075294f25e851fe[`seedu.address.ui.PersonCard`]."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "`@FXML` is an annotation that marks a private or protected field and makes it accessible to FXML."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "It might sound like Greek to you right now, don\u0027t worry -- we will get back to it later."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Then insert"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\" /\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "into link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/2758455583f0101ed918a318fc75679270843a0d#diff-12580431f55d7880578aa4c16f249e71[`main/resources/view/PersonListCard.fxml`]."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "That\u0027s it! Fire up the application again and you should see something like this:"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ".$remark shows up in each entry"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "image::$Remark.png[]"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Since `PersonCard` displays data from a `Person`, we need to update `Person` to get our `Remark` displayed!"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Modify `Person`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "We change the constructor of `Person` to take a `Remark`."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "We will also need to define new fields and accessors accordingly to store our new addition."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update other usages of `Person`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, a change to `Person` will cause other commands to break, you will have to modify these commands to use the updated `Person`!"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Use the `Find Usages` feature in IntelliJ IDEA on the `Person` class to find these commands."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b241ef8526bd4e8a6ad94b8118b7fc3441ec8fa3#diff-3462fc1118b9872387a01b41157b0402[this commit] and check that you have got everything in order!"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Updating Storage"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook stores data by serializing `JsonAdaptedPerson` into `json` with the help of an external library -- Jackson."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s update `JsonAdaptedPerson` to work with our new `Person`!"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "While the changes to code may be minimal, the test data will have to be updated as well."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "WARNING: You must delete AddressBook\u0027s storage file located at `/data/addressbook.json` before running it!"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "Not doing so will cause AddressBook to default to an empty task list!"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Check out link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/ce4f9b70f524d2395948861d80d57fda9ae6e82e#diff-07708562699e2436c717f3330bafae1e[this commit] to see what the changes entail."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Finalizing the UI"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Now that we have finalized the `Person` class and its dependencies, we can now bind the `Remark` field to the UI."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "Just add link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/56d5cb662c31dd38b02f6a5301ba6ab3c667d6a3#diff-0c6b6abcfac8c205e075294f25e851fe[this one line of code!]"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    remark.setText(person.getRemark().value);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ".The remark label is bound properly!"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkBound.png[]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Putting everything together"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "After the previous step, we notice a peculiar regression -- we went from displaying something to nothing at all."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is expected behavior as we have never changed `RemarkCommand` at all!"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Update `RemarkCommand` and `RemarkCommandParser`"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "In this last step, we modify `RemarkCommand#execute()` to change the `Remark` of a `Person`."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Since all fields in a `Person` are immutable, we create a new instance of a `Person` with the values that we want and save it with `Model#setPerson()`."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ".RemarkCommand.java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Person: %1$s\";"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Person: %1$s\";"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "//..."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Person editedPerson \u003d new Person(personToEdit.getName(), personToEdit.getPriority(), personToEdit.getEmail(),"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                personToEdit.getAddress(), remark, personToEdit.getTags());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedPerson));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code personToEdit}."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    private String generateSuccessMessage(Person personToEdit) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(message, personToEdit);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "Make one last link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-34ace715a8a8d2e5a66e71289f017b47[check] to ensure that everything is working properly..."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ".Congratulations!"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "image::RemarkComplete.png[]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Writing tests"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Tests are crucial to ensuring that bugs don\u0027t slip into the codebase unnoticed. This is especially true for large"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "code bases where a change might lead to unintended behavior."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s verify the correctness of our code by writing some tests!"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Automagically generating tests"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "The goal is to write effective and efficient tests to ensure that `RemarkCommand#execute()` behaves as expected."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "The convention for test names is _``methodName_testScenario_expectedResult``_."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "An example would be `execute_filteredList_success`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s create a test for `RemarkCommand#execute()` to test that adding a remark works."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "On `IntelliJ IDEA` you can bring up the context menu and choose to `Go To` \u003e `Test` or use the appropriate keyboard shortcut."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the context menu to jump to tests"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "image::ContextMenu.png[, 1223px, 267px]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "Then, create a test for the `execute` method."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ".Creating a test for `execute`."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "image::CreateTest.png[, 664px,751px]"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "Following convention, let\u0027s change the name of the generated method to `execute_addRemarkUnfilteredList_success`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use the utility functions provided in `CommandTestUtil`. The functions ensure that commands produce the expected `CommandResult` and output the correct message."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, `CommandTestUtil#assertCommandSuccess` is the best fit as we are testing that a `RemarkCommand` will successfully add a `Remark`."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "You should end up with a test that looks something like"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "link:https://github.com/nus-cs2103-AY1920S1/addressbook-level3/commit/b3307d7a42acb613a8f1d36979a7f547abcf6623#diff-d749de38392f7ea504da7824641ba8d9[this]."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "This concludes the tutorial for adding a new `Command` to AddressBook."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "//Link to more discussions"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 3,
      "BransonNg": 1,
      "-": 421
    }
  },
  {
    "path": "docs/tutorials/RemovingFields.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Removing a field from an entity"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/remove"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Antoine de Saint-Exupery]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When working on Address Book, you will most likely find that some features and fields that are no longer necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "In scenarios like this, you can consider refactoring the existing `Person` model to suit your use case."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we\u0027ll do exactly just that and remove the `address` field from `Person`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Safely deleting `Address`"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Fortunately, the IntelliJ IDEA provides a robust refactoring tool that can identify _most_ usages."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try to use it as much as we can."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Assisted refactoring"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "The `address` field in `Person` is actually an instance of the `seedu.address.model.person.Address` class."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "Since removing the `Address` class will break the application, we start by identifying ``Address``\u0027s usages."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This allows us to see code that depends on `Address` to function properly and edit them on a case-by-case basis."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Right-click the `Address` class and select `Refactor` \u003e `Safe Delete` through the menu."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".Usages detected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::UnsafeDelete.png[width\u003d787px. height\u003d238px]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Choose to `View Usages` and you should be presented with a list of `Safe Delete Conflicts`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "These conflicts describe locations in which the `Address` class is used."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ".List of conflicts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "image::SafeDeleteConflicts.png[width\u003d955, height\u003d640px]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Remove usages of `Address` by performing ``Safe Delete``s on each entry."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "You will need to exercise discretion when removing usages of `Address`."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Functions like `ParserUtil#parseAddress()` can be safely removed but its usages must be removed as well."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Other usages like in `EditPersonDescriptor` may require more careful inspection."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s try removing references to `Address` in `EditPersonDescriptor`."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Safe delete the field `address` in `EditPersonDescriptor`"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Yes` when prompted to remove getters and setters"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `View Usages` again image:UnsafeDeleteOnField.png[width\u003d1145px, height\u003d583px]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Remove the usages of `address` and select `Do refactor` when you are done."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "TIP: Removing usages may result in errors."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Exercise discretion and fix them."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "For example, removing the `address` field from the `Person` class will require you to modify its constructor."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Repeat the steps for the remaining usages of `Address`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "After you are done, verify that the application still works by compiling and running it again."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Manual refactoring"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Unfortunately, there are usages of `Address` that IntelliJ IDEA cannot identify."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "You can find them by searching for instances of the word `address` in your code (`Edit` \u003e `Find` \u003e `Find in path`)."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Places of interest to look out for would be resources used by the application."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`main/resources` contains images and `fxml` files used by the application and `test/resources` contains test data."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "For example, there is a `$address` in each `PersonCard` that has not been removed nor identified."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "image::$address.png[width\u003d1090px, height\u003d890px]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the `PersonCard` class and its `fxml` file quickly reveals why it slipped past the automated refactoring."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.java"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "private Label address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ".PersonCard.fxml"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[source, xml]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "After removing the `Label`, we can proceed to formally test our code."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "If everything went well, you should have most of your tests pass."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "Fix any remaining errors until the tests all pass."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tidying up"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "At this point, your application is working as intended and all your tests are passing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "What\u0027s left to do is to clean up references to `Address` in test data and documentation."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "In `src/test/data/`, data meant for testing purposes are stored."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "While keeping the `address` field in the json files does not cause the tests to fail, it is not good practice to let cruft from old features accumulate."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ".invalidPersonAddressBook.json"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[source, json]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "  \"persons\": [ {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \"name\": \"Person with invalid name field: Ha!ns Mu@ster\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    \"priority\": \"9482424\","
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \"address\": \"4th street\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "You can go through each individual `json` file and manually remove the `address` field."
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 115
    }
  },
  {
    "path": "docs/tutorials/TracingCode.adoc",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Tutorial - Tracing a Command Execution Path"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images/tracing"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "[quote, Robert C. Martin, Clean Code: A Handbook of Agile Software Craftsmanship ]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Indeed, the ratio of time spent reading versus writing is well over 10 to 1. We are constantly reading old code as"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "part of the effort to write new code.  ...[Therefore,] making it easy to read makes it easier to write."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "When trying to understand an unfamiliar code base, one common strategy used is to trace some representative execution"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "path through the code base. One easy way to trace an execution path is to use a debugger to step through the code."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you will be using the IntelliJ IDEA\u0027s debugger to trace the execution path of a specific user command."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Before we jump into the code, it is useful to get an idea of the overall structure and the high-level behavior of the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "application. This is provided in the \u0027Architecture\u0027 section of the developer guide. In particular, the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "architecture diagram (reproduced below), tells us that the App consists of several components."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureDiagram.png[]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "It also has a sequence diagram (reproduced below) that tells us how a command propagates through the App."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture sequence diagram from the developer guide"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::../ArchitectureSequenceDiagram.png[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the diagram shows only how the execution flows _between_ the main components. That is, it does not show details of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "the execution path _inside_ each component. By hiding those details, the diagram succeeds in informing the reader"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "about the overall execution path of a command without overwhelming the reader with too much details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, you aim to find those omitted details so that you get a more in-depth understanding of the code base."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Before we proceed, ensure that you have done the following:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Read the _Architecture_ section of the DG"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the project in Intellij IDEA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Learn basic debugging features of Intellij IDEA"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting a break point"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "As you know, the first step of debugging is to put in a breakpoint where you want the debugger to pause the execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "For example, if you are trying to understand how the App starts up, you would put a breakpoint in the first statement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "of the `main` method. In our case, we would want to begin the tracing at the very point where the App start processing"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "user input i.e., somewhere in the UI component, and then trace through how the execution proceeds through the UI component."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "However, the execution path through a GUI is often somewhat obscure due to various _event-driven mechanisms_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "used by GUI frameworks, which happens to be the case here too. Therefore, let us put the breakpoint where the UI transfers"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "control to the Logic component. According to the sequence diagram, the UI component yields control to the Logic component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "through a method named `execute`. Searching through the code base for `execute()` yields a promising candidate in"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "`seedu.address.ui.CommandBox.CommandExecutor`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".Using the `Search for target by name` feature. `Navigate` \u003e `Symbol`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "image::Execute.png[]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "A quick look at the class confirms that this is indeed close to what we\u0027re looking for. However, it is just an"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "`Interface`. Let\u0027s delve further and find the implementation of the interface by using the `Find Usages` feature in"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ IDEA."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ".`Find Usages` tool window. `Edit` \u003e `Find` \u003e `Find Usages`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "image::FindUsages.png[]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Bingo! `MainWindow#executeCommand()` seems to be exactly what we\u0027re looking for!"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Now let\u0027s set the breakpoint. First, double-click the item to reach the corresponding code. Once there, click on the left"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "gutter to set a breakpoint, as shown below."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "image:LeftGutter.png[]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Tracing the execution path"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "Recall from the User Guide that the `edit` command has the format: `edit INDEX [n/NAME] [p/PRIORITY] [e/EMAIL]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "[a/DESCRIPTION] [t/TAG]...` For this tutorial we will be issuing the command `edit 1 n/Alice Yeoh`."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ".Taking notes"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Over the course of the debugging session, you will encounter every major component in the application. Try to jot down"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "what happens inside the component and where the execution transfers to another component."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ". To start the debugging session, simply `Run` \u003e `Debug Main`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ". Enter `edit 1 n/Alice Yeoh` into the command box and press `Enter`."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ". The Debugger tool window should show up and look something like this:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "image:DebuggerStep1.png[]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ". Use the `Show execution point` feature to jump to the line of code that we stopped at:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "image:ShowExecutionPoint.png[]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". `CommandResult commandResult \u003d logic.execute(commandText);` is the line that you end up at."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ". We are interested in the `logic.execute(commandText)` portion of that line so let\u0027s `Step in` into that method call:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepInto.png[]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". We end up in `LogicManager#execute()`. Let\u0027s take a look at the body of the method and annotate what we can deduce."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".LogicManager#execute()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     //Logging, safe to ignore"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     CommandResult commandResult;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     //Parse user input from String to a Command"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     //Executes the Command and stores the result"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         //We can deduce that the previous line of code modifies model in some way"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         // since it\u0027s being stored here."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     return commandResult;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": " }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ". `LogicManager#execute()` appears to delegate most of the heavy lifting to other components. Let\u0027s take a closer"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "look at each one."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` the logging code since it is of no interest to us now."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image:StepOver.png[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step into` the line where user input in parsed from a String to a Command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ". `Step over` until you reach the `switch` statement. The `Variables` window now shows the value of both"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "`commandWord` and `arguments` :"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image:Variables.png[]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ". We see that the value of `commandWord` is now `edit` but `arguments` is still not processed in any meaningful way."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into the `switch`, we obviously stop at"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ".AddressBookParser#parseCommand()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "..."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s see what `EditCommandParser#parse()` does by stepping into it."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping through the method shows that it calls `ArgumentTokenizer#tokenize()` and `ParserUtil#parseIndex()` to"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "obtain the arguments and index required."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".Stepping out"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes you might end up stepping into functions that are not of interest. Simply `step out` of them!"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ". The rest of the method seems to exhaustively check for the existence of each possible parameter of the `edit`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "command and store any possible changes in an `EditPersonDescriptor`. Recall that we can verify the contents of"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "`editPersonDesciptor` through the `Variable` tool window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "image:EditCommand.png[]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ". Let\u0027s continue stepping through until we return to `LogicManager#execute()`."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The sequence diagram below shows the details of the execution path through the Logic component."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "Does the execution path you traced in the code so far matches with the diagram?"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Tracing an `edit` command through the Logic component"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicSequenceDiagram.png[]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ". Now let\u0027s see what happens when we call `command#execute()`!"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ".EditCommand#execute()"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "@Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ". As suspected, `command#execute()` does indeed make changes to `model`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ". We can a closer look at how storage works by repeatedly stepping into the code until we arrive at"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonAddressBook#saveAddressBook()`."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ". Again, it appears that the heavy lifting is delegated. Let\u0027s take a look at ``JsonSerializableAddressBook``\u0027s"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "constructor."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".JsonSerializableAddressBook#JsonSerializableAddressBook()"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": " * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    persons.addAll("
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        source.getPersonList()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "              .stream()"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "              .map(JsonAdaptedPerson::new)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "              .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ". It appears that a `JsonAdaptedPerson` is created for each `Person` and then added to the"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "`JsonSerializableAddressBook`."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ". We can continue to step through until we return to `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ". Stepping into ``resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());``, we end up in:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".ResultDisplay#setFeedbackToUser()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ". Finally, we step through until we reach the end of `MainWindow#executeCommand()`."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Conclusion"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "In this tutorial, we traced a valid edit command from raw user input to the result being displayed to the user. From"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "this tutorial, you learned more about the inner workings of AddressBook and how the various components mesh together"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "to form one cohesive product."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".What\u0027s next?"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some quick questions you can try to answer based on your execution path tracing. In some cases, you can"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "do further tracing for the given commands to find exactly what happens."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ". In this tutorial, we traced the \"happy path\" (i.e., no errors). What do you think will happen if we traced the following commands"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "instead? What exceptions do you think will be thrown(if any), where will the exceptions be thrown and where will they be"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "handled?"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".. `redit 1 n/Alice Yu`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 0 n/Alice Yu`"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/Alex Yeoh`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1`"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 n/アリス ユー`"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ".. `edit 1 t/one t/two t/three t/one`"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ". What components will you have to modify to perform the following enhancements to the application?"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ".. Make command words case-insensitive"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ".. Allow `delete` to remove more than one index at a time"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Save the task list in the CSV format instead"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new command"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ".. Add a new field to `Person`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ".. Add a new entity to the task list"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "Permas-Teo": 2,
      "-": 254
    }
  },
  {
    "path": "src/main/java/seedu/address/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the parsed command-line parameters given to the application. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Parses the application command-line parameters. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        appParameters.setConfigPath("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eThis is a workaround for the following error when MainApp is made the entry point of the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eError: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eThe reason is that MainApp extends Application. In that case, the LauncherHelper will check"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * for the javafx.graphics module to be present as a named module. We don\u0027t use JavaFX via the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * module system so it can\u0027t find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eBy having a separate main class (Main) that doesn\u0027t extend Application to be the entry point"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * of the application, we avoid this issue."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 8,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.InvalidPetException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPetStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPomodoroStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.PetStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.PomodoroStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.storage.StatisticsStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.TaskListStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Runs the application. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    protected PomodoroManager pomodoroManager;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    protected PetManager petManager;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    protected StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TaskList ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskListStorage taskListStorage \u003d new JsonTaskListStorage(userPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        PetStorage petStorage \u003d new JsonPetStorage(userPrefs.getPetFilePath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        PomodoroStorage pomodoroStorage \u003d new JsonPomodoroStorage(userPrefs.getPomodoroFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(userPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        storage \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager \u003d new PomodoroManager(model);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        PetManager petManager \u003d new PetManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StatisticsManager statisticsManager \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setDefaultStartTime("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Float.valueOf(model.getPomodoro().getDefaultTime()).floatValue());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setRestTime(Float.valueOf(model.getPomodoro().getRestTime()).floatValue());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroManager(pomodoroManager);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        model.setPetManager(petManager);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model.setStatisticsManager(statisticsManager);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ui \u003d new UiManager(logic, pomodoroManager, petManager, statisticsManager);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        model.addObserver(ui);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s task list and {@code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * The data from the sample task list will be used instead if {@code storage}\u0027s task list is not"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * found, or an empty task list will be used instead if errors occur when reading {@code"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * storage}\u0027s task list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReadOnlyTaskList\u003e taskListOptional;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReadOnlyPet\u003e petOptional;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReadOnlyPomodoro\u003e pomodoroOptional;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Optional\u003cReadOnlyStatistics\u003e statisticsOptional;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyTaskList initialData;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyPet initialPet;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyPomodoro initialPomodoro;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyStatistics statistics;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            taskListOptional \u003d storage.readTaskList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!taskListOptional.isPresent()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TaskList\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialData \u003d taskListOptional.orElseGet(SampleDataUtil::getSampleTaskList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialData \u003d new TaskList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialData \u003d new TaskList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            petOptional \u003d storage.readPet();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!petOptional.isPresent()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Pet\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPet \u003d petOptional.orElse(new Pet());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty Pet\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPet \u003d new Pet();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty Pet\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPet \u003d new Pet();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (InvalidPetException e) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            logger.warning(String.format(\"%s. Will be starting with an empty Pet\", e.toString()));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            initialPet \u003d new Pet();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            pomodoroOptional \u003d storage.readPomodoro();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!pomodoroOptional.isPresent()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Pomodoro\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPomodoro \u003d pomodoroOptional.orElse(new Pomodoro());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty Pomodoro\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPomodoro \u003d new Pomodoro();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty Pomodoro\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            initialPomodoro \u003d new Pomodoro();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statisticsOptional \u003d storage.readStatistics();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (!statisticsOptional.isPresent()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Statistics\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics \u003d statisticsOptional.orElse(new Statistics());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \"Data file not in the correct format. Will be starting with an empty Statistics\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty Statistics\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new ModelManager(initialData, initialPet, initialPomodoro, statistics, userPrefs);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead if {@code"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * configFilePath} is null."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Config file at \""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + configFilePathUsed"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default config properties\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Update config file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path, or a"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * new {@code UserPrefs} with default configuration if errors occur when reading from the file."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"UserPrefs file at \""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + prefsFilePath"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            + \" is not in the correct format. \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"Using default user prefs\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.warning("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"Problem while reading from the file. Will be starting with an empty TaskList\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // new/unused fields"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.info(\"Starting TaskList \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.info("
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            storage.savePomodoro(model.getPomodoro());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            storage.saveStatistics(model.getStatistics());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            System.exit(0);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 15,
      "Hardoh": 16,
      "artlee06": 2,
      "Permas-Teo": 34,
      "BransonNg": 88,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Config values used by the app */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { // this handles null as well."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A Serializable class that contains the GUI settings. Guarantees: immutable. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { // this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level Named {@link Logger}s"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * default, at the {@code INFO} level. A new {@code .log} file with a new numbering will be created"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * after the log file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String LOG_FILE \u003d \"BBproductive.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object) Loggers obtained"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name is"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a logger with the given name. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a Logger for the given class name. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Remove all the handlers from {@code logger}. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Arrays.stream(logger.getHandlers()).forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        FileHandler fileHandler \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 17,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Container for user visible messages. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_DISPLAYED_INDEX \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"The task index provided is invalid\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_TASKS_LISTED_OVERVIEW \u003d \"%1$d tasks listed!\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_TO_BE_DONED \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Task has already been marked as done!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_FIELD_UNKNOWN \u003d \"The fields do not exist %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // Command completor messages"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMPLETE_SUCCESS \u003d \"Message auto completed: \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMPLETE_PREFIX_SUCCESS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Message auto completed with these prefixes:\\n%1$s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMPLETE_UNFOUND_FAILURE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Auto complete not possible %1$s not found!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMPLETE_INDEX_OUT_OF_RANGE_REMOVAL \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"These indexes removed as they are out of range/invalid:\\n%1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMPLETE_UNKNOWN_SORT_FIELDS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"These fields removed as they are unknown:\\n%1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMPLETE_INDEX_OUT_OF_RANGE_FAILURE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Index %1$s is out of range/invalid\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_TASK_IN_PROGRESS \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Task is being pommed! Please use \\\"pom stop\\\" first.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 19,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a version with major, minor and patch number */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Version("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 8,
      "-": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003e{@code Index} should be used right from the start (when parsing in a new user input), so that"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * if the current component wants to communicate with another component, it can send an {@code"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Index} to avoid having to know what base the other component is using for its index. However,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * after receiving the {@code Index}, that component can convert it back to an int if the index will"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * not be passed to a different component again."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or {@link"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a new {@code Index} using a zero-based index. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a new {@code Index} using a one-based index. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 9,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents an error during conversion of data from one format to another */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Signals that some given data does not fulfill some constraints. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @param message should contain relevant information on the failed constraint(s) */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A container for App specific utility functions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Utility methods related to Collections */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Throws NullPointerException if {@code items} or any element of {@code items} is null. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if {@code items} contain any elements that are non-null. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class for accessing the Config File. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Writes and reads files */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Paths#get(String)}, otherwise returns false."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a file if it does not exist along with its missing parent directories. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates parent directories of file if it has a parent directory */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Assumes file exists */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Writes given string to a file. Will create the file if it does not exist yet. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 9,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Converts a Java object instance to JSON and vice versa */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static ObjectMapper objectMapper \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new ObjectMapper()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .findAndRegisterModules()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .registerModule("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    .addDeserializer("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                            Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * not found. If any values are missing from the file, default values will be used, as long as"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the file is a valid json file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     given here."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile(Path filePath, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the Json object to the specified file. Overwrites existing file if it exists, creates a"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * new file if it doesn\u0027t."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Contains methods that retrieve logging level from serialized string. */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * \u003cp\u003eReturns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 31,
      "-": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/LevenshteinDistance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/*"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Licensed to the Apache Software Foundation (ASF) under one or more"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * contributor license agreements.  See the NOTICE file distributed with"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * this work for additional information regarding copyright ownership."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * The ASF licenses this file to You under the Apache License, Version 2.0"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * (the \"License\"); you may not use this file except in compliance with"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * the License.  You may obtain a copy of the License at"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " *      http://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * limitations under the License."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * An algorithm for measuring the difference between two character sequences."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eThis is the number of changes needed to change one sequence into another, where each change is"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * a single character modification (deletion, insertion or substitution)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cp\u003eThis code has been adapted from Apache Commons Lang 3.3."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * @since 1.0"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "// @@author BransonNg-reused"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LevenshteinDistance {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Find the Levenshtein distance between two CharSequences if it\u0027s less than or equal to a given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * threshold."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cp\u003eThis implementation follows from Algorithms on Strings, Trees and Sequences by Dan"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gusfield and Chas Emerick\u0027s implementation of the Levenshtein distance algorithm from \u003ca"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * href\u003d\"http://www.merriampark.com/ld.htm\" \u003ehttp://www.merriampark.com/ld.htm\u003c/a\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(null, *, *)             \u003d IllegalArgumentException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(*, null, *)             \u003d IllegalArgumentException"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(*, *, -1)               \u003d IllegalArgumentException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"\",\"\", 0)               \u003d 0"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"aaapppp\", \"\", 8)       \u003d 7"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"aaapppp\", \"\", 7)       \u003d 7"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"aaapppp\", \"\", 6))      \u003d -1"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"elephant\", \"hippo\", 7) \u003d 7"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"elephant\", \"hippo\", 6) \u003d -1"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"hippo\", \"elephant\", 7) \u003d 7"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * limitedCompare(\"hippo\", \"elephant\", 6) \u003d -1"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/pre\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param left the first string, must not be null"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param right the second string, must not be null"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param threshold the target threshold, must not be negative"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return result distance, or -1"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // @@auther BransonNg-reused"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static int levenshteinDistanceCompare("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            CharSequence left, CharSequence right, final int threshold) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (left \u003d\u003d null || right \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Strings must not be null\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (threshold \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Threshold must not be negative\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        int leftLength \u003d left.length(); // length of left"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int rightLength \u003d right.length(); // length of right"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // if one string is empty, the edit distance is necessarily the length"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // of the other"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (leftLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return rightLength \u003c\u003d threshold ? rightLength : -1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (rightLength \u003d\u003d 0) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return leftLength \u003c\u003d threshold ? leftLength : -1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (leftLength \u003e rightLength) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            // swap the two strings to consume less memory"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            final CharSequence tmp \u003d left;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            left \u003d right;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            right \u003d tmp;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            leftLength \u003d rightLength;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            rightLength \u003d tmp.length();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        int[] p \u003d new int[leftLength + 1]; // \u0027previous\u0027 cost array, horizontally"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        int[] d \u003d new int[leftLength + 1]; // cost array, horizontally"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int[] tempD; // placeholder to assist in swapping p and d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // fill in starting table values"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final int boundary \u003d Math.min(leftLength, threshold) + 1;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c boundary; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            p[i] \u003d i;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // these fills ensure that the value above the rightmost entry of our"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // stripe will be ignored in following loop iterations"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.fill(p, boundary, p.length, Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.fill(d, Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // iterates through t"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int j \u003d 1; j \u003c\u003d rightLength; j++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            final char rightJ \u003d right.charAt(j - 1); // jth character of right"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            d[0] \u003d j;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            // compute stripe indices, constrain to array size"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            final int min \u003d Math.max(1, j - threshold);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            final int max \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                    j \u003e Integer.MAX_VALUE - threshold"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                            ? leftLength"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                            : Math.min(leftLength, j + threshold);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            // the stripe may lead off of the table if s and t are of different"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            // sizes"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (min \u003e max) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            // ignore entry left of leftmost"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            if (min \u003e 1) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                d[min - 1] \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            // iterates through [min, max] in s"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d min; i \u003c\u003d max; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                if (left.charAt(i - 1) \u003d\u003d rightJ) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                    // diagonally left and up"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    d[i] \u003d p[i - 1];"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    // 1 + minimum of cell to the left, to the top, diagonally"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                    // left and up"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    d[i] \u003d 1 + Math.min(Math.min(d[i - 1], p[i]), p[i - 1]);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy current distance counts to \u0027previous row\u0027 distance counts"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            tempD \u003d p;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            p \u003d d;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            d \u003d tempD;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // if p[n] is greater than the threshold, there\u0027s no guarantee on it"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // being the correct"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // distance"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        if (p[leftLength] \u003c\u003d threshold) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            return p[leftLength];"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 31,
      "-": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Helper functions for handling strings. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}. Ignores case, but a full word"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * match is required. \u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * examples:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \u003cpre\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        checkArgument("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence).anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static String capitalizeWord(String word) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (word.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return word;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder toCapitalize \u003d new StringBuilder(word);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        toCapitalize.setCharAt(0, Character.toUpperCase(toCapitalize.charAt(0)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return toCapitalize.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns a detailed message of the t, including the stack trace. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static String getTitleCase(String s) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String result \u003d s.substring(0, 1) + s.substring(1).toLowerCase();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer e.g. 1, 2, 3, ..., {@code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Will return false for any other non-null string input e.g. empty string, \"-1\", \"0\", \"+1\", and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return value \u003e 0"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u0026\u0026 !s.startsWith("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * keyword \u003d dist, phrase \u003d distance here is long \u003d\u003e true keyword \u003d distance, phrase \u003d distance"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * here is long \u003d\u003e true keyword \u003d did, phrase \u003d distance here is long \u003d\u003e false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param keyword used in checking"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param phrase checks if part/entire keyword is in start of phrase"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return true if part of or all of keyword is at the start of phrase"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static boolean keywordMatchStartOfPhrase(String keyword, String phrase) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Pattern pattern \u003d Pattern.compile(String.format(\"^%s\", phrase.toLowerCase()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Matcher matcher \u003d pattern.matcher(keyword.toLowerCase());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return matcher.matches() || matcher.hitEnd();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns complete command if given partial command */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Optional\u003cString\u003e getCompletedWord(String word, String[] possibilities) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (String matcher : possibilities) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (StringUtil.keywordMatchStartOfPhrase(word, matcher)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return Optional.of(matcher);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (StringUtil.levenshteinDistanceCompare(word, matcher, 1) !\u003d -1) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return Optional.of(matcher);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static int levenshteinDistanceCompare("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CharSequence left, CharSequence right, final int threshold) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return LevenshteinDistance.levenshteinDistanceCompare(left, right, threshold);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 5,
      "BransonNg": 63,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** API of the Logic component */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Attempts to complete user\u0027s input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param userInput Input from user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return the result of completion"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws CompletorException If no command is detected or command is in the wrong format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    CompletorResult suggestCommand(String userInput) throws CompletorException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the TaskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @see seedu.address.model.Model#getTaskList()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of tasks */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns the user prefs\u0027 task list file path. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Set the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    ReadOnlyPomodoro getPomodoro();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 3,
      "Hardoh": 2,
      "BransonNg": 17,
      "Permas-Teo": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CommandCompletor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.TaskListParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The main LogicManager of the app. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskListParser taskListParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final CommandCompletor commandCompletor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.model.setTaskSaver(this::taskSaver);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListParser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        commandCompletor \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void taskSaver(TaskList tasklist) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Command command \u003d taskListParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.savePet(model.getPet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            storage.savePomodoro(model.getPomodoro());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            storage.saveStatistics(model.getStatistics());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult suggestCommand(String userInput) throws CompletorException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return commandCompletor.getSuggestedCommand(userInput, this.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return model.getTaskList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        ObservableList\u003cTask\u003e tasklist \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return tasklist;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return model.getTaskListFilePath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return model.getPomodoro();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // public void update() throws CommandException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         storage.saveTaskList(model.getTaskList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     } catch (IOException ioe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 5,
      "Hardoh": 2,
      "artlee06": 11,
      "BransonNg": 36,
      "Permas-Teo": 4,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Observer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public interface Observer {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    void update(String input);"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PetManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class PetManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HANGRY_MOOD_STRING \u003d \"HANGRY\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HAPPY_MOOD_STRING \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Pet pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private String petImage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private String expBarImage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String expBarText;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String levelText;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private LocalDateTime lastDoneTaskTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private LocalDateTime timeForHangry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PetManager() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPet(Pet pet) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pet \u003d pet;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d LocalDateTime.parse(pet.getLastDoneTaskTime());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // use this for ACTUAL"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // this.timeForHangry \u003d lastDoneTaskTime.plusHours(24);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // use this for TESTING"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timeForHangry \u003d lastDoneTaskTime.plusMinutes(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementPomExp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pet.incrementPomExp();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementExp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pet.incrementExp();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateLastDoneTaskWhenDone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        lastDoneTaskTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pet.setLastDoneTaskTime(lastDoneTaskTime.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // For ACTUAL"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // timeForHangry \u003d lastDoneTaskTime.plusHours(24);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // For TESTING"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timeForHangry \u003d lastDoneTaskTime.plusMinutes(1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeToHangry() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pet.changeHangry();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeToHappy() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pet.changeHappy();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateDisplayElements() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int exp \u003d Integer.parseInt(pet.getExp());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expBarInt \u003d exp % 100;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarText \u003d String.format(\"%d XP / 100 XP\", expBarInt);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        levelText \u003d this.pet.getLevel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String mood \u003d pet.getMood();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (levelText.equals(\"1\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            String str \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (mood.equals(HAPPY_MOOD_STRING)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            ? \"/images/pet/level1.png\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            : \"/images/pet/level1hangry.png\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            petImage \u003d str;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else if (levelText.equals(\"2\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            String str \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (mood.equals(HAPPY_MOOD_STRING)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            ? \"/images/pet/level2.png\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            : \"/images/pet/level2hangry.png\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            petImage \u003d str;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            String str \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (mood.equals(HAPPY_MOOD_STRING)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            ? \"/images/pet/level3.png\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            : \"/images/pet/level3hangry.png\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petImage \u003d str;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expBarPerc \u003d expBarInt / 10;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        switch (expBarPerc) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 0:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar0%.png\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar10%.png\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar20%.png\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar30%.png\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar40%.png\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar50%.png\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar60%.png\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 7:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar70%.png\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 8:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar80%.png\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 9:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar90%.png\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        case 10:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar100%.png\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarImage \u003d \"/images/progress/ProgressBar0%.png\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getPetName() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return pet.getName();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getLevelText() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return levelText;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getExpBarInt() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return expBarText;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getExpBarImage() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return expBarImage;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getPetImage() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return petImage;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getMood() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return pet.getMood();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public LocalDateTime getTimeForHangry() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return timeForHangry;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 144,
      "Hardoh": 11,
      "BransonNg": 2,
      "Permas-Teo": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/PomodoroManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.beans.property.IntegerProperty;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.beans.property.SimpleIntegerProperty;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.parser.TaskListParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.ui.PomodoroDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * The manager app for the pomodoro feature."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @author Hardy Shein"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomodoroManager {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Integer defaultStartTime;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Integer startTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Integer restTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Label timerLabel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroDisplay pomodoroDisplay;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private IntegerProperty timeSeconds;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private List\u003cTask\u003e originList;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private int taskIndex;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private LocalDateTime startDateTime, endDateTime;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int SECONDS_IN_A_DAY \u003d 24 * 60 * 60;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public enum PROMPT_STATE {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        NONE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_DONE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_TAKE_BREAK,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_DONE_MIDPOM,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CHECK_RESUME_LAST;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_DONE_MESSAGE \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Did you manage to finish the last task?\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"(Y) - Task will be set to done. (N) - No changes.\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_TAKE_BREAK_MESSAGE \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Shall we take a 5-min break?\\n\" + \"(Y) - 5-min timer begins. (N) - App goes neutral.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_DONE_MIDPOM_MESSAGE \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Great! Would you like to continue with another task\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"(pom \u003cindex\u003e) - next task pommed with remaining time. (N) - App goes neutral.\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final String CHECK_RESUME_LAST_MESSAGE \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Welcome back! You had a task mid-pom when you left. Carry on?\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"(Y) - pomodoro will resume on that task. (N) - Pomodoro cancels. App neutral.\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PROMPT_STATE promptState;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * PomodoroManager constructor."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param model of the app\u0027s current state."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomodoroManager(Model model) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        promptState \u003d PROMPT_STATE.NONE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter to the pomodoro\u0027s UI element."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param pomodoroDisplay representing the UI element."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroDisplay(PomodoroDisplay pomodoroDisplay) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoroDisplay \u003d pomodoroDisplay;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Getter for the pomodoro\u0027s UI element. */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomodoroDisplay getPomodoroDisplay() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomodoroDisplay;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Setter for the pomodoro\u0027s UI element. */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setResultDisplay(ResultDisplay resultDisplay) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.resultDisplay \u003d resultDisplay;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Setter for the app\u0027s MainWindow instance. */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setMainWindow(MainWindow mainWindow) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.mainWindow \u003d mainWindow;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns the currently set default pomodoro time as string in the mm:ss format. */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getDefaultStartTimeAsString() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int secondsRemaining \u003d defaultStartTime;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int minutePortion \u003d secondsRemaining / 60;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int secondPortion \u003d secondsRemaining % 60;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return String.format(\"%02d:%02d\", minutePortion, secondPortion);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Getter for the currently set default pomodoro time in seconds. */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Integer getDefaultStartTime() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return defaultStartTime;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Getter for the currently set rest time in seconds. */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Integer getRestTime() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return restTime;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter for the default pomodoro time amount."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param defaultStartTimeInMin new value to be updated."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setDefaultStartTime(float defaultStartTimeInMin) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.defaultStartTime \u003d (int) (defaultStartTimeInMin * 60);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroDefaultTime(defaultStartTimeInMin);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter for the pomodoro rest time amount."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param restTimeInMin new value to be updated."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setRestTime(float restTimeInMin) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.restTime \u003d (int) (restTimeInMin * 60);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroRestTime(restTimeInMin);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter for the timer label UI element."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param timerLabel representing the UI element."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTimerLabel(Label timerLabel) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerLabel \u003d timerLabel;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Start a pomodoro cycle."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param timeInSec the pomodoro time amount for particular instance of the cycle."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void start(float timeInSec) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        startTime \u003d (int) (timeInSec);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        startTime \u003d startTime \u003e SECONDS_IN_A_DAY ? SECONDS_IN_A_DAY : startTime;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeSeconds \u003d new SimpleIntegerProperty(startTime);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        configureUi();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        configureTimer();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        promptState \u003d PROMPT_STATE.NONE;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Pauses a running pomodoro cycle. Timer is halted, not deleted. Task in progress is retained."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @throws NullPointerException when no pomodoro cycle is running."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void pause() throws NullPointerException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.pause();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw ne;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Resumes a paused pomodoro cycle. Timer carries on with remaining time."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @throws NullPointerException when no pomodoro cycle is running."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void unpause() throws NullPointerException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.play();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw ne;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Ceases the running pomodoro cycle. Timer is reset. App is set back to neutral."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @throws NullPointerException when no pomodoro cycle is running."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void stop() throws NullPointerException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            reset();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline \u003d null;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw ne;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Sets the pomodoro to its neutral state. */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timerLabel.textProperty().unbind();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroDisplay.reset();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Prepares the necessary UI elements for the a pomodoro cycle. */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private void configureUi() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timerLabel"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .textProperty()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .bind("
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        Bindings.createStringBinding("
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                () -\u003e {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    if (timeSeconds.getValue() \u003d\u003d null) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        return \"\";"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        int secondsRemaining \u003d timeSeconds.get();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        int minutePortion \u003d secondsRemaining / 60;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        int secondPortion \u003d secondsRemaining % 60;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        return String.format("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                                \"%02d:%02d\", minutePortion, secondPortion);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                },"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                timeSeconds));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Prepares the timer system for a pomodoro cycle to happen. */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private void configureTimer() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (timeline !\u003d null) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeSeconds.set(startTime);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.getKeyFrames()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .add(new KeyFrame(Duration.seconds(startTime + 1), new KeyValue(timeSeconds, 0)));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.setOnFinished("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                event -\u003e {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    // Update the Pet at timer expiry."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    PetManager petManager \u003d model.getPetManager();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    petManager.incrementPomExp();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    mainWindow.updatePetDisplay();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    this.setPromptState(PROMPT_STATE.CHECK_DONE);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(CHECK_DONE_MESSAGE);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    mainWindow.setPomCommandExecutor();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    mainWindow.setTabFocusTasks();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    endDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    // Update the Statistics at timer expiry."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    updateStatistics(model);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoroDisplay.playDone();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                });"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Updates the app\u0027s Statistics system."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param model of the app\u0027s current state."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateStatistics(Model model) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(startDateTime);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        endDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model.updateDataDatesStatistics();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cDayData\u003e newDayDatas \u003d generateUpdatedDayData(startDateTime, endDateTime);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        newDayDatas.forEach(dayData -\u003e model.updatesDayDataStatistics(dayData));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter for the date-time at the Start of a pomodoro cycle."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param startDateTime represented as a LocalDateTime object."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setStartDateTime(LocalDateTime startDateTime) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter for the date-time at the End of a pomodoro cycle."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param endDateTime represented as a LocalDateTime object."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setEndDateTime(LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Generates a list of DayData objects based on specified Start and End date-times."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param startDateTime represented as a LocalDateTime object."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param endDateTime represented as a LocalDateTime object."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return the collection of DayDatas that represent the entire period between startDateTime and"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *     endDateTime."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public List\u003cDayData\u003e generateUpdatedDayData("
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            LocalDateTime startDateTime, LocalDateTime endDateTime) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cDayData\u003e out \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime tempDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        while (!tempDateTime.toLocalDate().equals(endDateTime.toLocalDate())) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // get minutes from this temp date to its end of day"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            int minutes \u003d"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (int)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            tempDateTime.until("
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                    tempDateTime.toLocalDate().atTime(LocalTime.MAX),"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                    ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Date date \u003d new Date(tempDateTime.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            System.out.println(date.toString());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData currDayData \u003d model.getDayDataFromDateStatistics(date);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomDurationData updatedPomDuration \u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    new PomDurationData(\"\" + (currDayData.getPomDurationData().value + minutes));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    new DayData(date, updatedPomDuration, currDayData.getTasksDoneData());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            out.add(updatedDayData);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tempDateTime \u003d tempDateTime.plusDays(1);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tempDateTime \u003d tempDateTime.toLocalDate().atStartOfDay();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Handle last day"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int minutes \u003d (int) tempDateTime.until(endDateTime, ChronoUnit.MINUTES);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date date \u003d new Date(tempDateTime.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData currDayData \u003d model.getDayDataFromDateStatistics(date);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomDurationData updatedPomDuration \u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new PomDurationData(\"\" + (currDayData.getPomDurationData().value + minutes));"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new DayData(date, updatedPomDuration, currDayData.getTasksDoneData());"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        out.add(updatedDayData);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Sets the necessary parameters when tracking a pommed task. */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void startTrackTask() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        startDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        endDateTime \u003d null;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Getter for the current prompt state of the manager."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return the enum representing the prompt state."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PROMPT_STATE getPromptState() {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return this.promptState;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Setter for the prompt state of the manager."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param promptState"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPromptState(PROMPT_STATE promptState) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.promptState \u003d promptState;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Actions to take when pomodoro is checking if user wants a break. */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void checkBreakActions() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.setPromptState(PROMPT_STATE.CHECK_TAKE_BREAK);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Actions to take when user \"done\" a task in the middle of a cycle. */"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void checkMidPomDoneActions() {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.setPromptState(PROMPT_STATE.CHECK_DONE_MIDPOM);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        mainWindow.setPomCommandExecutor();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Actions to take when user requests to take a break. */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void takeABreak() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (timeline !\u003d null) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            timeline.stop();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeSeconds.set(restTime);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline \u003d new Timeline();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.getKeyFrames()"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .add(new KeyFrame(Duration.seconds(restTime + 1), new KeyValue(timeSeconds, 0)));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timeline.setOnFinished("
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                event -\u003e {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    resultDisplay.setFeedbackToUser(\"Breaks over! What shall we do next?\");"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    this.setPromptState(PROMPT_STATE.NONE); // App back to neutral"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoroDisplay.playDone();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                });"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Updates the parameters needed to \"done\" a task."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param model of the app\u0027s current state."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param originList the list from which the task is referenced (list order is maintained)."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param taskIndex indicating the task\u0027s position in the originList."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setDoneParams(Model model, List\u003cTask\u003e originList, int taskIndex) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.originList \u003d originList;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Resets the parameters after a task is \"done\". */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private void clearDoneParams() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.originList \u003d null;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskIndex \u003d -1;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Actions taken to \"done\" a task that was being pommed. */"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void doneTask() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToEdit \u003d originList.get(taskIndex);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Name updatedName \u003d taskToEdit.getName();"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Priority updatedPriority \u003d taskToEdit.getPriority();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Description updatedDescription \u003d taskToEdit.getDescription();"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new Task("
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedName,"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedPriority,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedDescription,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new Done(\"Y\"),"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        updatedTags);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Update stats"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateDataDatesStatistics();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // timeline \u003d null;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date dateOnDone \u003d new Date(now.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData dayData \u003d model.getDayDataFromDateStatistics(dateOnDone);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new DayData("
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dateOnDone,"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dayData.getPomDurationData(),"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new TasksDoneData(\"\" + (dayData.getTasksDoneData().value + 1)));"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model.updatesDayDataStatistics(updatedDayData);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        clearDoneParams();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Handles the prompting behaviour at the end of a pomodoro cycle or the \"done\" event of a"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * pommed task."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param commandText representing the user\u0027s response."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param logic a reference to the app\u0027s logic manager."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param logger a reference to the app\u0027s logging system."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param petManager a reference to app\u0027s pet manager system."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return the result of executing a special pomodoro command that handles prompts."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public CommandResult promptBehaviour("
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            String commandText, Logic logic, Logger logger, PetManager petManager)"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String commandTextLower \u003d commandText.toLowerCase();"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        switch (this.getPromptState()) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        case CHECK_DONE:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (commandTextLower.equals(\"y\")) {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.updateMoodWhenDoneTask();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.updatePetDisplay();"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult("
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                \"Good job! \" + CHECK_TAKE_BREAK_MESSAGE, false, false);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                doneTask();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                timeline \u003d null;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                checkBreakActions();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else if (commandTextLower.equals(\"n\")) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult("
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                \"ALright, let\u0027s try again the next round! \""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        + CHECK_TAKE_BREAK_MESSAGE,"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                false,"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                false);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                checkBreakActions();"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \"(Please confirm) Did you manage to finish the last task?\\n\""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                + \"(Y) - Task will be set to done. (N) - no changes\");"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        case CHECK_TAKE_BREAK:"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (commandTextLower.equals(\"y\")) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult(\"Okie doke! Rest easy now...\", false, false);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                takeABreak();"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else if (commandTextLower.equals(\"n\")) {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult(\"Alright, back to neutral!\", false, false);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                reset();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \"(Please confirm) Shall we take a 5-min break?\\n\""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                + \"(Y) - 5-min timer begins. (N) - App goes neutral.\");"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        case CHECK_DONE_MIDPOM:"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (commandTextLower.equals(\"n\")) {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult(\"Alright, back to neutral!\", false, false);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                reset();"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                timeline \u003d null;"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                PomCommand pc \u003d (PomCommand) (new TaskListParser().parseCommand(commandText));"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                PomCommandResult pomCommandResult \u003d"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        (PomCommandResult) logic.execute(commandText);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                logger.info(\"Result: \" + pomCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(pomCommandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (pomCommandResult.getIsPause()) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pause();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else if (pomCommandResult.getIsContinue()) {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    unpause();"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoroDisplay.setTaskInProgressText(pomCommandResult.getPommedTask());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    unpause();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    setDoneParams("
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getModel(),"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getOriginList(),"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getTaskIndex());"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return pomCommandResult;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (ParseException | CommandException | ClassCastException e) {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String message \u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \"(Please confirm) Would you like to continue with another task (not done yet)\\n\""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                + \"(pom \u003cindex\u003e) - next task pommed with remaining time. (N) - App goes neutral.\";"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(message);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                throw new ParseException(message);"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        case CHECK_RESUME_LAST:"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (commandTextLower.equals(\"y\")) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult(\"Okie doke! Pom resuming...\", false, false);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                startFromLast();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else if (commandTextLower.equals(\"n\")) {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new CommandResult(\"Alright, back to neutral!\", false, false);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setPromptState(PROMPT_STATE.NONE);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                reset();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                mainWindow.setDefaultCommandExecutor();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return commandResult;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                throw new ParseException(\"(Please confirm)\" + CHECK_RESUME_LAST_MESSAGE);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        case NONE:"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Actions taken when user wants to resume pomodoro cycle that was paused during a mid-pom exit."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void handleResumeLastSession() {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task prevPomTask \u003d model.getPomodoroTask();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (prevPomTask \u003d\u003d null) {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        resultDisplay.setFeedbackToUser(CHECK_RESUME_LAST_MESSAGE);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.setPromptState(PROMPT_STATE.CHECK_RESUME_LAST); // App back to neutral"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        mainWindow.setPomCommandExecutor();"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Actions to take start timer from previous session before mid-pom exit. */"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void startFromLast() {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        startDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String timeLeft \u003d model.getPomodoro().getTimeLeft();"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToResume \u003d model.getPomodoroTask();"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroDisplay.setTaskInProgressText(taskToResume.getName().fullName);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        start(Float.parseFloat(timeLeft) * 60);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e originList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index resumeIndex \u003d Index.fromZeroBased(originList.indexOf(taskToResume));"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        setDoneParams(model, originList, resumeIndex.getZeroBased());"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Actions taken by pomodoro manager upon exit of the app. */"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void handleExit() {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (timeSeconds \u003d\u003d null) {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        float timeInMinutes \u003d timeSeconds.floatValue() / 60;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroTimeLeft(timeInMinutes);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (model.getPomodoroTask() !\u003d null) {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Update statistics so far"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            updateStatistics(model);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 613,
      "FyonnOh": 21,
      "BransonNg": 7,
      "Permas-Teo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/StatisticsManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.model.dayData.CustomQueue.CONSTANT_SIZE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Manages logic of StatisticsDisplay */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class StatisticsManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Statistics statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private String progressDailyText;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private String progressBarDailyFilepathString;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public StatisticsManager() {}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setStatistics(Statistics statistics) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(statistics);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Update StatisticsDisplay fields for user output. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateStatisticsDisplayValues() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ObservableList\u003cDayData\u003e dayDatas \u003d statistics.getCustomQueue();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(statistics);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(dayDatas);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assert (dayDatas.size() \u003e 0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // get daily challenge target"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DailyTarget dailyTarget \u003d statistics.getDailyTarget();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String dailyTargetString \u003d dailyTarget.value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int currTarget \u003d Integer.valueOf(dailyTargetString);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // get current progress"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData latestDayData \u003d dayDatas.get(CONSTANT_SIZE - 1);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int currProgress \u003d latestDayData.getPomDurationData().value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (currProgress \u003e\u003d currTarget) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            currProgress \u003d currTarget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressDailyText \u003d String.valueOf(currProgress);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // calculate percentage bar"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int expBarPerc \u003d (currProgress * 10) / currTarget;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expBarPerc *\u003d 10; // 0, 10, 20, 30..."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (expBarPerc \u003e\u003d 100) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            expBarPerc \u003d 100;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        progressBarDailyFilepathString \u003d \"/images/progress/ProgressBar\" + expBarPerc + \"%.png\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDailyTargetText(String dailyTargetText) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(dailyTargetText);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.setDailyTarget(dailyTargetText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String getDailyTargetText() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statistics.getDailyTarget().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public ObservableList\u003cDayData\u003e getCustomQueue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statistics.getCustomQueue();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String getProgressDailyText() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return progressDailyText;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String getProgressBarDailyFilepathString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return progressBarDailyFilepathString;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "artlee06": 2,
      "Permas-Teo": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Adds a task to the task list. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \": Adds a task to the task list. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"PRIORITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"DESCRIPTION \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Math Homework \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"1 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Chapter 5, Pages 1 - 3 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"forSchool \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    + PREFIX_REMINDER"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    + \"15/04/21@10:30\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added: \\n%1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"This task already exists in the task list\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Task toAdd;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Creates an AddCommand to add the specified {@code Task} */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public AddCommand(Task task) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // not sure if Model is needed, why not just use ModelManager class rather than interface"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (model.hasTask(toAdd)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.addTask(toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // ^ Sample use of model to adjust objects"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // model.setPetName(\"Jeff\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // model.setPomodoroTask(toAdd);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // DONE Setting values on model in recorded in storage and reflected in json"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 18,
      "artlee06": 4,
      "BransonNg": 23,
      "Permas-Teo": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Clears the task list. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Task list has been cleared!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.setTaskList(new TaskList());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "Permas-Teo": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a command with hidden internal logic and the ability to be executed. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandCompletor.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.AddCommandParser;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.DeleteCommandParser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.DoneCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.EditCommandParser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.PomCommandParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.SortCommandParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Contains a command completor that calls upon other command parsers to complete input provided by"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * users."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CommandCompletor {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private List\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Add all available commands */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandCompletor() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(DoneCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(PomCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SortCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(TagCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SetCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SwitchTabCommand.STATS_COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SwitchTabCommand.TASKS_COMMAND_WORD);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commands.add(SwitchTabCommand.SETTINGS_COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Provides auto complete for all partial command words: Auto completion happens when: 1. Edit"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * distance between target and input \u003c 2 2. input matches the head of the target"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \u003cp\u003eFor done, delete commands: remove indices that are out of range For add and edit commands:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Adds prefixes for priority and reminder For pom command: adds timer prefix For sort command:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * auto completes recognized sort fields else removes other fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param input raw user input"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return CompletorResult which contains both the completed message and feedback to display"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws CompletorException throws an exception when a command is invalid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult getSuggestedCommand(String input, int listSize)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws CompletorException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitInput \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d Messages.COMPLETE_SUCCESS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (splitInput.length \u003c\u003d 0 || splitInput[0].length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CompletorException(String.format(Messages.COMPLETE_UNFOUND_FAILURE, \"\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Gets auto completed command based on the two criteria above"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cString\u003e suggestedCommandWord \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.getCompletedWord(splitInput[0], this.commands.toArray(new String[0]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (suggestedCommandWord.isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            splitInput[0] \u003d suggestedCommandWord.get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CompletorException("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(Messages.COMPLETE_UNFOUND_FAILURE, splitInput[0]));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String newCommand \u003d String.join(\" \", splitInput);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        switch (splitInput[0]) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new AddCommandParser().completeCommand(newCommand);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new EditCommandParser().completeCommand(newCommand, listSize);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case PomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new PomCommandParser().completeCommand(newCommand);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new SortCommandParser().completeCommand(newCommand);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new DoneCommandParser().completeCommand(newCommand, listSize);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new DeleteCommandParser().completeCommand(newCommand, listSize);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CompletorResult(newCommand, feedbackToUser);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof CommandCompletor)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CommandCompletor otherCommandCompletor \u003d (CommandCompletor) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return otherCommandCompletor.commands.equals(this.commands);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the result of a command execution. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code CommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser}, and other"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * fields set to their default value."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompletorDeletionResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the result of a command execution. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CompletorDeletionResult extends CompletorResult {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code CompletorResult} with the specified fields. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorDeletionResult(String suggestedCommand, String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        super(suggestedCommand, feedbackToUser);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(obj instanceof CompletorDeletionResult)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return super.equals(obj);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CompletorResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents the result of a command execution. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CompletorResult {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String suggestedCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code CompletorResult} with the specified fields. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult(String suggestedCommand, String feedbackToUser) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.suggestedCommand \u003d requireNonNull(suggestedCommand);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Appends space to all suggeseted commands */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getSuggestion() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return suggestedCommand + \" \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof CompletorResult)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult result \u003d (CompletorResult) other;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return feedbackToUser.equals(result.feedbackToUser)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 suggestedCommand \u003d\u003d result.suggestedCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Objects.hash(feedbackToUser, suggestedCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Deletes a task identified using it\u0027s displayed index from the task list. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Deletes one or multiple tasks identified by the index number(s) used in the displayed tasks list.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Parameters: INDEX1 INDEX2 (must be positive integers separated by a SPACE)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" 1 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DELETE_TASK_SUCCESS \u003d \"Deleted Task(s): \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Index[] targetIndices;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public DeleteCommand(Index[] targetIndices) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder tasksDeleted \u003d new StringBuilder(MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        HashSet\u003cTask\u003e toDeleteTasks \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Index targetIndex : targetIndices) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Task taskToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (taskToDelete.equals(model.getPomodoroTask())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_TASK_IN_PROGRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            toDeleteTasks.add(taskToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (Task t : toDeleteTasks) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            model.deleteTask(t);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDeleted.append(String.format(\"%n%s\", t));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new CommandResult(tasksDeleted.toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else if (other instanceof DeleteCommand) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] myTargetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] otherTargetIndices \u003d ((DeleteCommand) other).targetIndices;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            for (int i \u003d 0; i \u003c myTargetIndices.length; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                if (!myTargetIndices[i].equals(otherTargetIndices[i])) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 11,
      "BransonNg": 18,
      "Permas-Teo": 15,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Deletes a task identified using it\u0027s displayed index from the task list. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Marks one or multiple tasks identified by the index number(s) used in the displayed task list as done.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Parameters: INDEX1 INDEX2 (must be positive integers separated by a SPACE)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" 1 2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DONE_TASK_SUCCESS \u003d \"Done Task(s): \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Index[] targetIndices;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public DoneCommand(Index[] targetIndices) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.targetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder tasksDone \u003d new StringBuilder(MESSAGE_DONE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        HashSet\u003cTask\u003e toDoneTaskList \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task pommedTask \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Index targetIndex : targetIndices) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            // Task task \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Task taskToEdit \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (taskToEdit.getDone().getIsDone()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TASK_TO_BE_DONED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            toDoneTaskList.add(taskToEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Task taskToEdit : toDoneTaskList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Task editedTask \u003d createDoneTask(taskToEdit);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Normal statistics update"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // If task to be done is being pommed..."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (taskToEdit.equals(model.getPomodoro().getRunningTask())) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pommedTask \u003d taskToEdit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model.setPomodoroTask(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                updateStatisticsPomDone(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                tasksDone.append(String.format(\"%n%s\", editedTask));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                updateStatisticsRegularDone(model);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // The last task to show is the pommed task"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (pommedTask !\u003d null) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDone.append(String.format(\"\\n----Pom Task Done----\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDone.append(String.format(\"%n%s\", pommedTask));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomodoroManager pm \u003d model.getPomodoroManager();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.pause();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.doneTask();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Pause pom timer and check if wanna continue"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksDone.append(\"\\n\" + pm.CHECK_DONE_MIDPOM_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            pm.checkMidPomDoneActions();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new DoneCommandResult(tasksDone.toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static Date getCurrentDate() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date date \u003d new Date(now.format(Date.dateFormatter));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static Task createDoneTask(Task taskToEdit) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Name updatedName \u003d taskToEdit.getName();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Priority updatedPriority \u003d taskToEdit.getPriority();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Description updatedDescription \u003d taskToEdit.getDescription();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d taskToEdit.getTags();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cReminder\u003e optionalReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cRecurring\u003e optionalRecurring \u003d taskToEdit.getOptionalRecurring();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optionalRecurring.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optionalReminder \u003d taskToEdit.getOptionalReminder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                updatedPriority,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                updatedDescription,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new Done(\"Y\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                updatedTags,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                optionalReminder,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                optionalRecurring);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static void updateStatisticsRegularDone(Model model) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateDataDatesStatistics();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Date dateOnDone \u003d getCurrentDate();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData dayData \u003d model.getDayDataFromDateStatistics(dateOnDone);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData updatedDayData \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new DayData("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dateOnDone,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        dayData.getPomDurationData(),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        new TasksDoneData(\"\" + (dayData.getTasksDoneData().value + 1)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model.updatesDayDataStatistics(updatedDayData);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static void updateStatisticsPomDone(Model model) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Get the data from pomodoro manager"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.getPomodoroManager().updateStatistics(model);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else if (other instanceof DoneCommand) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] myTargetIndices \u003d targetIndices;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Index[] otherTargetIndices \u003d ((DoneCommand) other).targetIndices;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            for (int i \u003d 0; i \u003c myTargetIndices.length; i++) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                if (!myTargetIndices[i].equals(otherTargetIndices[i])) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 53,
      "FyonnOh": 9,
      "artlee06": 9,
      "BransonNg": 76,
      "Permas-Teo": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DoneCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class DoneCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public DoneCommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        super(requireNonNull(feedbackToUser));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Edits the details of an existing task in the task list. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Edits the details of the task identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"by the index number used in the displayed task list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_NAME"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"PRIORITY] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_DESCRIPTION"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"[\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_TAG"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + PREFIX_PRIORITY"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"2 \";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String MESSAGE_EDIT_TASK_SUCCESS \u003d \"Edited Task: \\n%1$s\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"This task already exists in the task list.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final EditTaskDescriptor editTaskDescriptor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param index of the task in the filtered task list to edit"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param editTaskDescriptor details to edit the task with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditCommand(Index index, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(editTaskDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.editTaskDescriptor \u003d new EditTaskDescriptor(editTaskDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d createEditedTask(taskToEdit, editTaskDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!taskToEdit.isSameTask(editedTask) \u0026\u0026 model.hasTask(editedTask)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setTask(taskToEdit, editedTask);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task pommedTask \u003d model.getPomodoroTask();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (pommedTask !\u003d null \u0026\u0026 pommedTask.equals(taskToEdit)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            model.setPomodoroTask(editedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            model.getPomodoroManager()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    .getPomodoroDisplay()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    .setTaskInProgressText(editedTask.getName().toString());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.showAllTasks();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TASK_SUCCESS, editedTask));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Creates and returns a {@code Task} with the details of {@code taskToEdit} edited with {@code"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * editTaskDescriptor}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task createEditedTask(Task taskToEdit, EditTaskDescriptor editTaskDescriptor) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assert taskToEdit !\u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Name updatedName \u003d editTaskDescriptor.getName().orElse(taskToEdit.getName());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Priority updatedPriority \u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                editTaskDescriptor.getPriority().orElse(taskToEdit.getPriority());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Description updatedDescription \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                editTaskDescriptor.getDescription().orElse(taskToEdit.getDescription());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Done updatedDone \u003d editTaskDescriptor.getDone().orElse(taskToEdit.getDone());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editTaskDescriptor.getTags().orElse(taskToEdit.getTags());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Optional\u003cReminder\u003e updatedOptionalReminder \u003d"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                editTaskDescriptor.getReminder().isPresent()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        ? editTaskDescriptor.getReminder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        : taskToEdit.getOptionalReminder();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Optional\u003cRecurring\u003e updatedOptionalRecurring \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                editTaskDescriptor.getRecurring().isPresent()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        ? editTaskDescriptor.getRecurring()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        : taskToEdit.getOptionalRecurring();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedName,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedPriority,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedDescription,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedDone,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                updatedTags,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                updatedOptionalReminder,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                updatedOptionalRecurring);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editTaskDescriptor.equals(e.editTaskDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Stores the details to edit the task with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * corresponding field value of the task."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static class EditTaskDescriptor {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        private Done done;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        private Reminder reminder;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        private Recurring recurring;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public EditTaskDescriptor() {}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        /** Copy constructor. A defensive copy of {@code tags} is used internally. */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public EditTaskDescriptor(EditTaskDescriptor toCopy) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            setDone(toCopy.done);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            setReminder(toCopy.reminder);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            setRecurring(toCopy.recurring);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        /** Returns true if at least one field is edited. */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            return CollectionUtil.isAnyNonNull("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    name, priority, description, tags, reminder, recurring);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setDone(Done done) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.done \u003d done;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Optional\u003cDone\u003e getDone() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.ofNullable(done);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}. A defensive copy of {@code tags} is used"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * internally."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * modification is attempted. Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return (tags !\u003d null)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ? Optional.of(Collections.unmodifiableSet(tags))"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    : Optional.empty();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void setReminder(Reminder reminder) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public Optional\u003cReminder\u003e getReminder() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return Optional.ofNullable(reminder);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void setRecurring(Recurring recurring) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurring \u003d recurring;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public Optional\u003cRecurring\u003e getRecurring() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return Optional.ofNullable(recurring);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (!(other instanceof EditTaskDescriptor)) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            EditTaskDescriptor e \u003d (EditTaskDescriptor) other;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u0026\u0026 getDone().equals(e.getDone())"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 37,
      "FyonnOh": 9,
      "artlee06": 25,
      "BransonNg": 67,
      "Permas-Teo": 2,
      "-": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Terminates the program. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Finds and lists all tasks in task list whose name contains any of the argument keywords. Keyword"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \": Finds all tasks whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"the specified keywords (case-insensitive) or tags.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Parameters: n/PHRASE t/[TAG]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    + \" n/alice bob charlie t/tag1 t/tag2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Apart from filtering tasks that match the keywords based on edit distance derived from {@link"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * NameContainsKeywordsPredicate} also sorts tasks in ascending order of edit distance."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.setSearchResultOrder(predicate.getSearchOrderComparator());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        Messages.MESSAGE_TASKS_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        model.getFilteredTaskList().size()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "BransonNg": 17,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Format full help instructions for every command for display. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            COMMAND_WORD + \": Shows program usage instructions.\\n\" + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Lists all tasks in the task list to the user. */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all tasks\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.showAllTasks();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 1,
      "BransonNg": 2,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PomCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * This class represents the Command for the \"pom\" input by the user. It starts the pomodoro"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * function and sets a specified task in focus."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @author Hardy Shein"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"pom\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \": Starts the pomodoro timer, focusing on \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"the task identified by the index number used in the displayed task list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Parameters: 1-INDEXed (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Time value must be greater than 0\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \" 1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + PREFIX_TIMER"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    + \" 10\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String PAUSE_MESSAGE \u003d \"Pomodoro paused.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String CONTINUE_MESSAGE \u003d \"Pomodoro continuing.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String STOP_MESSAGE \u003d \"Pomodoro stopped.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String NO_POM \u003d \"Sorry, you\u0027ve got no tasks being POMmed.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final float timerAmount;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final POM_TYPE pomType;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public enum POM_TYPE {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        NORMAL,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PAUSE,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CONTINUE,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        STOP;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * PomCommand constructor."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param targetIndex of the task to be focused on during pomodoro."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d -1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomType \u003d POM_TYPE.NORMAL;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * PomCommand constructor."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param targetIndex of the task to be focused on during pomodoro."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param timerAmount time in minutes for particular pomodoro cycle."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand(Index targetIndex, float timerAmount) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d timerAmount * 60;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomType \u003d POM_TYPE.NORMAL;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * PomCommand constructor."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param pomType indicating the type of pomodoro command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand(POM_TYPE pomType) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomType \u003d pomType;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Executes Pom behaviour."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param model of the app\u0027s current state."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return the CommandResult resulting for the execution of a PomCommand instance."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomodoroManager pm \u003d model.getPomodoroManager();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (pomType \u003d\u003d POM_TYPE.PAUSE) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pm.pause();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandResult(PAUSE_MESSAGE, null, 0, model, -1, null, pomType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandResult(NO_POM, null, 0, model, -1, null, pomType);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (pomType \u003d\u003d POM_TYPE.CONTINUE) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pm.unpause();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandResult(CONTINUE_MESSAGE, null, 0, model, -1, null, pomType);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandResult(NO_POM, null, 0, model, -1, null, pomType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (pomType \u003d\u003d POM_TYPE.STOP) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pm.stop();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandResult(STOP_MESSAGE, null, 0, model, -1, null, pomType);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } catch (NullPointerException ne) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandResult(NO_POM, null, 0, model, -1, null, pomType);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getFilteredTaskList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int index \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (index \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskToPom \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pm.startTrackTask();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (taskToPom.getDone().getIsDone()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TASK_TO_BE_DONED);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String resultText \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model.getPomodoroTask() \u003d\u003d null"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        ? \"Pomming task: \" + taskToPom.toString()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        : \"Switched pom task: \" + taskToPom.toString();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // Update the pomodoro model"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroTask(taskToPom);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        System.out.println(\"Hardy: \" + (pm.getDefaultStartTime()));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new PomCommandResult("
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                resultText,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                taskToPom.getName().toString(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                ((int) timerAmount) \u003d\u003d -1 ? pm.getDefaultStartTime() : timerAmount,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                index,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                lastShownList,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pomType);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!(other instanceof PomCommand)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomCommand e \u003d (PomCommand) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return targetIndex.equals(e.targetIndex)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                \u0026\u0026 ((int) timerAmount) \u003d\u003d ((int) e.timerAmount)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                \u0026\u0026 (pomType \u003d\u003d e.pomType);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 179,
      "BransonNg": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PomCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents the Command result for a pom command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @author Hardy Shein"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final String pommedTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final float timerAmount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int taskIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private List\u003cTask\u003e originList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final PomCommand.POM_TYPE pomType;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Constructs a {@code PomCommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public PomCommandResult("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String feedbackToUser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String pommedTask,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            float timerAmount,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Model model,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            int taskIndex,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            List\u003cTask\u003e originList,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomCommand.POM_TYPE pomType) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(requireNonNull(feedbackToUser), false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pommedTask \u003d pommedTask;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerAmount \u003d timerAmount;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.model \u003d requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomType \u003d requireNonNull(pomType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskIndex \u003d taskIndex;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.originList \u003d originList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getPommedTask() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pommedTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public float getTimerAmountInMin() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return timerAmount;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean getIsPause() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomType \u003d\u003d PomCommand.POM_TYPE.PAUSE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean getIsContinue() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomType \u003d\u003d PomCommand.POM_TYPE.CONTINUE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean getIsStop() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomType \u003d\u003d PomCommand.POM_TYPE.STOP;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean getIsNormal() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomType \u003d\u003d PomCommand.POM_TYPE.NORMAL;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public int getTaskIndex() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return taskIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public List\u003cTask\u003e getOriginList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return originList;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 75,
      "BransonNg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAILY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PetName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PomDuration;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class SetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"set\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \": Customises the name of the Pet, duration of Pomodoro and the target of the daily challenge.\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + PREFIX_PET"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"NAME OF PET \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + PREFIX_POM"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"DURATION OF POMODORO \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + PREFIX_DAILY"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"TARGET OF DAILY CHALLENGE (MINS) \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"Example: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + PREFIX_PET"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"Momu \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + PREFIX_POM"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"30 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + PREFIX_DAILY"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    + \"150 \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String MESSAGE_SUCCESS \u003d \"Successfuly set!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetName petName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PomDuration pomDuration;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private DailyTarget dailyTarget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public SetCommand(PetName petName, PomDuration pomDuration, DailyTarget dailyTarget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petName \u003d petName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pomDuration \u003d pomDuration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.dailyTarget \u003d dailyTarget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public SetCommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!petName.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            model.setPetName(petName.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            builder.append(\" Pet Name: \").append(petName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!pomDuration.isEmpty()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            String s \u003d pomDuration.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            model.setPomodoroDefaultTime(Float.parseFloat(s));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            builder.append(\" Pomodoro Duration: \").append(pomDuration).append(\" mins\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!dailyTarget.isEmpty()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            builder.append(\" Daily Target: \").append(dailyTarget).append(\" mins\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        MESSAGE_SUCCESS \u003d builder.toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new SetCommandResult(MESSAGE_SUCCESS, petName, pomDuration, dailyTarget);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetName getPetName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.petName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PomDuration getPomDuration() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.pomDuration;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public DailyTarget getDailyTarget() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.dailyTarget;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 petName.equals(((SetCommand) other).getPetName())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 pomDuration.equals(((SetCommand) other).getPomDuration())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 dailyTarget.equals(((SetCommand) other).getDailyTarget()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PetName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PomDuration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class SetCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    PetName petName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    PomDuration pomDuration;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    DailyTarget dailyTarget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public SetCommandResult("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            String feedbackToUser,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            PetName petName,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            PomDuration pomDuration,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            DailyTarget dailyTarget) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        super(requireNonNull(feedbackToUser));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petName \u003d petName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pomDuration \u003d pomDuration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.dailyTarget \u003d dailyTarget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetName getPetName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return petName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PomDuration getPomDuration() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return pomDuration;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public DailyTarget getDailyTarget() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return dailyTarget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Adds a task to the task list. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String[] ALLOWED_SORT_FIELDS \u003d {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        \"r-priority\", \"r-date\", \"r-name\", \"r-done\", \"priority\", \"date\", \"name\", \"done\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    };"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DISPLAY_POSSIBLE_FIELDS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"1.(r-)priority\\n2.(r-)name\\n3.(r-)done\\n4.(r-)date\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TaskList sorted by:\\n%1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SORT_UNKNOWN \u003d \"No such field to sort by %1$s!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"%1$s -\u003e Sorts tasklist by one or multiple fields form these choices:\\n%2$s \\nExample: %1$s done priority\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    COMMAND_WORD, DISPLAY_POSSIBLE_FIELDS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String[] fields;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public SortCommand(String[] fields) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.fields \u003d fields;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // NOTE: Incorrect sort fields has been handled in SortCommandParser already"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArrayList\u003cComparator\u003cTask\u003e\u003e comparatorList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (String field : fields) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            switch (field) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"priority\":"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getPriorityComparator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"date\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getReminderComparator());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"name\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getNameComparator());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getDoneComparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"r-priority\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getPriorityComparator().reversed());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"r-date\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getReminderComparator().reversed());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"r-name\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getNameComparator().reversed());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case \"r-done\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                comparatorList.add(getDoneComparator().reversed());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Comparator\u003cTask\u003e aggregateComparator \u003d comparatorList.get(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 1; i \u003c comparatorList.size(); i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            aggregateComparator \u003d aggregateComparator.thenComparing(comparatorList.get(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.setComparator(aggregateComparator, fields[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String commandFeedback \u003d String.format(MESSAGE_SUCCESS, String.join(\", \", fields));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CommandResult(commandFeedback);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getPriorityComparator() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return task1.getPriority().compareTo(task2.getPriority());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getDoneComparator() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return task1.getDone().compareTo(task2.getDone());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getNameComparator() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return task1.getName().compareTo(task2.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Comparator\u003cTask\u003e getReminderComparator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003cTask\u003e() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Optional\u003cReminder\u003e reminder1 \u003d task1.getOptionalReminder();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Optional\u003cReminder\u003e reminder2 \u003d task2.getOptionalReminder();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (reminder1.isPresent() \u0026\u0026 reminder2.isPresent()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return reminder1.get().compareTo(reminder2.get());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (reminder1.isPresent()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (reminder2.isPresent()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 fields.equals(((SortCommand) other).fields)); // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 133,
      "Permas-Teo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchTabCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * This class represents the Command for the \"tasks, stats and settings\" input by the user."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @author Hardy Shein"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class SwitchTabCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String TASKS_COMMAND_WORD \u003d \"tasks\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String STATS_COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String SETTINGS_COMMAND_WORD \u003d \"settings\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final int TASKS_TAB_INDEX \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final int STATS_TAB_INDEX \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final int SETTINGS_TAB_INDEX \u003d 3;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"View changed.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int tabIndexToSwitch;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * SwitchTabCommand constructor."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param tabIndexToSwitch indicating the index of the UI element to swap to."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public SwitchTabCommand(int tabIndexToSwitch) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.tabIndexToSwitch \u003d tabIndexToSwitch;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Executes switch tab behaviour."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param model of the app\u0027s current state."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return the CommandResult resulting for the execution of a SwitchTabCommand instance."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new SwitchTabCommandResult(MESSAGE_SUCCESS, tabIndexToSwitch);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 47,
      "FyonnOh": 3,
      "Permas-Teo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SwitchTabCommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents the Command result for a switch tab command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @author Hardy Shein"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class SwitchTabCommandResult extends CommandResult {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final int tabToSwitchIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Constructs a {@code SwitchTabCommandResult} with the specified fields. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public SwitchTabCommandResult(String feedbackToUser, int tabToSwitchIndex) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(requireNonNull(feedbackToUser));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.tabToSwitchIndex \u003d requireNonNull(tabToSwitchIndex);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Getter for the tab index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return integer representing the tab index."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public int getTabToSwitchIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tabToSwitchIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TagCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Gets all tags currently in the list */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TagCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"You have these tags:\\n\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_NO_TAGS \u003d \"You have no tags\\n\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] tagNames \u003d model.getTagNames();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (tagNames.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new CommandResult(MESSAGE_NO_TAGS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + String.join(\",\\n\", tagNames));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents an error which occurs during execution of a {@link Command}. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code cause}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CompletorException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents an error which occurs during execution of a {@link Command}. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CompletorException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a new {@code CompletorException} with the specified detail {@code message} and"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code cause}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.TASK_PREFIXES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new AddCommand object */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand and returns an"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * AddCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_TAG,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        PREFIX_REMINDER,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        PREFIX_RECURRING);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!ParserUtil.arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Priority priority \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                (argMultimap.getValue(PREFIX_PRIORITY).isEmpty())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        ? ParserUtil.parsePriority(\"1\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        : ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Description description \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                (argMultimap.getValue(PREFIX_DESCRIPTION).isEmpty())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        ? ParserUtil.parseDescription(\"\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        : ParserUtil.parseDescription("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cReminder\u003e optionalReminder \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (argMultimap.getValue(PREFIX_REMINDER).isEmpty())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        ? Optional.empty()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        : Optional.of("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                ParserUtil.parseReminder("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        argMultimap.getValue(PREFIX_REMINDER).get()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cRecurring\u003e optionalRecurring \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                (argMultimap.getValue(PREFIX_RECURRING).isEmpty())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        ? Optional.empty()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        : Optional.of("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                ParserUtil.parseRecurring("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                        argMultimap.getValue(PREFIX_RECURRING).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Task task \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new Task(name, priority, description, tagList, optionalReminder, optionalRecurring);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new AddCommand(task);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Uses argMultimap to detect existing prefixes used so that it won\u0027t add double prefixes. Adds"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * priority and reminder prefixes"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param input input that has been trimmed"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return CompletorResult with suggested command and feedback to display"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult completeCommand(String input) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(input, TASK_PREFIXES);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        boolean hasReminder \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_REMINDER);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        boolean hasPriority \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder prefixesBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitInput \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d splitInput.length - 1; i \u003e 0; i--) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String currentArgument \u003d splitInput[i];"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (Reminder.isValidReminder(currentArgument) \u0026\u0026 !hasReminder) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                splitInput[i] \u003d CliSyntax.PREFIX_REMINDER.toString() + currentArgument;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                hasReminder \u003d true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                prefixesBuilder.append(CliSyntax.PREFIX_REMINDER.toString() + \" \");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            } else if (Priority.isValidPriority(currentArgument) \u0026\u0026 !hasPriority) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                splitInput[i] \u003d CliSyntax.PREFIX_PRIORITY.toString() + currentArgument;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                hasPriority \u003d true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                prefixesBuilder.append(CliSyntax.PREFIX_PRIORITY.toString() + \" \");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String newCommand \u003d String.join(\" \", splitInput);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String prefixesAdded \u003d prefixesBuilder.length() \u003d\u003d 0 ? \"nil\" : prefixesBuilder.toString();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d String.format(Messages.COMPLETE_PREFIX_SUCCESS, prefixesAdded);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CompletorResult(newCommand, feedbackToUser);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 20,
      "FyonnOh": 3,
      "artlee06": 16,
      "BransonNg": 52,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Stores mapping of prefixes to their respective arguments. Each key may be associated with"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * multiple argument values. Values for a given key are stored in a list, and the insertion ordering"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * is maintained. Keys are unique, but the list of argument values may contain duplicate argument"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * values, i.e. the same argument value can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments* */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map. If the map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * previously contained a mapping for the key, the new value is appended to the list of existing"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the last value of {@code prefix}. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns all values of {@code prefix}. If the prefix does not exist or has no values, this"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * will return an empty list. Modifying the returned list will not affect the underlying data"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July} where prefixes are {@code t/ k/ m/}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * \u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * t/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * prefixes to their respective argument values. Only the given prefixes will be recognized in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the arguments string."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** {@see findAllPrefixPositions} */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in {@code argsString} starting"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * from index {@code fromIndex}. An occurrence is valid if there is a whitespace before {@code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * prefix}. Returns -1 if no such occurrence can be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * \u003cp\u003eE.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d 0,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * this method returns -1 as there are no valid occurrences of \"p/\" with whitespace before it."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * However, if {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and {@code fromIndex} \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * 0, this method returns 5."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1 : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * that maps the extracted prefixes to their respective arguments. Prefixes are extracted based"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * on their zero-based positions in {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     ...}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static ArgumentMultimap extractArguments("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        prefixPositions.sort("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argValue \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    extractArgumentValue("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * currentPrefixPosition}. The end position of the value is determined by {@code"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * nextPrefixPosition}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static String extractArgumentValue("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String argsString,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Represents a prefix\u0027s position in an arguments string. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 42,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains Command Line Interface (CLI) syntax definitions common to multiple commands */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"des/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final Prefix PREFIX_REMINDER \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final Prefix PREFIX_RECURRING \u003d new Prefix(\"rec/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final Prefix PREFIX_TIMER \u003d new Prefix(\"tm/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Prefix[] TASK_PREFIXES \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new Prefix[] {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                PREFIX_NAME, PREFIX_PRIORITY, PREFIX_DESCRIPTION, PREFIX_TAG, PREFIX_REMINDER"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            };"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final Prefix PREFIX_PET \u003d new Prefix(\"pet/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final Prefix PREFIX_POM \u003d new Prefix(\"pom/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final Prefix PREFIX_DAILY \u003d new Prefix(\"daily/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "FyonnOh": 3,
      "artlee06": 2,
      "BransonNg": 6,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorDeletionResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new DeleteCommand object */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand and returns"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * a DeleteCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Index[] indices \u003d ParserUtil.parseIndices(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new DeleteCommand(indices);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Removes all invalid indexes and lets user know which indexes have been removed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param input input that has been trimmed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return CompletorResult with suggested command and feedback to display"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult completeCommand(String input, int listSize) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitInput \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder newCommand \u003d new StringBuilder(\"delete \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder removedIndices \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d Messages.COMPLETE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(splitInput[i])) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                feedbackToUser \u003d Messages.COMPLETE_INDEX_OUT_OF_RANGE_REMOVAL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                removedIndices.append(splitInput[i].toString() + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            int currNumber \u003d Integer.parseInt(splitInput[i]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (currNumber \u003e listSize) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                feedbackToUser \u003d Messages.COMPLETE_INDEX_OUT_OF_RANGE_REMOVAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                removedIndices.append(currNumber + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                newCommand.append(currNumber + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        newCommand.setLength(newCommand.length() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (removedIndices.length() \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            removedIndices.setLength(removedIndices.length() - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new CompletorDeletionResult("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    newCommand.toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(feedbackToUser, removedIndices.toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new CompletorResult(newCommand.toString(), feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 47,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorDeletionResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new DoneCommand object */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DoneCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * DoneCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Index[] indices \u003d ParserUtil.parseIndices(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new DoneCommand(indices);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DoneCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Removes all invalid indexes and lets user know which indexes have been removed"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param input input that has been trimmed"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return CompletorResult with suggested command and feedback to display"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult completeCommand(String input, int listSize) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitInput \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder newCommand \u003d new StringBuilder(\"done \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder removedIndices \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d Messages.COMPLETE_SUCCESS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 1; i \u003c splitInput.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(splitInput[i])) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                feedbackToUser \u003d Messages.COMPLETE_INDEX_OUT_OF_RANGE_REMOVAL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                removedIndices.append(splitInput[i].toString() + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            int currNumber \u003d Integer.parseInt(splitInput[i]);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (currNumber \u003e listSize) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                feedbackToUser \u003d Messages.COMPLETE_INDEX_OUT_OF_RANGE_REMOVAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                removedIndices.append(currNumber + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                newCommand.append(currNumber + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        newCommand.setLength(newCommand.length() - 1);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (removedIndices.length() \u003e 0) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            removedIndices.setLength(removedIndices.length() - 1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new CompletorDeletionResult("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    newCommand.toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(feedbackToUser, removedIndices.toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new CompletorResult(newCommand.toString(), feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.TASK_PREFIXES;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new EditCommand object */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand and returns an"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * EditCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ArgumentTokenizer.tokenize("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        args,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        PREFIX_TAG,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        PREFIX_REMINDER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        PREFIX_RECURRING);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor editTaskDescriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setName("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setPriority("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setDescription("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (argMultimap.getValue(PREFIX_REMINDER).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            editTaskDescriptor.setReminder("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    ParserUtil.parseReminder(argMultimap.getValue(PREFIX_REMINDER).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RECURRING).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            editTaskDescriptor.setRecurring("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    ParserUtil.parseRecurring(argMultimap.getValue(PREFIX_RECURRING).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .ifPresent(editTaskDescriptor::setTags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!editTaskDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new EditCommand(index, editTaskDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Uses argMultimap to detect existing prefixes used so that it won\u0027t add double prefixes. Adds"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * priority and reminder prefixes. Note that we ignore the second word when adding prefixes as"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * it should be the index Also note that if the index is invalid, an exception is thrown"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param input trimmed"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param listSize"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return contains userFeedback and suggestedCommand"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws CompletorException throws an exception when index is invalid"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult completeCommand(String input, int listSize) throws CompletorException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] trimmedInputs \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (trimmedInputs.length \u003e 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String errorMessage \u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(Messages.COMPLETE_INDEX_OUT_OF_RANGE_FAILURE, trimmedInputs[1]);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (StringUtil.isNonZeroUnsignedInteger(trimmedInputs[1])) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                int editIndex \u003d Integer.parseInt(trimmedInputs[1]);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (editIndex \u003e listSize) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    throw new CompletorException(errorMessage);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new CompletorException(errorMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(input, TASK_PREFIXES);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        boolean hasReminder \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_REMINDER);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        boolean hasPriority \u003d ParserUtil.arePrefixesPresent(argMultimap, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder prefixesBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d trimmedInputs.length - 1; i \u003e 1; i--) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String currentArgument \u003d trimmedInputs[i];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (Reminder.isValidReminder(currentArgument) \u0026\u0026 !hasReminder) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                trimmedInputs[i] \u003d CliSyntax.PREFIX_REMINDER.toString() + currentArgument;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                hasReminder \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                prefixesBuilder.append(CliSyntax.PREFIX_REMINDER.toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                prefixesBuilder.append(\" \");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            } else if (Priority.isValidPriority(currentArgument) \u0026\u0026 !hasPriority) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                trimmedInputs[i] \u003d CliSyntax.PREFIX_PRIORITY.toString() + currentArgument;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                hasPriority \u003d true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                prefixesBuilder.append(CliSyntax.PREFIX_PRIORITY.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                prefixesBuilder.append(\" \");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String newCommand \u003d String.join(\" \", trimmedInputs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String prefixesAdded \u003d prefixesBuilder.length() \u003d\u003d 0 ? \"nil\" : prefixesBuilder.toString();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d String.format(Messages.COMPLETE_PREFIX_SUCCESS, prefixesAdded);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CompletorResult(newCommand, feedbackToUser);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 7,
      "FyonnOh": 1,
      "artlee06": 10,
      "BransonNg": 83,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new FindCommand object */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand and returns a"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String name \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] nameKeywords \u003d name.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (name.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            nameKeywords \u003d new String[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new FindCommand("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords), tagList));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "FyonnOh": 1,
      "BransonNg": 17,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PetName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PomDuration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "/** Contains utility methods used for parsing strings in the various *Parser classes. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * whitespaces will be trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Index[] parseIndices(String oneBasedIndices) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String trimmedIndices \u003d oneBasedIndices.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitIndices \u003d trimmedIndices.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index[] indexes \u003d new Index[splitIndices.length];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 0; i \u003c splitIndices.length; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(splitIndices[i])) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            indexes[i] \u003d Index.fromOneBased(Integer.parseInt(splitIndices[i]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return indexes;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Gets all unique space-separated unique words */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static String[] parseUniqueKeyWords(String keywords) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String trimmedKeyWords \u003d keywords.trim();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitKeyWords \u003d trimmedKeyWords.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // HashSet not used as we need to retain the order of the keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArrayList\u003cString\u003e uniqueWords \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (String s : splitKeyWords) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (!uniqueWords.contains(s)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                uniqueWords.add(s);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return uniqueWords.toArray(new String[0]);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String reminder} into a {@code Reminder}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * will be trimmed. Format to receive is DD/MM/YY@HH:mm eg 04/11/20@10:30"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws ParseException if the given {@code reminder} is invalid."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static Reminder parseReminder(String reminderString)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws ParseException, InvalidReminderException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireNonNull(reminderString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String trimmedReminder \u003d reminderString.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (!Reminder.isValidReminder(trimmedReminder)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new ParseException(Reminder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return new Reminder(reminderString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static Recurring parseRecurring(String recurringString) throws ParseException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireNonNull(recurringString);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String trimmedRecurring \u003d recurringString.trim();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (!Recurring.isValidRecurring(trimmedRecurring)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new ParseException(Recurring.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return new Recurring(trimmedRecurring, LocalDateTime.now());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String priority} into a {@code Priority}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String trimmedPriority \u003d priority.trim();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Priority(trimmedPriority);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}. Leading and trailing whitespaces"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * will be trimmed."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}. */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static PetName parsePetName(String petName) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(petName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String trimmedPetName \u003d petName.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!PetName.isValidPetName(trimmedPetName)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException(PetName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new PetName(trimmedPetName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static PomDuration parsePomDuration(String pomDuration) throws ParseException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(pomDuration);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String trimmedPomDuration \u003d pomDuration.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!PomDuration.isValidPomDuration(trimmedPomDuration)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException(PomDuration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new PomDuration(trimmedPomDuration);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static DailyTarget parseDailyTarget(String dailyTarget) throws ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(dailyTarget);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String trimmedDailyTarget \u003d dailyTarget.trim();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!DailyTarget.isValidDailyTarget(trimmedDailyTarget)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException(DailyTarget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new DailyTarget(trimmedDailyTarget);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 46,
      "Hardoh": 9,
      "artlee06": 27,
      "BransonNg": 47,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PomCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand.POM_TYPE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Parses input arguments and creates a new PomCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @author Hardy Shein"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommandParser implements Parser\u003cPomCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PomCommand and returns a"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Pom Command object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @return the derived PomCommand for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TIMER);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Optional\u003cString\u003e optTimerString \u003d argMultimap.getValue(PREFIX_TIMER);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (preamble.toLowerCase().equals(\"pause\")) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommand(POM_TYPE.PAUSE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else if (preamble.toLowerCase().equals(\"continue\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommand(POM_TYPE.CONTINUE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else if (preamble.toLowerCase().equals(\"stop\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommand(POM_TYPE.STOP);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                // Look for an index to call Pom on"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(preamble);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (optTimerString.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return new PomCommand(index);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        float timerAmount \u003d Float.parseFloat(optTimerString.get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        if (timerAmount \u003c\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            throw new ParseException(\"Invalid time\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        return new PomCommand(index, timerAmount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        throw new ParseException(\"Invalid time\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, PomCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Uses argMultimap to detect existing prefixes used so that it won\u0027t add double prefixes. Adds"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * timer prefix"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * \u003cp\u003eOnly attempts to add a prefix to the 3rd word in the command"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param input input that has been trimmed"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @return CompletorResult with suggested command and feedback to display"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult completeCommand(String input) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArgumentMultimap pomArgMap \u003d ArgumentTokenizer.tokenize(input, PREFIX_TIMER);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        boolean hasTimer \u003d ParserUtil.arePrefixesPresent(pomArgMap, PREFIX_TIMER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder prefixesBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] trimmedInputs \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!hasTimer \u0026\u0026 trimmedInputs.length \u003e 2) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            trimmedInputs[2] \u003d CliSyntax.PREFIX_TIMER.toString() + trimmedInputs[2];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            prefixesBuilder.append(CliSyntax.PREFIX_TIMER.toString());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String newCommand \u003d String.join(\" \", trimmedInputs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(Messages.COMPLETE_PREFIX_SUCCESS, prefixesBuilder.toString());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CompletorResult(newCommand, feedbackToUser);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 61,
      "artlee06": 1,
      "BransonNg": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string. E.g. \u0027t/\u0027 in \u0027add James"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAILY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_POM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PetName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PomDuration;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class SetCommandParser implements Parser\u003cSetCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public SetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_PET, PREFIX_POM, PREFIX_DAILY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!(arePrefixesPresent(argMultimap, PREFIX_PET)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        || arePrefixesPresent(argMultimap, PREFIX_POM)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        || arePrefixesPresent(argMultimap, PREFIX_DAILY))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        PetName petName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        PomDuration pomDuration;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        DailyTarget dailyTarget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_PET)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petName \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (argMultimap.getValue(PREFIX_PET).isEmpty())"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            ? ParserUtil.parsePetName(\"\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            : ParserUtil.parsePetName(argMultimap.getValue(PREFIX_PET).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            petName \u003d new PetName(\"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_POM)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            pomDuration \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (argMultimap.getValue(PREFIX_POM).isEmpty())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            ? ParserUtil.parsePomDuration(\"\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            : ParserUtil.parsePomDuration(argMultimap.getValue(PREFIX_POM).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            pomDuration \u003d new PomDuration(\"\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_DAILY)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            dailyTarget \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    (argMultimap.getValue(PREFIX_DAILY).isEmpty())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            ? ParserUtil.parseDailyTarget(\"\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                            : ParserUtil.parseDailyTarget(argMultimap.getValue(PREFIX_DAILY).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            dailyTarget \u003d new DailyTarget(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new SetCommand(petName, pomDuration, dailyTarget);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static boolean arePrefixesPresent("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return Stream.of(prefixes)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                .allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorDeletionResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses input arguments and creates a new SortCommand object */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand and returns a"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * SortCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] uniqueWords \u003d ParserUtil.parseUniqueKeyWords(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (uniqueWords.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String[] validFields \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                Arrays.stream(uniqueWords)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .filter(s -\u003e Arrays.asList(SortCommand.ALLOWED_SORT_FIELDS).contains(s))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .toArray(String[]::new);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (validFields.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new SortCommand(validFields); // should be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CompletorResult completeCommand(String input) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitFields \u003d input.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String feedbackToUser \u003d Messages.COMPLETE_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder removedFields \u003d new StringBuilder();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder acceptedFields \u003d new StringBuilder(\"sort \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 1; i \u003c splitFields.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String currWord \u003d splitFields[i];"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Optional\u003cString\u003e completedWord \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    StringUtil.getCompletedWord(currWord, SortCommand.ALLOWED_SORT_FIELDS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (completedWord.isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                acceptedFields.append(completedWord.get() + \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                removedFields.append(currWord + \", \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        acceptedFields.setLength(acceptedFields.length() - 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String newCommand \u003d acceptedFields.toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (removedFields.length() \u003e 0) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            removedFields.setLength(removedFields.length() - 2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String errorFeedback \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(Messages.COMPLETE_UNKNOWN_SORT_FIELDS, removedFields.toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new CompletorDeletionResult(newCommand, errorFeedback);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        feedbackToUser \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"%s\\nHere are some other fields:\\n%s\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        feedbackToUser, SortCommand.DISPLAY_POSSIBLE_FIELDS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new CompletorResult(newCommand, feedbackToUser);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 10,
      "BransonNg": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TaskListParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.DoneCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.commands.SetCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.TagCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Parses user input. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Used for initial separation of command word and args. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case PomCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new PomCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case SwitchTabCommand.STATS_COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new SwitchTabCommand(SwitchTabCommand.STATS_TAB_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            case SwitchTabCommand.TASKS_COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                return new SwitchTabCommand(SwitchTabCommand.TASKS_TAB_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case SwitchTabCommand.SETTINGS_COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                return new SwitchTabCommand(SwitchTabCommand.SETTINGS_TAB_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            case SetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                return new SetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            case TagCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return new TagCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 11,
      "FyonnOh": 7,
      "BransonNg": 19,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a parse error encountered by a parser. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/InvalidPetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class InvalidPetException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public InvalidPetException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.Observer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The API of the Model component. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASKS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Replaces user prefs data with the data in {@code userPrefs}. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs. */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the user prefs\u0027 GUI settings. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns the user prefs\u0027 task list file path. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the user prefs\u0027 task list file path. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setTaskListFilePath(Path taskListFilePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Replaces task list data with the data in {@code taskList}. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setTaskList(ReadOnlyTaskList taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public interface TaskSaver {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        void saveTask(TaskList tasklist);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setTaskSaver(TaskSaver taskSaver);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the TaskList */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyTaskList getTaskList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns true if a task with the same identity as {@code task} exists in the task list. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    boolean hasTask(Task task);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Deletes the given task. The task must exist in the task list. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void deleteTask(Task target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Adds the given task. {@code task} must not already exist in the task list. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void addTask(Task task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an array of strings containing names of all tags in tasklist */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String[] getTagNames();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Checks if a tag is present */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    boolean hasTag(Tag t);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the given task {@code target} with {@code editedTask}. {@code target} must exist in"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * the task list. The task identity of {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * existing task in the task list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setTask(Task target, Task editedTask);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an unmodifiable view of the filtered task list */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    ObservableList\u003cTask\u003e getFilteredTaskList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Updates the filter of the filtered task list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void updateFilteredTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets FilteredList\u0027s predicate to show all tasks */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void showAllTasks();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets comparator on tasklist and also the dominant sort order */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setComparator(Comparator\u003cTask\u003e comparator, String sortOrder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Set sort order after find command has been performed */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setSearchResultOrder(Comparator\u003cTask\u003e comaprator);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // void sortSearchByRelevance(Comparator\u003cTask\u003e comparator);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyPet getPet();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    PetManager getPetManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void setPetName(String name);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    ReadOnlyPomodoro getPomodoro();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void setPomodoroTask(Task task);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    Task getPomodoroTask();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setPomodoroDefaultTime(float defaultTimeInMin);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setPomodoroRestTime(float restTimeInMin);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setPomodoroTimeLeft(float timeLeft);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    void setPomodoroManager(PomodoroManager pomodoroManager);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void setPetManager(PetManager PetManager);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void setStatisticsManager(StatisticsManager statisticsManager);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    PomodoroManager getPomodoroManager();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    ReadOnlyStatistics getStatistics();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Notifies observers when a change is made. Observer in this case is the MainWindow."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    void notifyMainWindow(String input) throws CommandException;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    void addObserver(Observer observer);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void updateDataDatesStatistics();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void updatesDayDataStatistics(DayData dayData);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    DayData getDayDataFromDateStatistics(Date date);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 9,
      "Hardoh": 22,
      "artlee06": 9,
      "BransonNg": 43,
      "Permas-Teo": 16,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.Observer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Represents the in-memory model of the task list data. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Pomodoro pomodoro;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final Pet pet;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TagSet tagSet;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private FilteredList\u003cTask\u003e filteredTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoroManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private ArrayList\u003cObserver\u003e observers;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private HashMap\u003cTask, TimerTask\u003e recurringTimerTasks \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Timer recurringTimer \u003d new Timer();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TaskSaver taskSaver;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Initializes a ModelManager with the given taskList and userPrefs. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ModelManager("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyTaskList taskList,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyPet pet,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyPomodoro pomodoro,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            ReadOnlyStatistics statistics,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireAllNonNull(taskList, userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.fine(\"Initializing with Task List: \" + taskList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList \u003d new TaskList(taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tagSet \u003d new TagSet(taskList);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.setRecurringTimers();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet tempPet;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            tempPet \u003d new Pet(pet);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (InvalidPetException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            tempPet \u003d new Pet();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            logger.info(e.toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pet \u003d tempPet;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomodoro \u003d new Pomodoro(pomodoro); // initialize a pomodoro as a model"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statistics \u003d new Statistics(statistics); // initialize a Statistics as a model"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.info(String.format(\"Initializing with Statistics: %s\", this.statistics.toString()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d new PetManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager.setPet(this.pet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager.setStatistics(this.statistics);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        filteredTasks \u003d new FilteredList\u003c\u003e(this.taskList.getTaskList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.observers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this(new TaskList(), new Pet(), new Pomodoro(), new Statistics(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return userPrefs.getTaskListFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(taskListFilePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Sets the task saver for saving task to storage when setTask is called. */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskSaver(TaskSaver taskSaver) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskSaver \u003d taskSaver;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Sets the timers required for recurring behaviour in all tasks and schedules the task in the"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * stipulated time delay. Ensures that any existing timer is canceled first."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void setRecurringTimers() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.recurringTimer.cancel();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.recurringTimer \u003d new Timer();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.recurringTimerTasks.clear();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Task t : this.taskList.getTaskList()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (t.getOptionalRecurring().isPresent()) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                if (Recurring.shouldUpdateTask(t)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    TimerTask tt \u003d this.generateTimerTask(t);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    recurringTimerTasks.put(t, tt);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    this.recurringTimer.scheduleAtFixedRate("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            tt, t.getDelayToFirstTrigger(), t.getRecurPeriod());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Generates the timer task for the recurring behaviour, namely updating the task."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return Timer task for timer to run."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TimerTask generateTimerTask(Task t) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new TimerTask() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public void run() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Platform.runLater("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        () -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            if (Recurring.shouldUpdateTask(t)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                Task recurredTask \u003d t.getRecurredTask();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                setTask(t, recurredTask);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                String recurredString \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                        Recurring.MESSAGE_RECURRING_TASK_SUCCESS"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                                + recurredTask.toString();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                notifyMainWindow(recurredString);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Cancels timer task for the task given."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private void cancelTimerTask(Task t) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (this.recurringTimerTasks.containsKey(t)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.recurringTimerTasks.get(t).cancel();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Sets a timer and schedules recurring behaviour whenever task is added or saved in the model"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * if there is recurring attribute in task."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param t"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void setTimer(Task t) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (t.getOptionalRecurring().isPresent()) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            TimerTask tt \u003d this.generateTimerTask(t);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            recurringTimerTasks.put(t, tt);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurringTimer.scheduleAtFixedRate("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    tt, t.getDelayToFirstTrigger(), t.getRecurPeriod());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Sets recurring timers and thus recurring behaviour for tasks with recurring whenever taskList"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * is set in the model."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskList(ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tagSet.populateTag(taskList);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.resetData(taskList);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.setRecurringTimers();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String[] getTagNames() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.tagSet.getTagNames();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean hasTag(Tag t) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.tagSet.contains(t);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList.hasTask(task);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Deletes task from model and cancels corresponding timer task. */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tagSet.removeTask(target);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.removeTask(target);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Ensures that recurring behaviour is triggered for a task when task is added to model. */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tagSet.addTask(task);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.showAllTasks();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setTimer(task);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** sortList after task is edited so that edited task will follow the existing sort order */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tagSet.addTask(editedTask);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tagSet.removeTask(target);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.setTask(target, editedTask);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        cancelTimerTask(target);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setTimer(editedTask);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (taskSaver !\u003d null) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.taskSaver.saveTask(this.taskList);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Subject Methods for Observer"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void notifyMainWindow(String input) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        for (Observer observer : observers) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            observer.update(input);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void addObserver(Observer observer) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        observers.add(observer);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Task List Methods"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Task} backed by the internal list of @FXML"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Serves as a reference point for TaskListPanel.java to update display {@code"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * versionedTaskList}"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.filteredTasks;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void showAllTasks() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        filteredTasks.setPredicate(PREDICATE_SHOW_ALL_TASKS);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        filteredTasks.setPredicate(predicate);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sort list methods"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Used when for the sort command when sorting by multiple fields */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setComparator(Comparator\u003cTask\u003e comparator, String sortOrder) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(sortOrder);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.setComparator(comparator);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.setSortOrder(sortOrder);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Used when a predicate is applied to show the more relevant serach results */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setSearchResultOrder(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(comparator);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.setComparator(comparator);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.setSortOrder(\"\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList.setComparator(null);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList.equals(other.taskList)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 filteredTasks.equals(other.filteredTasks);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet Manager"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pet;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetManager getPetManager() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return petManager;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetName(String name) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pet.setName(name);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetManager(PetManager petManager) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager.setPet(this.pet);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pomodoro Manager"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pomodoro;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomodoro.setTask(task);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Task getPomodoroTask() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return this.pomodoro.getRunningTask();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroRestTime(float restTimeInMin) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro.setRestTime(Float.toString(restTimeInMin));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroDefaultTime(float defaultTimeInMin) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro.setDefaultTime(Float.toString(defaultTimeInMin));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroTimeLeft(float timeLeft) {"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro.setTimeLeft(Float.toString(timeLeft));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoroManager \u003d pomodoroManager;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return pomodoroManager;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics Manager"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setStatisticsManager(StatisticsManager statisticsManager) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager \u003d statisticsManager;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager.setStatistics(this.statistics);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public ReadOnlyStatistics getStatistics() {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateDataDatesStatistics() {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        statistics.updateDataDates();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updatesDayDataStatistics(DayData dayData) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.updateDayData(dayData);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData getDayDataFromDateStatistics(Date date) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statistics.getDayDataFromDate(date);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 34,
      "Hardoh": 46,
      "artlee06": 59,
      "BransonNg": 138,
      "Permas-Teo": 38,
      "-": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Pet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Pet implements ReadOnlyPet {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_NAME \u003d \"BB\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_EXP \u003d \"0\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_LEVEL \u003d \"1\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_MOOD \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_LAST_DONE_TASK_TIME \u003d LocalDateTime.now().toString();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HANGRY_MOOD_STRING \u003d \"HANGRY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HAPPY_MOOD_STRING \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String exp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String level;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String mood;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String lastDoneTaskTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Pet(String name, String exp, String level, String mood, String lastDoneTaskTime) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.exp \u003d exp;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Pet(ReadOnlyPet source) throws InvalidPetException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                source.getName(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                source.getExp(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                source.getLevel(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                source.getMood(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                source.getLastDoneTaskTime());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pet() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.name \u003d DEFAULT_NAME;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.exp \u003d DEFAULT_EXP;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.level \u003d DEFAULT_LEVEL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d DEFAULT_MOOD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d DEFAULT_LAST_DONE_TASK_TIME;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // When a task is done, exp level increases by 5"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementExp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int newExp \u003d Integer.parseInt(this.exp) + 5;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.exp \u003d Integer.toString(newExp);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // update level"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expInteger \u003d Integer.parseInt(this.exp);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int levelInteger \u003d (int) Math.ceil(expInteger / 99.0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.level \u003d Integer.toString(levelInteger);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementPomExp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int newExp \u003d Integer.parseInt(this.exp) + 25;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.exp \u003d Integer.toString(newExp);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // update level"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expInteger \u003d Integer.parseInt(this.exp);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int levelInteger \u003d (int) Math.ceil(expInteger / 99.0);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.level \u003d Integer.toString(levelInteger);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeHangry() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d HANGRY_MOOD_STRING;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeHappy() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d HAPPY_MOOD_STRING;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setLastDoneTaskTime(String lastDoneTaskTime) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getLevel() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return level;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getExp() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.exp;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getMood() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (this.mood \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.mood \u003d DEFAULT_MOOD;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.mood;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getLastDoneTaskTime() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (this.lastDoneTaskTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.lastDoneTaskTime \u003d DEFAULT_LAST_DONE_TASK_TIME;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return this.lastDoneTaskTime;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (other instanceof Pet) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                Pet otherPet \u003d (Pet) other;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                return (this.name.equals(otherPet.getName())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 this.level.equals(otherPet.getLevel())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 this.exp.equals(otherPet.getExp())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 this.mood.equals(otherPet.getMood())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 this.lastDoneTaskTime.equals(otherPet.getLastDoneTaskTime()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return String.format(\"Hi I\u0027m pet %s! my Exp is %s and my level is %s\", name, exp, level);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 93,
      "artlee06": 6,
      "BransonNg": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Pomodoro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Pomodoro implements ReadOnlyPomodoro {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String DEFAULT_TIME \u003d \"25.0\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static final String DEFAULT_REST \u003d \"5.0\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String TIME_REGEX \u003d \"\\\\d+.?\\\\d*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String defaultTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String restTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String timeLeft;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task runningTask; // runningTask will be null if not running tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Pomodoro(String defaultTime, String restTime, String timeLeft, Task runningTask) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (defaultTime \u003d\u003d null || !defaultTime.matches(TIME_REGEX)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            defaultTime \u003d DEFAULT_TIME;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (restTime \u003d\u003d null || !restTime.matches(TIME_REGEX)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            restTime \u003d DEFAULT_REST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (timeLeft \u003d\u003d null || !timeLeft.matches(TIME_REGEX)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            timeLeft \u003d defaultTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.defaultTime \u003d defaultTime;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.restTime \u003d restTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.timeLeft \u003d timeLeft;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.runningTask \u003d runningTask;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pomodoro(ReadOnlyPomodoro source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                source.getDefaultTime(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                source.getRestTime(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                source.getTimeLeft(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                source.getRunningTask());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Pomodoro() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this(DEFAULT_TIME, DEFAULT_REST, DEFAULT_TIME, null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask(Task runningTask) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.runningTask \u003d runningTask;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setDefaultTime(String defaultTime) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.defaultTime \u003d defaultTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setRestTime(String restTime) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.restTime \u003d restTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTimeLeft(String timeLeft) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timeLeft \u003d timeLeft;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task getRunningTask() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.runningTask;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getDefaultTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.defaultTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getRestTime() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return this.restTime;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getTimeLeft() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.timeLeft;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return String.format("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Hi running task is: %s! my timeleft is %s and my default time is %s\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                runningTask \u003d\u003d null ? \"No tasks!\" : runningTask.toString(), timeLeft, defaultTime);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof Pomodoro)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Pomodoro otherPomodoro \u003d (Pomodoro) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return getDefaultTime().equals(otherPomodoro.getDefaultTime())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 getRestTime().equals(otherPomodoro.getRestTime())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 Objects.equals(getTimeLeft(), otherPomodoro.getTimeLeft()) // can be null"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 Objects.equals(getRunningTask(), otherPomodoro.getRunningTask()); // can be null"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 27,
      "FyonnOh": 4,
      "BransonNg": 57,
      "Permas-Teo": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface ReadOnlyPet {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getName();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getLevel();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getExp();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getMood();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String getLastDoneTaskTime();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "BransonNg": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyPomodoro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface ReadOnlyPomodoro {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task getRunningTask();"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getDefaultTime();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public String getRestTime();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String getTimeLeft();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public interface ReadOnlyStatistics {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns an unmodifiable view of the tasks list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    ObservableList\u003cDayData\u003e getCustomQueue();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    DailyTarget getDailyTarget();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 15,
      "BransonNg": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Unmodifiable view of an task list */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface ReadOnlyTaskList {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns an unmodifiable view of the tasks list. This list will not contain any duplicate"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * tasks."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cString\u003e getSortOrder();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 6,
      "Permas-Teo": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Unmodifiable view of user prefs. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getPetFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getPomodoroFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "Permas-Teo": 1,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.CustomQueue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.DayDataNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Stores information with respect to StatisticsDisplay. Wraps all DayData objects through"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * CustomQueue and stores daily target."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class Statistics implements ReadOnlyStatistics {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_DAILY_TARGET \u003d \"100\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final CustomQueue customQueue;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private DailyTarget dailyTarget;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.init();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dailyTarget \u003d new DailyTarget(DEFAULT_DAILY_TARGET);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Initialises CustomQueue from localDate specified."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param localDate localDate in CustomQueue created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics(LocalDate localDate) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.init(localDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dailyTarget \u003d new DailyTarget(DEFAULT_DAILY_TARGET);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Creates a Statistics using the DayDatas and dailyTarget in {@code toBeCopied}. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics(ReadOnlyStatistics toBeCopied) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dailyTarget \u003d toBeCopied.getDailyTarget();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    //// daily challenge operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Sets daily target to new value."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dailyTargetValue dailyTarget to be set."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDailyTarget(String dailyTargetValue) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(dailyTargetValue);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dailyTarget \u003d new DailyTarget(dailyTargetValue);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Get current daily target value."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @return current daily target value."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DailyTarget getDailyTarget() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return dailyTarget;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Replaces the contents of the list with {@code dayDatas}. */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas(List\u003cDayData\u003e dayDatas) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.setDayDatas(dayDatas);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Resets the existing data of this {@code Statistics} with {@code newData}. */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void resetData(ReadOnlyStatistics newData) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        setDayDatas(newData.getCustomQueue());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    //// customQueue operations"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** reinitialises dayDatas to current day while retaining stored data. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDates() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.updateDataDatesCustom();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Reinitialises dayDatas to localDate while retaining stored data."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param localDate localDate to be reset to."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDates(LocalDate localDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.updateDataDatesCustom(localDate);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        } catch (InvalidTableException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the current DayData object from CustomQueue of the same date with a new DayData"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * object at the same Date."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dayData new DayData object to replace."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDayData(DayData dayData) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            customQueue.updateDayDataCustom(dayData);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (DayDataNotFoundException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Gets DayData object at current date."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param date date to identify DayData object in customQueue."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData getDayDataFromDate(Date date) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return customQueue.getDayDataFromDateCustom(date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (DayDataNotFoundException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // util methods"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Pops oldest dayData at head of the customQueue and adds a dayData to the end of the"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * customQueue."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dayData dayData to be added."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void update(DayData dayData) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.pop();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(dayData);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return \"Statistics: \" + customQueue.toString();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof Statistics)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics otherStatistics \u003d (Statistics) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return getCustomQueue().equals(otherStatistics.getCustomQueue())"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 getDailyTarget().equals(otherStatistics.getDailyTarget());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public ObservableList\u003cDayData\u003e getCustomQueue() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return customQueue.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "Hardoh": 13,
      "Permas-Teo": 161
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TagSet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * HashMap that maps tag to tag frequency Tags are considered to be equivalent when names match,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * ignoring case"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TagSet {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final HashMap\u003cTag, Integer\u003e tagCount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TagSet(ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tagCount.clear();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        populateTag(taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** creates frequency map from Tag to Tag count */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void populateTag(ReadOnlyTaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tagCount.clear();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Task t : taskList.getTaskList()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            addTask(t);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean contains(Tag t) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.tagCount.containsKey(t);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return tagCount.keySet();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Adds new entry initialized to a count of 1 if task is not already in TagSet */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            tagCount.computeIfAbsent(t, (tag) -\u003e 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            tagCount.compute("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    t,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    (tag, count) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        return count + 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Decrements count of tag by 1 and removes tag from TagSet if count is 0 */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void removeTask(Task task) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e tags \u003d task.getTags();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            tagCount.computeIfAbsent(t, (tag) -\u003e 1); // just in case"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            tagCount.compute("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    t,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    (tag, count) -\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        if (count - 1 \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        return count - 1;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Array of tag names */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String[] getTagNames() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ArrayList\u003cString\u003e tagNames \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Tag t : tagCount.keySet().toArray(new Tag[0])) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            tagNames.add(t.tagName);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return tagNames.toArray(new String[0]);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Tag t : tagCount.keySet()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            sb.append(t.toString().toLowerCase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            sb.append(\"\\n\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/TaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.UniqueTaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Wraps all data at the address-book level Duplicates are not allowed (by .isSameTask comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskList implements ReadOnlyTaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final UniqueTaskList tasklist;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final SortedList\u003cTask\u003e sortedTaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cString\u003e sortOrder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        sortedTaskList \u003d new SortedList\u003cTask\u003e(this.tasklist.asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        sortOrder \u003d Optional.empty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates an TaskList using the Tasks in the {@code toBeCopied} */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList(ReadOnlyTaskList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setComparator(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.sortedTaskList.setComparator(comparator);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setSortOrder(String sortOrder) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.sortOrder \u003d Optional.of(sortOrder);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (sortOrder.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.sortOrder \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cString\u003e getSortOrder() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return sortOrder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // list overwrite operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the contents of the task list with {@code tasks}. {@code tasks} must not contain"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * duplicate tasks."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasklist) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.tasklist.setTasks(tasklist);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Resets the existing data of this {@code TaskList} with {@code newData}. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void resetData(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        setTasks(newData.getTaskList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // task-level operations"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns true if a task with the same identity as {@code task} exists in the task list. */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tasklist.contains(task);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Adds a task to the task list. The task must not already exist in the task list. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void addTask(Task t) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist.add(t);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Replaces the given task {@code target} in the list with {@code editedTask}. {@code target}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * must exist in the task list. The task identity of {@code editedTask} must not be the same as"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * another existing task in the task list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(editedTask);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist.setTask(target, editedTask);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Removes {@code key} from this {@code TaskList}. {@code key} must exist in the task list. */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void removeTask(Task key) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tasklist.remove(key);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return tasklist.asUnmodifiableObservableList().size() + \" tasks\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return sortedTaskList;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof TaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 tasklist.equals(((TaskList) other).tasklist));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return tasklist.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 26,
      "BransonNg": 35,
      "Permas-Teo": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents User\u0027s preferences. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path taskListFilePath \u003d Paths.get(\"data\", \"tasklist.json\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path petFilePath \u003d Paths.get(\"data\", \"pet.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path pomodoroFilePath \u003d Paths.get(\"data\", \"pomodoro.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Path statisticsFilePath \u003d Paths.get(\"data\", \"statistics.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a {@code UserPrefs} with default values. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a {@code UserPrefs} with the prefs in {@code userPrefs}. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setTaskListFilePath(newUserPrefs.getTaskListFilePath());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setPetFilePath(newUserPrefs.getPetFilePath());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        setPomodoroFilePath(newUserPrefs.getPomodoroFilePath());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        setStatisticsFilePath(newUserPrefs.getStatisticsFilePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskListFilePath;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(taskListFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskListFilePath \u003d taskListFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getPetFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return petFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setPetFilePath(Path petFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(petFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.petFilePath \u003d petFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getPomodoroFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return pomodoroFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setPomodoroFilePath(Path pomodoroFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(pomodoroFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.pomodoroFilePath \u003d pomodoroFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setStatisticsFilePath(Path statisticsFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(statisticsFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsFilePath \u003d statisticsFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { // this handles null as well."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 taskListFilePath.equals(o.taskListFilePath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 petFilePath.equals(o.petFilePath)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 pomodoroFilePath.equals(o.pomodoroFilePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 statisticsFilePath.equals(o.statisticsFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return Objects.hash("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                guiSettings, taskListFilePath, petFilePath, pomodoroFilePath, statisticsFilePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        sb.append(\"\\nLocal task list file location : \" + taskListFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        sb.append(\"\\nLocal pet file location : \" + petFilePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        sb.append(\"\\nLocal pomodoro file location : \" + pomodoroFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        sb.append(\"\\nLocal statistics file location : \" + statisticsFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 23,
      "Permas-Teo": 27,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/CustomQueue.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.time.temporal.ChronoUnit.DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.DayDataNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * A list of dayDatas that enforces the following table constraints: 1. Size of CustomQueue must be"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * of CONSTANT_SIZE after each method call through Statistics. 2. DayData days in CustomQueue must"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * be continuous between its elements."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * \u003cp\u003eSupports a minimal set of operations."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class CustomQueue implements Iterable\u003cDayData\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"Size of CustomQueue must be of CONSTANT_SIZE, DayData days in CustomQueue must be continuous between its elements.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final int CONSTANT_SIZE \u003d 7;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final ObservableList\u003cDayData\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final ObservableList\u003cDayData\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Initialises empty DayDatas for past {@code MAX_SIZE} days from today. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void init() throws InvalidTableException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate currDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.init(currDate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Initialises empty DayDatas for past {@code MAX_SIZE} days from a localDate specified."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param localDate latest localDate to start with."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws InvalidTableException"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void init(LocalDate localDate) throws InvalidTableException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate currDate \u003d localDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d CONSTANT_SIZE - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LocalDate tempLocalDate \u003d currDate.minusDays(i);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            String tempLocalDateStr \u003d tempLocalDate.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date tempDate \u003d new Date(tempLocalDateStr);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData dayData \u003d new DayData(tempDate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            this.add(dayData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(internalList)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Reinitialises dayDataList to current day while retaining stored data. */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDatesCustom() throws InvalidTableException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate todayLocalDate \u003d LocalDate.now();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.updateDataDatesCustom(todayLocalDate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Reinitialises dayDataList to current day while retaining stored data."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param localDate latest localDate to start with."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws InvalidTableException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDatesCustom(LocalDate localDate) throws InvalidTableException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData currDayData \u003d this.getLatestDayData();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate currLocalDate \u003d currDayData.getDate().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        long daysBetween \u003d DAYS.between(localDate, currLocalDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (daysBetween \u003e CONSTANT_SIZE) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            this.init();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            while (!currLocalDate.equals(localDate)) { // keep adding new date from last date"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.pop(); // pop oldest day from head of queue"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                currLocalDate \u003d currLocalDate.plusDays(1); // create new day LocalDate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String currLocalDateStr \u003d currLocalDate.toString(); // construct DayData"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Date tempDate \u003d new Date(currLocalDateStr);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                DayData tempDayData \u003d new DayData(tempDate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.add(tempDayData); // add to queue"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                assert (internalList.size() \u003c\u003d CONSTANT_SIZE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(internalList)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the current DayData object from CustomQueue of the same date with a new DayData"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * object at the same Date."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param dayData new DayData object to replace."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDayDataCustom(DayData dayData) throws DayDataNotFoundException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(dayData);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Date currDate \u003d dayData.getDate();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d internalList.size() - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData currDayData \u003d internalList.get(i);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date currDayDataDate \u003d currDayData.getDate();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (currDayDataDate.equals(currDate)) { // correct date"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                this.setDayData(currDayData, dayData); // replace currDayData with dayData"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        throw new DayDataNotFoundException(); // dayData not found"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Gets DayData object at current date."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param date date to identify DayData object in internalList."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData getDayDataFromDateCustom(Date date) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (int i \u003d internalList.size() - 1;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                i \u003e\u003d 0;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                i--) { // Iterate from latest data as it is accessed most often."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData currDayData \u003d internalList.get(i);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date currDayDataDate \u003d currDayData.getDate();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (currDayDataDate.equals(date)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                return currDayData;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        throw new DayDataNotFoundException(); // dayData not found"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Adds a dayData to the end of the queue. */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void add(DayData toAdd) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Removes oldest DayData from head of the queue. */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void pop() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assert (internalList.size() \u003e 0);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.remove(0);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the dayData {@code target} in the list with {@code editedDayData}. {@code target}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * must exist in the list. The dayData identity of {@code editedDayData} must not be the same as"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * another existing task in the list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData(DayData target, DayData editedDayData) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireAllNonNull(target, editedDayData);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new DayDataNotFoundException();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.set(index, editedDayData);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Replaces the contents of this list with {@code dayDatas}. {@code dayDatas} must not break"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * table constraints"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas(List\u003cDayData\u003e dayDatas) throws InvalidTableException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireAllNonNull(dayDatas);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(dayDatas)) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.setAll(dayDatas);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Replaces the contents of this list with {@code replacement}\u0027s internalList."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param replacement CustomQueue\u0027s internalList to replace current internalList."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas(CustomQueue replacement) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns the internalList as an unmodifiable {@code ObservableList}. */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public ObservableList\u003cDayData\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Get latest dayData in the internalList. */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private DayData getLatestDayData() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.get(CONSTANT_SIZE - 1);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String temp \u003d \"\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d 0; i \u003c internalList.size(); i++) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            temp +\u003d internalList.get(i).toString();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            temp +\u003d \"\\n\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Iterator\u003cDayData\u003e iterator() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof CustomQueue // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 internalList.equals(((CustomQueue) other).internalList));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if {@code internalList} table constraints are enforced. */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean tableConstraintsAreEnforced(List\u003cDayData\u003e dayDatas) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (dayDatas \u003d\u003d null) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (dayDatas.size() !\u003d CONSTANT_SIZE) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false; // table is not size {@code CONSTANT_SIZE}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData dayDataCheckPointer \u003d dayDatas.get(0); // from list"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Date dateCheckPointer \u003d dayDataCheckPointer.getDate();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate localDateCheckPointer \u003d dateCheckPointer.value;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (DayData dayData : dayDatas) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Date currentDate \u003d dayData.getDate();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LocalDate currentLocalDate \u003d currentDate.value;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            if (!localDateCheckPointer.equals(currentLocalDate)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                return false; // days in dayDatas are not continuous"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            localDateCheckPointer \u003d localDateCheckPointer.plusDays(1);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 14,
      "Permas-Teo": 237,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a DayDaya\u0027s date in the task list. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"Date must be in the form yyyy-mm-dd and is a valid date in the Gregorian calender\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DateTimeFormatter dateFormatter \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DateTimeFormatter.ofPattern(\"uuuu-MM-dd\", Locale.US)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate localDate \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d localDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if a given string is a valid date. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dateFormatter.parse(test);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns dateString to display for user output. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toPrint() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String dateString \u003d value.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return dateString.substring(5, 7) + \"/\" + dateString.substring(8, 10);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/DayData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayData {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final PomDurationData pomDurationData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final TasksDoneData tasksDoneData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData(Date date, PomDurationData pomDurationData, TasksDoneData tasksDoneData) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d pomDurationData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d tasksDoneData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData(Date date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d new PomDurationData();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d new TasksDoneData();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomDurationData getPomDurationData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return pomDurationData;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public TasksDoneData getTasksDoneData() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return tasksDoneData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * notion of equality between two tasks."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!(other instanceof DayData)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData otherDayData \u003d (DayData) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return otherDayData.getDate().equals(getDate())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 otherDayData.getPomDurationData().equals(getPomDurationData())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u0026\u0026 otherDayData.getTasksDoneData().equals(getTasksDoneData());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return \"DayData: \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                + this.getDate()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                + \" pom: \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                + getPomDurationData()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                + \" tasksDone: \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                + getTasksDoneData();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 6,
      "Permas-Teo": 54,
      "BransonNg": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/PomDurationData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a DayData\u0027s PomDurationData number. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidPomDurationData(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PomDurationData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"PomDurationData is an integer greater than or equals to 0 and less than 1440\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code PomDurationData}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomDurationData() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code PomDurationData}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param pomDurationData A valid PomDurationData."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomDurationData(String pomDurationData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(pomDurationData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        checkArgument(isValidPomDurationData(pomDurationData), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d Integer.valueOf(pomDurationData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if a given string is a valid PomDurationData. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean isValidPomDurationData(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int i \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return (i \u003e\u003d 0 \u0026\u0026 i \u003c 1440);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof PomDurationData // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 value.equals(((PomDurationData) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/TasksDoneData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a DayData\u0027s TasksDoneData number. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidTasksDoneData(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class TasksDoneData {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"TasksDoneData is an integer greater than or equals to 0\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code TasksDoneData}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public TasksDoneData() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code TasksDoneData}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param taskDoneData A valid TasksDoneData."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public TasksDoneData(String taskDoneData) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(taskDoneData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        checkArgument(isValidTasksDoneData(taskDoneData), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        value \u003d Integer.valueOf(taskDoneData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns true if a given string is a valid TasksDoneData. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static boolean isValidTasksDoneData(String test) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int i \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return i \u003e\u003d 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                || (other instanceof TasksDoneData // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u0026\u0026 value.equals(((TasksDoneData) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/exceptions/DayDataNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Signals that the operation is unable to find the specified task. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayDataNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 3,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/dayData/exceptions/InvalidTableException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Signals that some given data does not fulfill some constraints. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class InvalidTableException extends Exception {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** @param message should contain relevant information on the failed constraint(s) */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public InvalidTableException(String message) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/settings/DailyTarget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.model.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class DailyTarget implements Comparable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \"Daily Target should be more than 0 mins and does not exceed 720 mins, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // 720/60 \u003d 12. It is no longer productive to be doing work straight for more than 12 hours per"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // day"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \"^([0-9]|[1-9][0-9]|[1-6][0-9][0-9]|7[0-1][0-9]|720)$\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public DailyTarget(String dailyTarget) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(dailyTarget);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        value \u003d dailyTarget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    /** Returns true if a given string is a valid pomDuration number. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static boolean isValidDailyTarget(String test) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return value.isEmpty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                || (other instanceof DailyTarget // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 value.equals(((DailyTarget) other).value)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!(other instanceof DailyTarget)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        DailyTarget otherPriority \u003d (DailyTarget) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return otherPriority.value.compareTo(this.value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 54,
      "Permas-Teo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/settings/PetName.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.model.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class PetName implements Comparable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \"Pet Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetName(String petName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(petName);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        fullName \u003d petName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static boolean isValidPetName(String test) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return fullName.isEmpty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                || (other instanceof PetName // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 fullName.equals(((PetName) other).fullName)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public int compareTo(Object obj) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!(obj instanceof PetName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        PetName other \u003d (PetName) obj;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return other.fullName.compareToIgnoreCase(this.fullName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/settings/PomDuration.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.model.settings;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class PomDuration implements Comparable {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \"Pomodoro duration should be in minutes (up to 1dp) and not blank. It should be more than 0 mins and not exceed 60 mins.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \"^([1-5][0-9](\\\\.[0-9])?|[1-9](\\\\.[0-9])?|60(\\\\.[0])?)$\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PomDuration(String pomDuration) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireNonNull(pomDuration);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        value \u003d pomDuration;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    /** Returns true if a given string is a valid pomDuration number. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static boolean isValidPomDuration(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return value.isEmpty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                || (other instanceof PomDuration // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u0026\u0026 value.equals(((PomDuration) other).value)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!(other instanceof PomDuration)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        PomDuration otherPriority \u003d (PomDuration) other;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return otherPriority.value.compareTo(this.value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a Tag in the task list. Guarantees: immutable; name is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid tag name. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 tagName.equalsIgnoreCase(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return tagName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Format state as text for viewing. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 1,
      "BransonNg": 5,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Represents a Task\u0027s address in the task list. Guarantees: immutable; is valid as declared in"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \"Description can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs an {@code Description}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        // requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Returns true if a given string is a valid description. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 11,
      "artlee06": 1,
      "Permas-Teo": 4,
      "BransonNg": 1,
      "-": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Done.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents a Task\u0027s Done in the task list. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * #isValidDone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Done implements Comparable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Done should be a simple Boolean \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DONE \u003d \"Y\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String NOT_DONE \u003d \"N\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"Y|N\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Boolean isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Constructs a {@code Done}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param isDone A valid Done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Done(String isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(isDone);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        checkArgument(isValidDone(isDone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.isDone \u003d isDone.equals(DONE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Done() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static boolean isValidDone(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Boolean getIsDone() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return isDone ? DONE : NOT_DONE;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof Done // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 isDone \u003d\u003d (((Done) other).isDone)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return isDone.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof Done)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Done otherDone \u003d (Done) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.isDone.compareTo(otherDone.isDone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 66,
      "Permas-Teo": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents a Task\u0027s name in the task list. Guarantees: immutable; is valid as declared in {@link"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Name implements Comparable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object obj) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(obj instanceof Name)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Name other \u003d (Name) obj;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.fullName.compareToIgnoreCase(other.fullName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "BransonNg": 10,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** Tests that a {@code Task}\u0027s {@code Name} matches any of the keywords given. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final int threshold \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tags \u003d tags;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tags \u003d new HashSet();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Predicate has been enhanced to return true if the final score \u003c 2. final score is calculated"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * by nameScore - tagCount nameScore is given by getEditDistacne tagCount is given by countTag"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * function"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean test(Task task) { // change test to return an int value as the edit distance"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        int score \u003d getEditDistance(task);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        boolean hasTag \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (task.hasTag(t)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                hasTag \u003d true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return score \u003c\u003d threshold || hasTag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * returns a comparator by getting the score of a task. Comaprator sorts tasks in ascending"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * order of task score."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Comparator\u003cTask\u003e getSearchOrderComparator() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Comparator\u003c\u003e() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public int compare(Task task1, Task task2) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                int score1 \u003d getEditDistance(task1) - countTag(task1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                int score2 \u003d getEditDistance(task2) - countTag(task2);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (score1 \u003d\u003d score2) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return score1 \u003c score2 ? -1 : 1;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Counts the number of tags in the task that match a tag given by the user in the find"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * parameters"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private int countTag(Task task) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Tag t : tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (task.hasTag(t)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                count +\u003d 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return count;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * A chunk is a subsequence of the taskname that has as many words as in the search phrase. We"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * go through all chunks of the task name and calculate a score for each chunk. The minimum of"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * all chunk scores is then taken as the name score"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * \u003cp\u003eChunk score is calculated by: 1. A partial name match where input matches start of chunk"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * \u003d\u003e score set to 1 2. A match where chunk and input have edit distance \u003c 2 \u003d\u003e score set to 1"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * 3. A full chunk between input and task name \u003d\u003e score set to 0"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * \u003cp\u003eThe edit distance threshold is set at 2 so that phrases that are too dissimilar will not"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * show up."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private int getEditDistance(Task task) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (keywords.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return threshold + 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        int score \u003d threshold + 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String joinnedKeywords \u003d String.join(\" \", keywords).toLowerCase();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String taskName \u003d task.getName().fullName.toLowerCase();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] splitTaskName \u003d taskName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 0; i \u003c splitTaskName.length; i++) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            String joinnedPhrase \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String.join(\" \", Arrays.copyOfRange(splitTaskName, i, i + keywords.size()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (StringUtil.keywordMatchStartOfPhrase(joinnedKeywords, joinnedPhrase)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                score \u003d Math.min(1, score);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (joinnedKeywords.equals(joinnedPhrase)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                score \u003d Math.min(0, score);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (joinnedKeywords.length() \u003e 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                int currScore \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        StringUtil.levenshteinDistanceCompare("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                joinnedPhrase, joinnedKeywords, threshold);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                if (currScore \u003e\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    score \u003d Math.min(score, currScore);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return score;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 keywords.equals("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                ((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "FyonnOh": 2,
      "artlee06": 16,
      "BransonNg": 91,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Represents a Task\u0027s priority number in the task list. Guarantees: immutable; is valid as declared"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * in {@link #isValidPriority(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Priority implements Comparable {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"Priority can only be one of these numbers: {1,2,3}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-3]\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a {@code Priority}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param priority A valid priority number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Priority(String priority) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if a given string is a valid priority number. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof Priority)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Priority otherPriority \u003d (Priority) other;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return otherPriority.value.compareTo(this.value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "BransonNg": 54,
      "Permas-Teo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/RecurType.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "/** Enum for Recurring type, either daily or weekly. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public enum RecurType {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    DAILY {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public long getInterval() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return dayIntervalMilliseconds; // for testing"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public long getDayInterval() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return dayIntervalDays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    WEEKLY {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public long getInterval() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return weekIntervalMilliseconds;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public long getDayInterval() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return weekIntervalDays;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    },"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    TEST {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public long getInterval() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return 60000l;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public long getDayInterval() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return weekIntervalDays;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    ;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final long weekIntervalMilliseconds \u003d 1000l * 60 * 60 * 24 * 7;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final long weekIntervalDays \u003d 7;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final long dayIntervalMilliseconds \u003d 1000l * 60 * 60 * 24;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final long dayIntervalDays \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Gets time interval in days based on recurring type."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return long"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public abstract long getDayInterval();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Gets time interval in milliseconds based on recurring type."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return long"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public abstract long getInterval();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Recurring.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": " * Represents the task\u0027s recurring attribute and functionality."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": " * @author Arthur Lee"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public class Recurring {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final RecurType type;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final LocalDateTime referenceDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \"Recurring should be in the format d or w or t, for eg: rec/d\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String MESSAGE_RECURRING_TASK_SUCCESS \u003d \"Recurring task has been reset:\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[dwt]\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final DateTimeFormatter stringFormatter \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy@HH:mm\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Constructor for recurring instance using String only read from JsonStorage. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Recurring(String recurringStringStorage) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String recurTypeString \u003d recurringStringStorage.substring(0, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String dateTimeString \u003d recurringStringStorage.substring(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.type \u003d parseRecurType(recurTypeString);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.referenceDateTime \u003d parseDateTime(dateTimeString);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Constructor for recurring instance using user input for recurring type as well as reference"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * LocalDateTime for when recurring is added."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Recurring(String recurringString, LocalDateTime referenceDateTime)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.type \u003d parseRecurType(recurringString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.referenceDateTime \u003d referenceDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Parses dateTimeString to get LocalDateTime. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static LocalDateTime parseDateTime(String dateTimeString) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return stringFormatter.parse(dateTimeString, LocalDateTime::from);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Parses recurring type string to return RecurType enum. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static RecurType parseRecurType(String recurringString) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (recurringString.equals(\"d\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return RecurType.DAILY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else if (recurringString.equals(\"w\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return RecurType.WEEKLY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else if (recurringString.equals(\"t\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return RecurType.TEST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new ParseException(Recurring.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Determines whether reminder should be updated during recurring behaviour based on whether the"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * reminder has been triggered yet."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static boolean shouldUpdateReminder(LocalDateTime reminderDateTime) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Duration duration \u003d Duration.between(LocalDateTime.now(), reminderDateTime);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        boolean hasPassed \u003d duration.getSeconds() \u003c 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return hasPassed;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Returns boolean on whether the task should be updated or not */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static boolean shouldUpdateTask(Task t) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        boolean isDone \u003d t.getDone().getIsDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cReminder\u003e optReminder \u003d t.getOptionalReminder();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        boolean updateReminder \u003d false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optReminder.isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            LocalDateTime reminderDateTime \u003d optReminder.get().getDateTime();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            updateReminder \u003d shouldUpdateReminder(reminderDateTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return isDone || updateReminder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Updates reminder time based on the time interval indicated by the user. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public LocalDateTime getUpdatedReminderTime(Reminder currentReminder) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime currentDateTime \u003d currentReminder.getDateTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (shouldUpdateReminder(currentDateTime)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            currentDateTime \u003d currentDateTime.plusDays(type.getDayInterval());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return currentDateTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Returns true if a given string is a valid name. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static boolean isValidRecurring(String test) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Returns Daily or Weekly for display on the card. */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public String displayRecurring() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return StringUtil.getTitleCase(type.name());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Gets delay for the first trigger of the recurring based on the reference date time. For"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * testing the delay is set as 60 seconds."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public long getDelayToFirstTrigger() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (type \u003d\u003d RecurType.TEST) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return 60000l;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long delay \u003d Duration.between("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        LocalDateTime.now(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        referenceDateTime.plusDays(type.getDayInterval()))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                .getSeconds();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return delay \u003e\u003d 0 ? delay * 1000 : 0;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Gets the time interval in milliseconds based on the recurring type. */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public long getPeriod() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return type.getInterval();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String typeString \u003d type.name().substring(0, 1).toLowerCase();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        String dateTimeString \u003d referenceDateTime.format(stringFormatter);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return typeString + dateTimeString;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "artlee06": 123,
      "BransonNg": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Reminder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": " * Represents the task\u0027s reminder and its functionality."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": " *"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": " * @author Arthur Lee"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": " * @version 1.4"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class Reminder implements Comparable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"Reminder should be in format DD/MM/YY@HH:mm eg 04/11/20@10:30\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_PAST \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \"Operation would result in invalid reminder due to time set being in the past.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final DateTimeFormatter stringFormatter \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd/MM/yy@HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final LocalDateTime reminderDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private boolean hasFired;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private long delay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Constructs a reminder with the corresponding LocalDateTime. By default its hasFired is set to"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * false and delay is the maximum value possible. On construction, delay is calculated and set."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param reminderDateTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Reminder(LocalDateTime reminderDateTime) throws InvalidReminderException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminderDateTime \u003d reminderDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.hasFired \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.delay \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        setDelay();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Constructs a reminder with the dateTimeString read from user input. On construction, delay is"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * calculated and set."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param dateTimeString"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Reminder(String dateTimeString) throws InvalidReminderException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminderDateTime \u003d stringFormatter.parse(dateTimeString, LocalDateTime::from);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.hasFired \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.delay \u003d Integer.MAX_VALUE;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        setDelay();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Calculates the time delay between the current time and the time indicated by user for the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * reminder."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param currentTime"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param reminderDateTime"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static long calculateDelay(LocalDateTime currentTime, LocalDateTime reminderDateTime) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Duration duration \u003d Duration.between(currentTime, reminderDateTime);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long delay \u003d duration.getSeconds();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return delay;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Setter for hasFired. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void setHasFired() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.hasFired \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Gets the hasFired boolean attribute */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public boolean getHasFired() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return hasFired;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Boolean check valid reminder when parsing the string input from the user."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param dateTimeString"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static boolean isValidReminder(String dateTimeString) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            stringFormatter.parse(dateTimeString);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Sets the reminder based on the time delay calculated. If it has fired then nothing is"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * triggered."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @throws InvalidReminderException if the time delay is negative and has not been fired before."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private void setDelay() throws InvalidReminderException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long timeDelay \u003d calculateDelay(LocalDateTime.now(), reminderDateTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (timeDelay \u003c 0) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            if (!hasFired) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                throw new InvalidReminderException();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.delay \u003d timeDelay;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Getter for reminder\u0027s LocalDateTime. */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public LocalDateTime getDateTime() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return reminderDateTime;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Getter for reminder\u0027s time delay. */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public long getDelay() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return delay;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Formats the string for displaying on the taskcard."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return String"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public String displayReminder() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        DateTimeFormatter customFormatter \u003d DateTimeFormatter.ofPattern(\"dd LLLL \u0027at\u0027 h:mma\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return reminderDateTime.format(customFormatter);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return reminderDateTime.format(stringFormatter);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Overrides compareTo method to use time delay as point of comparison. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public int compareTo(Object other) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!(other instanceof Reminder)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Reminder otherReminder \u003d (Reminder) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long diffFromToday \u003d calculateDelay(currentDateTime, this.reminderDateTime);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long otherDiffFromToday \u003d calculateDelay(currentDateTime, otherReminder.reminderDateTime);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        System.out.println(diffFromToday);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        System.out.println(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (diffFromToday \u003c otherDiffFromToday) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (diffFromToday \u003c 0) { // if already over, put it lower in the list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else if (otherDiffFromToday \u003c diffFromToday) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (otherDiffFromToday \u003c 0) { // if already over put it lower in the list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "artlee06": 129,
      "BransonNg": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.util.TaskBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Represents a Task in the task list. Guarantees: details are present and not null, field values"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final Done done;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final Optional\u003cReminder\u003e optionalReminder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final Optional\u003cRecurring\u003e optionalRecurring;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Every field must be present and not null. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Priority priority,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Description description,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Done done,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            Optional\u003cReminder\u003e optionalReminder,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Optional\u003cRecurring\u003e optionalRecurring) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d optionalReminder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalRecurring \u003d optionalRecurring;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        triggerReminderIfPresent();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** With done and no reminder */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Task(Name name, Priority priority, Description description, Done done, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalRecurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** With done, no reminder but with recurring */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Task("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Priority priority,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Description description,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Done done,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Optional\u003cRecurring\u003e optionalRecurring) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalRecurring \u003d optionalRecurring;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // without done provided"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Name name,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Priority priority,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Description description,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            Optional\u003cReminder\u003e optionalReminder,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            Optional\u003cRecurring\u003e optionalRecurring) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.done \u003d new Done();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d optionalReminder;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalRecurring \u003d optionalRecurring;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        triggerReminderIfPresent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // without Reminder or done provided"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Task(Name name, Priority priority, Description description, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        requireAllNonNull(name, priority, description, tags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d new Done();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.optionalRecurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Gets time delay for first trigger of recurring behaviour."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return time delay in long."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public long getDelayToFirstTrigger() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.optionalRecurring.get().getDelayToFirstTrigger();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Gets time delay for recurring based on the type in milliseconds."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return time delay in long."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public long getRecurPeriod() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this.optionalRecurring.get().getPeriod();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Gets the new version of the task after recurring behaviour, namely with done set to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * unfinished and reminder updated based on time interval."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @return updated version of task."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Task getRecurredTask() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Recurring recurring \u003d optionalRecurring.get();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optionalReminder.isPresent()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            Reminder reminder \u003d optionalReminder.get();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            LocalDateTime newDateTime \u003d recurring.getUpdatedReminderTime(reminder);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return new TaskBuilder(this).withDone(new Done()).withReminder(newDateTime).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new TaskBuilder(this).withDone(new Done()).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Triggers reminder behaviour if there is a reminder present in the task. */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void triggerReminderIfPresent() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optionalReminder.isPresent()) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            Reminder reminder \u003d optionalReminder.get();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            if (!reminder.getHasFired()) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                MainWindow.triggerReminder(reminder, name.toString(), description.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Done getDone() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Getter for the optional reminder. */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Optional\u003cReminder\u003e getOptionalReminder() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return optionalReminder;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Getter for the optional recurring. */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public Optional\u003cRecurring\u003e getOptionalRecurring() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return optionalRecurring;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public boolean hasTag(Tag t) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return tags.contains(t);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException} if"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * modification is attempted."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if both tasks of the same name have at least one other identity field that is"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the same. This defines a weaker notion of equality between two tasks."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean isSameTask(Task otherTask) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (otherTask \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return otherTask !\u003d null \u0026\u0026 otherTask.getName().equals(getName());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns true if both tasks have the same identity and data fields. This defines a stronger"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * notion of equality between two tasks."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return otherTask.getName().equals(getName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u0026\u0026 otherTask.getTags().equals(getTags());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return Objects.hash(name, priority, description, tags);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(\",\\nPriority: \")"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(getPriority())"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(\",\\nDescription: \")"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .append(\",\\nTags: \");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optionalReminder.isPresent()) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            String reminderString \u003d optionalReminder.get().displayReminder();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            builder.append(\",\\nReminder: \").append(reminderString);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (optionalRecurring.isPresent()) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            String recurrString \u003d optionalRecurring.get().displayRecurring();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            builder.append(\",\\nRecurring: \").append(recurrString);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 11,
      "FyonnOh": 11,
      "artlee06": 98,
      "BransonNg": 68,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/UniqueTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * A list of tasks that enforces uniqueness between its elements and does not allow nulls. A task is"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * considered unique by comparing using {@code Task#isSameTask(Task)}. As such, adding and updating"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * of tasks uses Task#isSameTask(Task) for equality so as to ensure that the task being added or"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * updated is unique in terms of identity in the UniqueTaskList. However, the removal of a task uses"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Task#equals(Object) so as to ensure that the task with exactly the same fields will be removed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * \u003cp\u003eSupports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * @see Task#isSameTask(Task)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class UniqueTaskList implements Iterable\u003cTask\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final ObservableList\u003cTask\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if the list contains an equivalent task as the given argument. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean contains(Task toCheck) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Adds a task to the list. The task must not already exist in the list. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void add(Task toAdd) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void sort(Comparator\u003cTask\u003e comparator) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        internalList.sort(comparator);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Replaces the task {@code target} in the list with {@code editedTask}. {@code target} must"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * exist in the list. The task identity of {@code editedTask} must not be the same as another"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * existing task in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireAllNonNull(target, editedTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!target.isSameTask(editedTask) \u0026\u0026 contains(editedTask)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.set(index, editedTask);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Removes the equivalent task from the list. The task must exist in the list. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void remove(Task toRemove) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new TaskNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTasks(UniqueTaskList replacement) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Replaces the contents of this list with {@code tasks}. {@code tasks} must not contain"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * duplicate tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTasks(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        requireAllNonNull(tasks);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!tasksAreUnique(tasks)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new DuplicateTaskException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        internalList.setAll(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns the backing list as an unmodifiable {@code ObservableList}. */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public ObservableList\u003cTask\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Iterator\u003cTask\u003e iterator() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                || (other instanceof UniqueTaskList // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueTaskList) other).internalList));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if {@code tasks} contains only unique tasks. */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private boolean tasksAreUnique(List\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size() - 1; i++) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tasks.size(); j++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (tasks.get(i).isSameTask(tasks.get(j))) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 115,
      "BransonNg": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/DuplicateTaskException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * Signals that the operation will result in duplicate Tasks (Tasks are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class DuplicateTaskException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public DuplicateTaskException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        super(\"Operation would result in duplicate tasks\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 10,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/InvalidReminderException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Signals that the reminder\u0027s time is before the current time */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public class InvalidReminderException extends ParseException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public InvalidReminderException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        super(Reminder.MESSAGE_CONSTRAINTS_PAST);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 10,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/task/exceptions/TaskNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Signals that the operation is unable to find the specified task. */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains utility methods for populating {@code TaskList} with sample data. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK1 \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"Homework 10\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Pages 100 - 112\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withTags(\"MA1521\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK2 \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"Lab 3\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Introduction to UDP\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withTags(\"help\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK3 \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"mum tells me to do Tutorial 1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Introduction to Calculus\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withTags(\"MA1521\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK4 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"Buy milk\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Very hungry\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK5 \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"mum tells me to feed cat\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Cat is making noise\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK6 \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"mum tells me to run\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Complete 2.4km run!\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Task TASK7 \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withName(\"Gym\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .withDescription(\"Complete 100 sets of pushups\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static Task[] getSampleTasks() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Task[] {TASK1, TASK2, TASK3, TASK4, TASK5, TASK6, TASK7};"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static ReadOnlyTaskList getSampleTaskList() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList sampleTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (Task sampleTask : getSampleTasks()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            sampleTaskList.addTask(sampleTask);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return sampleTaskList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns a tag set containing the list of strings given. */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return Arrays.stream(strings).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 57,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/TaskBuilder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class to help with building Task objects. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Default homework\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Default Pages 1 and 2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DEFAULT_DONE \u003d \"N\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Done done;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cReminder\u003e reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private Optional\u003cRecurring\u003e recurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d new Done(DEFAULT_DONE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Initializes the TaskBuilder with the data of {@code taskToCopy}. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d taskToCopy.getDone();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        reminder \u003d taskToCopy.getOptionalReminder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        recurring \u003d taskToCopy.getOptionalRecurring();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Name} of the {@code Task} that we are building. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Address} of the {@code Task} that we are building. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Priority} of the {@code Task} that we are building. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d new Done(Done.DONE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withDone(Done done) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withReminder(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.of(new Reminder(dateTime));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.of(new Reminder(dateTime));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public TaskBuilder withRecurring(String recurringString, LocalDateTime referenceDateTime) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurring \u003d Optional.of(new Recurring(recurringString, referenceDateTime));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return new Task(name, priority, description, done, tags, reminder, recurring);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 13,
      "BransonNg": 107
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDayData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Jackson-friendly version of {@link DayData}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "class JsonAdaptedDayData {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"DayData\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String pomDurationData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String tasksDoneData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedDayData} with the given task details. */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonAdaptedDayData("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"pomDurationData\") String pomDurationData,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"tasksDoneData\") String tasksDoneData) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d pomDurationData;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d tasksDoneData;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonAdaptedDayData(DayData source) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomDurationData \u003d source.getPomDurationData().toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        tasksDoneData \u003d source.getTasksDoneData().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code DayData} object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *     dayData."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (pomDurationData \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT, PomDurationData.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!PomDurationData.isValidPomDurationData(pomDurationData)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(PomDurationData.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final PomDurationData modelPomDurationData \u003d new PomDurationData(pomDurationData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (tasksDoneData \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            MISSING_FIELD_MESSAGE_FORMAT, TasksDoneData.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!TasksDoneData.isValidTasksDoneData(tasksDoneData)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(TasksDoneData.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        final TasksDoneData modelTasksDoneData \u003d new TasksDoneData(tasksDoneData);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new DayData(modelDate, modelPomDurationData, modelTasksDoneData);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "Permas-Teo": 73,
      "BransonNg": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPet.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.InvalidPetException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PetName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "@JsonRootName(value \u003d \"pet\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "class JsonAdaptedPet {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pet\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_PETNAME_MESSAGE \u003d \"invalid Pet name input\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_EXP_MESSAGE \u003d \"Invalid experience input\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_LEVEL_MESSAGE \u003d \"Invalid level input\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_MOOD_MESSAGE \u003d \"Invalid mood input\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_LASTDONETASKTIME_MESSAGE \u003d \"Invalid lastdonetasktime input\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String exp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String level;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final String mood;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final String lastDoneTaskTime;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTask} with the given task details. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public JsonAdaptedPet("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"exp\") String exp,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"level\") String level,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"mood\") String mood,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"lastDoneTaskTime\") String lastDoneTaskTime) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.exp \u003d exp;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.level \u003d level;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.lastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedPet(ReadOnlyPet source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        name \u003d source.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        exp \u003d source.getExp();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        level \u003d source.getLevel();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        mood \u003d source.getMood();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        lastDoneTaskTime \u003d source.getLastDoneTaskTime();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public ReadOnlyPet toModelType() throws IllegalValueException, InvalidPetException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"name\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!PetName.isValidPetName(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new InvalidPetException(INVALID_PETNAME_MESSAGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final String modelName \u003d name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (level \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"level\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!(level.equals(\"1\") || level.equals(\"2\") || level.equals(\"3\"))) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new InvalidPetException(INVALID_LEVEL_MESSAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final String modelLevel \u003d level;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (exp \u003d\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"exp\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        int expInt \u003d Integer.parseInt(exp);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (level.equals(\"1\")) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (!(expInt \u003e\u003d 0 \u0026\u0026 expInt \u003c 100)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                throw new InvalidPetException(INVALID_EXP_MESSAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else if (level.equals(\"2\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (!(expInt \u003e\u003d 100 \u0026\u0026 expInt \u003c 200)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                throw new InvalidPetException(INVALID_EXP_MESSAGE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (!(expInt \u003e\u003d 200)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                throw new InvalidPetException(INVALID_EXP_MESSAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final String modelExp \u003d exp;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (mood \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"mood\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (!(mood.equals(\"HAPPY\") || mood.equals(\"HANGRY\"))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new InvalidPetException(INVALID_MOOD_MESSAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final String modelMood \u003d mood;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            LocalDateTime.parse(lastDoneTaskTime);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new InvalidPetException(INVALID_LASTDONETASKTIME_MESSAGE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final String modelLastDoneTaskTime \u003d lastDoneTaskTime;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new Pet(modelName, modelExp, modelLevel, modelMood, modelLastDoneTaskTime);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 83,
      "BransonNg": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPomodoro.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "@JsonRootName(value \u003d \"pomodoro\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "class JsonAdaptedPomodoro {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Pomodoro\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String defaultTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private String restTime;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String timeLeft;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private JsonAdaptedTask runningTask;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTask} with the given task details. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedPomodoro("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"defaultTime\") String defaultTime,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            @JsonProperty(\"restTime\") String restTime,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"timeLeft\") String timeLeft,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @JsonProperty(\"runningTask\") JsonAdaptedTask runningTask) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.defaultTime \u003d defaultTime;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.restTime \u003d restTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.timeLeft \u003d timeLeft;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.runningTask \u003d runningTask;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonAdaptedPomodoro(ReadOnlyPomodoro source) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.defaultTime \u003d source.getDefaultTime();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.restTime \u003d source.getRestTime();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.timeLeft \u003d source.getTimeLeft();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (source.getRunningTask() \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.runningTask \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.runningTask \u003d new JsonAdaptedTask(source.getRunningTask());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     task."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public ReadOnlyPomodoro toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (runningTask \u003d\u003d null) return new Pomodoro(defaultTime, restTime, timeLeft, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return new Pomodoro(defaultTime, restTime, timeLeft, runningTask.toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 6,
      "BransonNg": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Jackson-friendly version of {@link Tag}. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTag} with the given {@code tagName}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Converts a given {@code Tag} into this class for Jackson use. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** Jackson-friendly version of {@link Task}. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "class JsonAdaptedTask {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Task\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final String done;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final String reminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private final String recurring;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // /** Constructs a {@code JsonAdaptedTask} with the given details. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // public JsonAdaptedTask("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         @JsonProperty(\"done\") String done,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         @JsonProperty(\"reminder\") String reminder) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     this.priority \u003d priority;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     this.description \u003d description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     this.done \u003d done;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //         this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Constructs a {@code JsonAdaptedTask} with the given details. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public JsonAdaptedTask("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"done\") String done,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            @JsonProperty(\"reminder\") String reminder,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            @JsonProperty(\"recurring\") String recurring) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.done \u003d done;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminder \u003d reminder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.recurring \u003d recurring;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Converts a given {@code Task} into this class for Jackson use. */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public JsonAdaptedTask(Task source) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d source.getDone().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tagged.addAll("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        reminder \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                (source.getOptionalReminder().isPresent())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        ? source.getOptionalReminder().get().toString()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        : \"\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        recurring \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                (source.getOptionalRecurring().isPresent())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        ? source.getOptionalRecurring().get().toString()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        : \"\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts this Jackson-friendly adapted task object into the model\u0027s {@code Task} object."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     task."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final List\u003cTag\u003e taskTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            taskTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!Done.isValidDone(done)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new IllegalValueException(Done.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final Done modelDone \u003d new Done(done);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(taskTags);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cReminder\u003e optReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (reminder \u003d\u003d null || reminder.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optReminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optReminder \u003d Optional.of(new Reminder(reminder));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Optional\u003cRecurring\u003e optRecurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        if (recurring \u003d\u003d null || recurring.equals(\"\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optRecurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            optRecurring \u003d Optional.of(new Recurring(recurring));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new Task("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                modelName,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                modelPriority,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                modelDescription,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                modelDone,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                modelTags,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                optReminder,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                optRecurring);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 15,
      "FyonnOh": 16,
      "artlee06": 61,
      "BransonNg": 30,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.InvalidPetException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonPetStorage implements PetStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPetStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonPetStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getPetFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet() throws DataConversionException, InvalidPetException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readPet(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Similreaar to {@link #readPet()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet(Path filePath)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, InvalidPetException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cJsonAdaptedPet\u003e jsonPet \u003d JsonUtil.readJsonFile(filePath, JsonAdaptedPet.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!jsonPet.isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.of(jsonPet.get().toModelType()); // Returns pet read from json"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        savePet(pet, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #savePet(ReadOnlyPet)}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(pet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedPet(pet), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 5,
      "BransonNg": 17,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonPomodoroStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonPomodoroStorage implements PomodoroStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPomodoroStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonPomodoroStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #readTaskList()}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPomodoro\u003e readPomodoro() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cJsonAdaptedPomodoro\u003e jsonPomodoro \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(this.filePath, JsonAdaptedPomodoro.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!jsonPomodoro.isPresent()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.of(jsonPomodoro.get().toModelType());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyPomodoro)}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePomodoro(ReadOnlyPomodoro pomodoro) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(pomodoro);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(this.filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        FileUtil.createIfMissing(this.filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedPomodoro(pomodoro), filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableStatistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.model.dayData.CustomQueue.tableConstraintsAreEnforced;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.CustomQueue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An immutable Statistics that is serializable to JSON format. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "@JsonRootName(value \u003d \"statistics\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "class JsonSerializableStatistics {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Statistics\u0027 %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final List\u003cJsonAdaptedDayData\u003e dayDatas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String dailyTarget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Constructs a {@code JsonSerializableTaskList} with the given tasks. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonSerializableStatistics("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"dayDatas\") List\u003cJsonAdaptedDayData\u003e dayDatas,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            @JsonProperty(\"dailyTarget\") String dailyTarget) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dayDatas.addAll(dayDatas);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.dailyTarget \u003d dailyTarget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Converts a given {@code ReadOnlyStatistics} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     *     JsonSerializableDayDataList}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonSerializableStatistics(ReadOnlyStatistics source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dailyTarget \u003d source.getDailyTarget().value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dayDatas.addAll("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                source.getCustomQueue()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .map(JsonAdaptedDayData::new)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Converts dayDatas into the model\u0027s {@code Statistics} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws InvalidTableException if there were any table constraints violated."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Statistics toModelType() throws IllegalValueException, InvalidTableException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cDayData\u003e dayDataList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (JsonAdaptedDayData jsonAdaptedDayData : dayDatas) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData dayData \u003d jsonAdaptedDayData.toModelType();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dayDataList.add(dayData);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (dailyTarget \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DailyTarget.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!DailyTarget.isValidDailyTarget(dailyTarget)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new IllegalValueException(DailyTarget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!tableConstraintsAreEnforced(dayDataList)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new InvalidTableException(CustomQueue.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics.setDayDatas(dayDataList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics.setDailyTarget(dailyTarget);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return statistics;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 3,
      "Hardoh": 2,
      "Permas-Teo": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableTaskList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** An Immutable TaskList that is serializable to JSON format. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "@JsonRootName(value \u003d \"tasklist\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "class JsonSerializableTaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TASK \u003d \"Tasks list contains duplicate task(s).\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final List\u003cJsonAdaptedTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Constructs a {@code JsonSerializableTaskList} with the given tasks. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonSerializableTaskList(@JsonProperty(\"tasks\") List\u003cJsonAdaptedTask\u003e tasks) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Converts a given {@code ReadOnlyTaskList} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param source future changes to this will not affect the created {@code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *     JsonSerializableTaskList}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonSerializableTaskList(ReadOnlyTaskList source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tasks.addAll("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                source.getTaskList()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .map(JsonAdaptedTask::new)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Converts this task list into the model\u0027s {@code TaskList} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (JsonAdaptedTask jsonAdaptedTask : tasks) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Task task \u003d jsonAdaptedTask.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (taskList.hasTask(task)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            taskList.addTask(task);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 57,
      "Permas-Teo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonStatisticsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** A class to access Statistics data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonStatisticsStorage implements StatisticsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonStatisticsStorage.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public JsonStatisticsStorage(Path filePath) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return readStatistics(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Similar to {@link #readStatistics()}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Optional\u003cJsonSerializableStatistics\u003e jsonSerializableDayDataList \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableStatistics.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (!jsonSerializableDayDataList.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            return Optional.of(jsonSerializableDayDataList.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (InvalidTableException ite) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            logger.info(\"Invalid table constraints found in \" + filePath + \": \" + ite.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new DataConversionException(ite);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics) throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        saveStatistics(statistics, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Similar to {@link #saveStatistics(ReadOnlyStatistics)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param statistics location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(statistics);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableStatistics(statistics), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonTaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access TaskList data stored as a json file on the hard disk. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonTaskListStorage implements TaskListStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTaskListStorage.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public JsonTaskListStorage(Path filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readTaskList(filePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #readTaskList()}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Optional\u003cJsonSerializableTaskList\u003e jsonTaskList \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(filePath, JsonSerializableTaskList.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (!jsonTaskList.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.of(jsonTaskList.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Similar to {@link #saveTaskList(ReadOnlyTaskList)}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTaskList(taskList), filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 20,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class to access UserPrefs stored in the hard disk as a json file */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PetStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.InvalidPetException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.TaskList}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface PetStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getPetFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyPet}. Returns {@code Optional.empty()} if storage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * file is not found."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    Optional\u003cReadOnlyPet\u003e readPet()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, IOException, InvalidPetException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #getPetFilePath() */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    Optional\u003cReadOnlyPet\u003e readPet(Path filePath)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, IOException, InvalidPetException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the given {@link ReadOnlyPet} to the storage."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void savePet(ReadOnlyPet pet) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #savePet(Pet) */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void savePet(ReadOnlyPet pet, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 5,
      "BransonNg": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/PomodoroStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.TaskList}. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface PomodoroStorage {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyPomodoro\u003e readPomodoro() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskList} to the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param pomodoro cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void savePomodoro(ReadOnlyPomodoro pomodoro) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StatisticsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.Statistics}. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public interface StatisticsStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Path getStatisticsFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Returns Statistics data as a {@link ReadOnlyStatistics}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Optional\u003cReadOnlyStatistics\u003e readStatistics() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** @see #getStatisticsFilePath() */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Saves the given {@link ReadOnlyStatistics} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param statistics cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void saveStatistics(ReadOnlyStatistics statistics) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** @see #saveStatistics(ReadOnlyStatistics) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** API of the Storage component */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public interface Storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        extends TaskListStorage, UserPrefsStorage, PetStorage, PomodoroStorage, StatisticsStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 5,
      "Permas-Teo": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.InvalidPetException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Manages storage of TaskList data in local storage. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TaskListStorage taskListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private PetStorage petStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private PomodoroStorage pomodoroStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsStorage statisticsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // NOTE these storage objects all correspond to Json-storagename, i.e. JsonTaskListStorage, ..."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public StorageManager("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            TaskListStorage taskListStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            PetStorage petStorage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            PomodoroStorage pomodoroStorage,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            StatisticsStorage statisticsStorage,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskListStorage \u003d taskListStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.petStorage \u003d petStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.pomodoroStorage \u003d pomodoroStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsStorage \u003d statisticsStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TaskList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskListStorage.getTaskListFilePath();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readTaskList(taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskListStorage.readTaskList(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        saveTaskList(taskList, taskListStorage.getTaskListFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListStorage.saveTaskList(taskList, filePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pet methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Path getPetFilePath() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return petStorage.getPetFilePath();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, IOException, InvalidPetException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return readPet(petStorage.getPetFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPet\u003e readPet(Path filePath)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, IOException, InvalidPetException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return petStorage.readPet(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        savePet(pet, petStorage.getPetFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePet(ReadOnlyPet pet, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.fine(\"Attempting to write pet data: \" + filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        petStorage.savePet(pet, filePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Pomodoro methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public Optional\u003cReadOnlyPomodoro\u003e readPomodoro() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pomodoroStorage.readPomodoro();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void savePomodoro(ReadOnlyPomodoro pomodoro) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        logger.fine(\"Attempting to write pomodoro data: \");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        pomodoroStorage.savePomodoro(pomodoro);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Statistics methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Path getStatisticsFilePath() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsStorage.getStatisticsFilePath();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsStorage.readStatistics(statisticsStorage.getStatisticsFilePath());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public Optional\u003cReadOnlyStatistics\u003e readStatistics(Path filePath)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsStorage.readStatistics(filePath);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics) throws IOException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.fine(\"Attempting to write Statistics data: \");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsStorage.saveStatistics(statistics);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics(ReadOnlyStatistics statistics, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        logger.fine(\"Attempting to write Statistics  data: \" + filePath);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsStorage.saveStatistics(statistics, filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 6,
      "BransonNg": 54,
      "Permas-Teo": 34,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/TaskListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.TaskList}. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public interface TaskListStorage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the file path of the data file. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Path getTaskListFilePath();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns TaskList data as a {@link ReadOnlyTaskList}. Returns {@code Optional.empty()} if"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * storage file is not found."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #getTaskListFilePath() */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    Optional\u003cReadOnlyTaskList\u003e readTaskList(Path filePath)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Saves the given {@link ReadOnlyTaskList} to the storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @param taskList cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** @see #saveTaskList(ReadOnlyTaskList) */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Represents a storage for {@link seedu.address.model.UserPrefs}. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the file path of the UserPrefs data file. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Returns UserPrefs data from storage. Returns {@code Optional.empty()} if storage file is not"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * found."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link seedu.address.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 6,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The UI component that is responsible for receiving user command inputs. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final CommandSuggestor commandSuggestor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor, CommandSuggestor commandSuggestor) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commandSuggestor \u003d commandSuggestor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        commandTextField"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .textProperty()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .addListener("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        (unused1, unused2, unused3) -\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            CssManipulator.setStyleToDefault(commandTextField);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        commandTextField.setOnKeyPressed(getTabKeyEventHandler());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public EventHandler getTabKeyEventHandler() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new EventHandler\u003cKeyEvent\u003e() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            public void handle(KeyEvent event) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (event.getCode() \u003d\u003d KeyCode.TAB"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \u0026\u0026 !event.isShiftDown()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        \u0026\u0026 !event.isControlDown()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        String suggestion \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                commandSuggestor.suggestCommand(commandTextField.getText());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        commandTextField.setText(suggestion);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        CssManipulator.setStyleToIndicateSuccess(commandTextField);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    } catch (CompletorException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        CssManipulator.setStyleToIndicateFailure(commandTextField);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    // Below is required as event.consume() does not prevent tab from unfocussing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    // the text field"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    commandTextField.requestFocus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    commandTextField.forward();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        };"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Handles the Enter button pressed event. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CssManipulator.setStyleToDefault(commandTextField);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CssManipulator.setStyleToIndicateFailure(commandTextField);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Represents a function that can execute commands. */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Represents a function that can complete commands. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public interface CommandSuggestor {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * Performs an auto complete and returns the completed command or an exception."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * @see seedu.address.logic.commmands.CommandCompletor#getSuggestedCommand"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String suggestCommand(String commandText) throws CompletorException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 8,
      "BransonNg": 49,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CssManipulator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.Parent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CssManipulator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String WARNING_STYLE_CLASS \u003d \"warning\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String SUCCESS_STYLE_CLASS \u003d \"success\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Remvoes all possible styles applied */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void setStyleToDefault(Parent node) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        node.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        node.getStyleClass().remove(WARNING_STYLE_CLASS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        node.getStyleClass().remove(SUCCESS_STYLE_CLASS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the command box style to indicate a failed command. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void setStyleToIndicateFailure(Parent node) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d node.getStyleClass();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the command box style to indicate a failed auto complete. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void setStyleToIndicateWarning(Parent node) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d node.getStyleClass();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (styleClass.contains(WARNING_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        styleClass.add(WARNING_STYLE_CLASS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the command box style to indicate a successful auto complete. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void setStyleToIndicateSuccess(Parent node) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d node.getStyleClass();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (styleClass.contains(SUCCESS_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        styleClass.add(SUCCESS_STYLE_CLASS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Controller for a help page */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"https://ay1920s2-cs2103t-w16-1.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Button copyButton;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label helpMessage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Creates a new HelpWindow. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif this method is called during animation or layout processing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif this method is called on the primary stage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *       \u003cli\u003eif {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/ul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns true if the help window is currently being shown. */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Hides the help window. */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Focuses on the help window. */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Copies the URL to the user guide to the clipboard. */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 15,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.SwitchTabCommand.SETTINGS_TAB_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.commands.SwitchTabCommand.STATS_TAB_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.logic.commands.SwitchTabCommand.TASKS_TAB_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.scene.input.MouseEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CommandCompletor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorDeletionResult;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.CompletorResult;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.DoneCommandResult;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommandResult;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.commands.SetCommandResult;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.SwitchTabCommandResult;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PetName;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.settings.PomDuration;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * The Main Window. Provides the basic application layout containing a menu bar and space where"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * other JavaFX elements can be placed."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HANGRY_MOOD_STRING \u003d \"HANGRY\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public final String HAPPY_MOOD_STRING \u003d \"HAPPY\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private CommandCompletor commandCompletor;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoro;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TaskListPanel taskListPanel;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetDisplay petDisplay;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private PomodoroDisplay pomodoroDisplay;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsDisplay statisticsDisplay;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private SettingsDisplay settingsDisplay;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private CommandBox commandBox;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Timer timer;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private TimerTask timerTask;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private boolean hasStarted;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane taskListPanelPlaceholder;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private StackPane petPlaceholder;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private StackPane pomodoroPlaceholder;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private StackPane statisticsPlaceholder;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private StackPane settingsPlaceholder;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @FXML private TabPane tabPanePlaceholder;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public MainWindow("
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Stage primaryStage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Logic logic,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomodoroManager pomodoro,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PetManager petManager,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            StatisticsManager statisticsManager) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro \u003d pomodoro;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager \u003d statisticsManager;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.commandCompletor \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // set-up timer"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timer \u003d new Timer();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timerTask \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        petManager.changeToHangry();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        updatePetDisplay();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        timer.cancel();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                };"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.hasStarted \u003d false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        disableTabClick();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private void disableTabClick() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        EventHandler\u003cMouseEvent\u003e handler \u003d MouseEvent::consume;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        tabPanePlaceholder.addEventFilter(MouseEvent.ANY, handler);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666 is fixed in later version of"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * SDK."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will not"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * work when the focus is in them because the key event is consumed by the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * TextInputControl(s)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * help window purposely so to support accelerators even when focus is in"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         * CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        getRoot()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .addEventFilter("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        KeyEvent.KEY_PRESSED,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        event -\u003e {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            if (event.getTarget() instanceof TextInputControl"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                                event.consume();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                        });"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Fills up all the placeholders of this window. */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListPanel \u003d new TaskListPanel(logic.getFilteredTaskList());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListPanelPlaceholder.getChildren().add(taskListPanel.getRoot());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay \u003d new PetDisplay();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        updateMoodWhenLogIn();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        updatePetDisplay();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petPlaceholder.getChildren().add(petDisplay.getRoot());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTaskListFilePath());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, this::suggestCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomodoroDisplay \u003d new PomodoroDisplay();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroDisplay.setTimerText(pomodoro.getDefaultStartTimeAsString());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroDisplay.setDefaultTimeText(pomodoro.getDefaultStartTimeAsString());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomodoroPlaceholder.getChildren().add(pomodoroDisplay.getRoot());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setTimerLabel(pomodoroDisplay.getTimerLabel());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setPomodoroDisplay(pomodoroDisplay);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setResultDisplay(resultDisplay);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.setMainWindow(this);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.handleResumeLastSession();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsDisplay \u003d new StatisticsDisplay();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsPlaceholder.getChildren().add(statisticsDisplay.getRoot());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        settingsDisplay \u003d new SettingsDisplay(petManager, logic.getPomodoro(), statisticsManager);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        settingsPlaceholder.getChildren().add(settingsDisplay.getRoot());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the default size based on {@code guiSettings}. */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        primaryStage.setResizable(false);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Opens the help window or focuses on it if it\u0027s already opened. */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Closes the application. */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoro.handleExit();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        GuiSettings guiSettings \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new GuiSettings("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        primaryStage.getWidth(),"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        primaryStage.getHeight(),"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        (int) primaryStage.getX(),"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        (int) primaryStage.getY());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String suggestCommand(String commandText) throws CompletorException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CompletorResult completorResult \u003d logic.suggestCommand(commandText);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            resultDisplay.setFeedbackToUser(completorResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (completorResult instanceof CompletorDeletionResult) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                resultDisplay.setWarning();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return completorResult.getSuggestion();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (CompletorException e) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTabFocusTasks() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tabPanePlaceholder.getSelectionModel().select(SwitchTabCommand.TASKS_TAB_INDEX);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private CommandResult executeCommand(String commandText)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            tabPanePlaceholder.getSelectionModel().select(TASKS_TAB_INDEX);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            taskListPanel.setSortOrder(logic.getTaskList().getSortOrder());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            // Done Command related results"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (commandResult instanceof DoneCommandResult) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                // increment Pet EXP after completing a task"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                petManager.incrementExp();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                updateMoodWhenDoneTask();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                updatePetDisplay();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            // set Command related results"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (commandResult instanceof SetCommandResult) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                SetCommandResult setCommandResult \u003d (SetCommandResult) commandResult;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                PetName petName \u003d setCommandResult.getPetName();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                PomDuration pomDuration \u003d setCommandResult.getPomDuration();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                DailyTarget dailyTarget \u003d setCommandResult.getDailyTarget();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                if (!petName.isEmpty()) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    updatePetDisplay();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                if (!pomDuration.isEmpty()) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    String str \u003d pomDuration.toString();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    float f \u003d Float.parseFloat(str);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    pomodoro.setDefaultStartTime(f);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    pomodoroDisplay.setDefaultTimeText(pomodoro.getDefaultStartTimeAsString());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    pomodoroDisplay.setTimerText(pomodoro.getDefaultStartTimeAsString());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                if (!dailyTarget.isEmpty()) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    statisticsManager.setDailyTargetText(dailyTarget.toString());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                settingsDisplay.update();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                tabPanePlaceholder.getSelectionModel().select(SETTINGS_TAB_INDEX);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Switch tabs related results"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (commandResult instanceof SwitchTabCommandResult) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                SwitchTabCommandResult switchTabCommandResult \u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        (SwitchTabCommandResult) commandResult;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                tabPanePlaceholder"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .getSelectionModel()"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .select(switchTabCommandResult.getTabToSwitchIndex());"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                if (switchTabCommandResult.getTabToSwitchIndex() \u003d\u003d STATS_TAB_INDEX) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    statisticsManager.updateStatisticsDisplayValues();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    this.updateStatisticsDisplay();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // Pomodoro related results"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (commandResult instanceof PomCommandResult) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                PomCommandResult pomCommandResult \u003d (PomCommandResult) commandResult;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                if (pomCommandResult.getIsNormal()) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoroDisplay.setTaskInProgressText(pomCommandResult.getPommedTask());"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.start(pomCommandResult.getTimerAmountInMin());"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    pomodoro.setDoneParams("
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getModel(),"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getOriginList(),"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                            pomCommandResult.getTaskIndex());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                hasStarted \u003d false;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                timer.cancel();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                timer.purge();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            updatePetDisplay();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void displayRecurring(String recurringFeedback) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        resultDisplay.setFeedbackToUser(recurringFeedback);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomCommandExecutor() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBox \u003d new CommandBox(this::pomExecuteCommand, this::pomSuggestCommand);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private String pomSuggestCommand(String commandText) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return commandText;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setDefaultCommandExecutor() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBox \u003d new CommandBox(this::executeCommand, this::suggestCommand);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private CommandResult pomExecuteCommand(String commandText)"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                pomodoro.promptBehaviour(commandText, logic, logger, petManager);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updatePetDisplay() {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String petName \u003d petManager.getPetName();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String levelText \u003d petManager.getLevelText();"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expBarInt \u003d petManager.getExpBarInt();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String expBarImage \u003d petManager.getExpBarImage();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String petImage \u003d petManager.getPetImage();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setPetName(petName);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setLevelText(levelText);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setExpBarText(expBarInt);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setExpBarImage(expBarImage);"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petDisplay.setPetImage(petImage);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateStatisticsDisplay() {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String dailyTargetText \u003d statisticsManager.getDailyTargetText();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String progressDailyText \u003d statisticsManager.getProgressDailyText();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String progressBarDailyFilepathString \u003d"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                statisticsManager.getProgressBarDailyFilepathString();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cDayData\u003e customQueue \u003d statisticsManager.getCustomQueue();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsDisplay.setProgressTargetText(dailyTargetText);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsDisplay.setProgressDailyText(progressDailyText);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsDisplay.setProgressBarDailyFilepathString(progressBarDailyFilepathString);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsDisplay.updateGraphs(customQueue);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateMoodWhenLogIn() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (petManager.getMood().equals(HAPPY_MOOD_STRING)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            LocalDateTime timeForHangry \u003d petManager.getTimeForHangry();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            java.time.Duration duration \u003d java.time.Duration.between(now, timeForHangry);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            if (duration.isNegative()) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                petManager.changeToHangry();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                hasStarted \u003d false;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                hasStarted \u003d true;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                Date timeForMoodChange \u003d"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        Date.from(timeForHangry.atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                timer.schedule(timerTask, timeForMoodChange);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateMoodWhenDoneTask() {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.changeToHappy();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateLastDoneTaskWhenDone();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // reschedule timer"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        if (hasStarted) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            timer.cancel();"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timer \u003d new Timer();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.timerTask \u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        petManager.changeToHangry();"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        updatePetDisplay();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        timer.cancel();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                };"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Date timeForMoodChange \u003d"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Date.from(petManager.getTimeForHangry().atZone(ZoneId.systemDefault()).toInstant());"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        timer.schedule(timerTask, timeForMoodChange);"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * Returns an appropriate tab index to switch to based on commands."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @param commandResult the command called."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * @return index of tab to switch to."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private int getTabIndexFromCommand(CommandResult commandResult) {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        int tabToSwitchIndex \u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                TASKS_TAB_INDEX; // default: switch to tasks tab for tasks related commands"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        if (commandResult instanceof SwitchTabCommandResult) {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            SwitchTabCommandResult switchTabCommandResult \u003d (SwitchTabCommandResult) commandResult;"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            tabToSwitchIndex \u003d"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    switchTabCommandResult"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            .getTabToSwitchIndex(); // switch to tab in SwitchTabCommandResult"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } else if (commandResult instanceof SetCommandResult) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            tabToSwitchIndex \u003d"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    SETTINGS_TAB_INDEX; // switch to settings tab for settings related commands."
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return tabToSwitchIndex;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * Triggers reminder to display as a pop up after time delay based on the reminder given in"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * argument."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     *"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param reminder"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     * @param description"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "artlee06"
        },
        "content": "     */"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static void triggerReminder(Reminder reminder, String name, String description) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        long delay \u003d reminder.getDelay();"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Timeline timeline \u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new Timeline("
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        new KeyFrame("
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                Duration.seconds(delay),"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                ae -\u003e {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    MainWindow.showReminder(name, description);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    reminder.setHasFired();"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                }));"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        timeline.play();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Displays the reminder\u0027s name and description as a javaFX alert. */"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static void showReminder(String name, String description) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        var alert \u003d new Alert(Alert.AlertType.INFORMATION);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.setTitle(\"Reminder\");"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.setHeaderText(name);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.setContentText(description);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        alert.show();"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 141,
      "Hardoh": 68,
      "artlee06": 55,
      "Permas-Teo": 52,
      "BransonNg": 62,
      "-": 154
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PetDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An UI component that displays Pet {@code Pet}. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PetDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String FXML \u003d \"PetDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String DEFAULT_PET_FILEPATH \u003d \"/images/pet/level1.png\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String DEFAULT_EXPBAR_FILEPATH \u003d \"/images/pet/ProgressBar0%.png\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String DEFAULT_EXPBAR_TEXT \u003d \"0\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String DEFAULT_LEVEL_TEXT \u003d \"1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String DEFEAULT_PET_NAME \u003d \"BB\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String petFilepath; // mutable"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String expBarFilepath; // mutable"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String expBarText; // mutable"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String levelText; // mutable"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String petName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label petNameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private VBox petPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private ImageView petPic;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label expBarView;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private ImageView expBarPic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label levelView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public PetDisplay() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petName \u003d DEFEAULT_PET_NAME;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petFilepath \u003d DEFAULT_PET_FILEPATH;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.expBarFilepath \u003d DEFAULT_EXPBAR_FILEPATH;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.expBarText \u003d DEFAULT_EXPBAR_TEXT;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.levelText \u003d DEFAULT_LEVEL_TEXT;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setPetImage(String path) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petFilepath \u003d path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Image petImage \u003d new Image(MainApp.class.getResourceAsStream(petFilepath));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petPic.setImage(petImage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setExpBarImage(String path) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarFilepath \u003d path;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Image expBarImage \u003d new Image(MainApp.class.getResourceAsStream(expBarFilepath));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarPic.setImage(expBarImage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setExpBarText(String expBarInt) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.expBarText \u003d expBarInt;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        expBarView.setText(expBarText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setLevelText(String levelText) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.levelText \u003d levelText;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        levelView.setText(levelText);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetName(String petName) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petName \u003d petName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petNameLabel.setText(petName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 44,
      "Permas-Teo": 16,
      "BransonNg": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PomodoroDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.media.Media;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.media.MediaPlayer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An UI component that displays the Pomodoro {@code Pomodoro}. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PomodoroDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String FXML \u003d \"PomodoroDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_TASK_IN_PROGRESS \u003d \"No task in progress.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_TIMER \u003d \"25:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private String DONE_SOUND_FILEPATH \u003d \"/sounds/pom_ding.mp3\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private String default_timer \u003d DEFAULT_TIMER;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String taskInProgressText; // mutable"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String timerText; // mutable"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private HBox pomodoroPane;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label taskInProgress;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label timer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public PomodoroDisplay() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.taskInProgressText \u003d DEFAULT_TASK_IN_PROGRESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.timerText \u003d DEFAULT_TIMER;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        taskInProgress.setText(taskInProgressText);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        timer.setText(timerText);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTaskInProgressText(String toDisplay) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        taskInProgress.setText(toDisplay);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setDefaultTimeText(String defaultTimeText) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.default_timer \u003d defaultTimeText;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.taskInProgressText \u003d DEFAULT_TASK_IN_PROGRESS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.timerText \u003d default_timer;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        taskInProgress.setText(taskInProgressText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timer.setText(timerText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setTimerText(String toDisplay) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        timer.setText(toDisplay);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Label getTimerLabel() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return timer;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void playDone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Media media \u003d new Media(this.getClass().getResource(DONE_SOUND_FILEPATH).toExternalForm());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        MediaPlayer mediaPlayer \u003d new MediaPlayer(media);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        mediaPlayer.play();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 33,
      "Permas-Teo": 30,
      "BransonNg": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Timer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.TimerTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A ui for the status bar that is displayed at the header of the application. */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Timer scheduler;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private TextArea resultDisplay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        scheduler \u003d new Timer();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setWarning() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CssManipulator.setStyleToIndicateWarning(resultDisplay);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        scheduler.cancel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        scheduler.purge();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        scheduler \u003d new Timer();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        scheduler.schedule("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new TimerTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    public void run() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        Platform.runLater(() -\u003e CssManipulator.setStyleToDefault(resultDisplay));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                },"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                1000);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 21,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/SettingsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class SettingsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String FXML \u003d \"SettingsDisplay.fxml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_PET_NAME \u003d \"BB\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_POMODORO_DURATION \u003d \"25\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final String DEFAULT_DAILY_CHALLENGE \u003d \"100\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private ReadOnlyPomodoro pomodoro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private VBox settingsPane;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label petNameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private TextField petNameTextField;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label pomodoroLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private TextField pomodoroTextField;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private Label challengeLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @FXML private TextField challengeTextField;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public SettingsDisplay("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            PetManager petManager, ReadOnlyPomodoro pomodoro, StatisticsManager statisticsManager) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.pomodoro \u003d pomodoro;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager \u003d statisticsManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void update() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String name \u003d petManager.getPetName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petNameTextField.setText(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String duration \u003d pomodoro.getDefaultTime();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        pomodoroTextField.setText(duration);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String dailyChallenge \u003d statisticsManager.getDailyTargetText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        challengeTextField.setText(dailyChallenge);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 46,
      "Permas-Teo": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticsDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.model.dayData.CustomQueue.CONSTANT_SIZE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** An UI component that displays the Pomodoro {@code Pomodoro}. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class StatisticsDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String FXML \u003d \"StatisticsDisplay.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_PROGRESS_BAR_DAILY_PLACEHOLDER \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \"/images/progress/ProgressBar0%.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_PROGRESS_DAILY \u003d \"NaN\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String DEFAULT_PROGRESS_TARGET \u003d \"100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String PROGRESS_UNITS \u003d \" mins\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String progressBarDailyFilepathString;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public String progressDailyText;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public String progressTargetText;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private VBox statisticsPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private BarChart\u003cString, Integer\u003e barChartPomDurationData;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private BarChart\u003cString, Integer\u003e barChartTasksDoneData;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label progressDaily;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private ImageView progressBarDaily;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @FXML private Label progressTarget;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public StatisticsDisplay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressBarDailyFilepathString \u003d DEFAULT_PROGRESS_BAR_DAILY_PLACEHOLDER;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressDailyText \u003d DEFAULT_PROGRESS_DAILY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressTargetText \u003d DEFAULT_PROGRESS_TARGET;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressDaily.setText(progressDailyText + PROGRESS_UNITS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Image progressBarDailyImage \u003d new Image(DEFAULT_PROGRESS_BAR_DAILY_PLACEHOLDER);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressBarDaily.setImage(progressBarDailyImage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressTarget.setText(progressTargetText + PROGRESS_UNITS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateGraphs(List\u003cDayData\u003e customQueue) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e dataSeriesPomDurationData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e dataSeriesTasksDoneData \u003d new XYChart.Series\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (int i \u003d CONSTANT_SIZE - 1; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            String dateString \u003d customQueue.get(i).getDate().toPrint();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int pomDurationDataInt \u003d customQueue.get(i).getPomDurationData().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            dataSeriesPomDurationData"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .getData()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .add(new XYChart.Data\u003c\u003e(dateString, pomDurationDataInt));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            int tasksDoneDataInt \u003d customQueue.get(i).getTasksDoneData().value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            dataSeriesTasksDoneData.getData().add(new XYChart.Data\u003c\u003e(dateString, tasksDoneDataInt));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartPomDurationData.getData().clear();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartTasksDoneData.getData().clear();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartPomDurationData.getData().add(dataSeriesPomDurationData);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        barChartTasksDoneData.getData().add(dataSeriesTasksDoneData);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dataSeriesPomDurationData.getChart().getXAxis().setAnimated(false);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dataSeriesTasksDoneData.getChart().getXAxis().setAnimated(false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dataSeriesPomDurationData.getChart().setAnimated(false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        dataSeriesTasksDoneData.getChart().setAnimated(false);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setProgressTargetText(String progressTargetText) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressTargetText \u003d progressTargetText;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressTarget.setText(progressTargetText + PROGRESS_UNITS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setProgressDailyText(String progressDailyText) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressDailyText \u003d progressDailyText;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressDaily.setText(progressDailyText + PROGRESS_UNITS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setProgressBarDailyFilepathString(String progressBarDailyFilepathString) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.progressBarDailyFilepathString \u003d progressBarDailyFilepathString;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Image progressBarDailyImage \u003d new Image(progressBarDailyFilepathString);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        progressBarDaily.setImage(progressBarDailyImage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 7,
      "Permas-Teo": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A ui for the status bar that is displayed at the footer of the application. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label saveLocationStatus;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.control.CheckBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "/** An UI component that displays information of a {@code Task}. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String FXML \u003d \"TaskListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX. As"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * a consequence, UI elements\u0027 variable names cannot be set to such keywords or an exception"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public final Task task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private HBox cardPane;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label id;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @FXML private Label description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML private Label recurring;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @FXML private Label reminder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private FlowPane tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private CheckBox done;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskListCard(Task task, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.task \u003d task;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        name.setText(task.getName().fullName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done.setSelected(task.getDone().getIsDone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done.setDisable(true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority.setText(getPriorityString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        priority.setTextFill(Color.web(getPriorityColor()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description.setText(task.getDescription().value);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        task.getOptionalReminder().ifPresent(rem -\u003e reminder.setText(rem.displayReminder()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        task.getOptionalRecurring().ifPresent(rec -\u003e recurring.setText(rec.displayRecurring()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        task.getTags()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String getPriorityString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String value \u003d task.getPriority().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"low\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"medium\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"high\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"low\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private String getPriorityColor() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String value \u003d task.getPriority().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        switch (value) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case \"1\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"#2EBE04\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case \"2\":"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"#F8713D\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        case \"3\":"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"#FF0000\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return \"#2EBE04\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        if (!(other instanceof TaskListCard)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        TaskListCard card \u003d (TaskListCard) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return id.getText().equals(card.id.getText()) \u0026\u0026 task.equals(card.task);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Hardoh": 11,
      "artlee06": 4,
      "BransonNg": 45,
      "-": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TaskListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Panel containing the list of tasks. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String FXML \u003d \"TaskListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TaskListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private ListView\u003cTask\u003e taskListView;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @FXML private Label tasksHeader;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListPanel(ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListView.setItems(taskList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskListView.setCellFactory(listView -\u003e new TaskListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskList(ObservableList\u003cTask\u003e newTaskList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskListView.setItems(newTaskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setSortOrder(Optional\u003cString\u003e sortOrder) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        if (sortOrder.isPresent()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String capitalized \u003d StringUtil.capitalizeWord(sortOrder.get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.tasksHeader.setText(String.format(\"Tasks by %s\", capitalized));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.tasksHeader.setText(\"Tasks\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void removeSortOrder() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.tasksHeader.setText(\"Tasks\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Task} using a {@code"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * TaskListCard}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    class TaskListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        protected void updateItem(Task task, boolean empty) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            super.updateItem(task, empty);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            if (empty || task \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                setGraphic(new TaskListCard(task, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 36,
      "BransonNg": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.Observer;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** API of UI component */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public interface Ui extends Observer {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App). */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 2,
      "BransonNg": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** The manager of the UI component. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/BBProductiveIcon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoro;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private StatisticsManager statisticsManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public UiManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            Logic logic,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PomodoroManager pomodoro,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            PetManager petManager,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            StatisticsManager statisticsManager) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.pomodoro \u003d pomodoro;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        this.petManager \u003d petManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.statisticsManager \u003d statisticsManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the application icon."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            mainWindow \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                    new MainWindow(primaryStage, logic, pomodoro, petManager, statisticsManager);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); // This should be called before creating other UI parts"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    void showAlertDialogAndWait("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters. This method only returns"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * after the user has closed the alert dialog."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static void showAlertDialogAndWait("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Stage owner, AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e}, and exits the"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "     * application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void update(String input) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        mainWindow.displayRecurring(input);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 12,
      "Hardoh": 9,
      "artlee06": 5,
      "Permas-Teo": 3,
      "BransonNg": 1,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc. It"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL. The FXML file must not specify the"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * {@code fx:controller} attribute."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object. The FXML file must not"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the root object of the scene graph of this UiPart. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 12,
      "-": 76
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" promptText\u003d\"Enter command here\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "         \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "      \u003c/padding\u003e\u003c/TextField\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 5,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003cfx:root maxHeight\u003d\"700.0\" maxWidth\u003d\"1200.0\" minHeight\u003d\"700.0\" minWidth\u003d\"1200.0\" onCloseRequest\u003d\"#handleExit\" title\u003d\"BBProductive\" type\u003d\"javafx.stage.Stage\" width\u003d\"1200.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        \u003cImage url\u003d\"@/images/BBProductiveIcon.png\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cSplitPane dividerPositions\u003d\"0.1\" prefWidth\u003d\"800\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003citems\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            \u003cVBox minWidth\u003d\"360.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"petPlaceholder\" maxHeight\u003d\"400.0\" minHeight\u003d\"400.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"150.0\" minHeight\u003d\"150.0\" prefHeight\u003d\"150.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" maxHeight\u003d\"50.0\" minHeight\u003d\"50.0\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003cTabPane fx:id\u003d\"tabPanePlaceholder\" minWidth\u003d\"840.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" tabMaxHeight\u003d\"200.0\" tabMaxWidth\u003d\"200.0\" tabMinHeight\u003d\"30.0\" tabMinWidth\u003d\"120.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003ctabs\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003cTab disable\u003d\"true\" text\u003d\"                                                                                                                                                                         \"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"taskList1\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003cchildren\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"pomodoroPlaceholder1\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                        \u003cInsets bottom\u003d\"20\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder1\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003cTab text\u003d\"Tasks\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                            \u003cVBox fx:id\u003d\"taskList\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                                    \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"pomodoroPlaceholder\" mouseTransparent\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                          \u003cInsets bottom\u003d\"20\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                       \u003c/padding\u003e\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                                \u003cStackPane fx:id\u003d\"taskListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003cTab text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003cStackPane fx:id\u003d\"statisticsPlaceholder\" prefWidth\u003d\"340.0\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                    \u003cTab text\u003d\"Settings\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                        \u003ccontent\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                            \u003cStackPane fx:id\u003d\"settingsPlaceholder\" prefWidth\u003d\"340.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                        \u003c/content\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                                    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003c/tabs\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/items\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" minHeight\u003d\"20.0\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003c/children\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 9,
      "artlee06": 5,
      "Permas-Teo": 45,
      "BransonNg": 6,
      "-": 39
    }
  },
  {
    "path": "src/main/resources/view/PetDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cVBox fx:id\u003d\"petPane\" alignment\u003d\"CENTER\" maxHeight\u003d\"400.0\" minHeight\u003d\"400.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003cVBox prefHeight\u003d\"75.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cLabel fx:id\u003d\"petNameLabel\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cFont size\u003d\"32.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            \u003cchildren\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                \u003cLabel fx:id\u003d\"expBarView\" maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" text\u003d\"0 XP / 100 XP\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cfont\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                        \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003c/font\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                \u003c/Label\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                \u003cRegion prefHeight\u003d\"30.0\" prefWidth\u003d\"37.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003cHBox maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                        \u003cLabel prefHeight\u003d\"34.0\" prefWidth\u003d\"56.0\" text\u003d\"Level \"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                                \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"levelView\" maxHeight\u003d\"30.0\" minHeight\u003d\"30.0\" prefHeight\u003d\"30.0\" text\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003cfont\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                                \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                            \u003c/font\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            \u003c/children\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cImageView fx:id\u003d\"expBarPic\" fitHeight\u003d\"30.0\" fitWidth\u003d\"233.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003c/children\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003cHBox alignment\u003d\"CENTER\" prefHeight\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003cBorderPane prefHeight\u003d\"400.0\" prefWidth\u003d\"400.0\"\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003ccenter\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \u003cImageView fx:id\u003d\"petPic\" fitHeight\u003d\"300.0\" fitWidth\u003d\"300.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" BorderPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    \u003c/center\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "artlee06": 33,
      "Permas-Teo": 44,
      "BransonNg": 3
    }
  },
  {
    "path": "src/main/resources/view/PomodoroDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003cHBox fx:id\u003d\"pomodoroPane\" alignment\u003d\"CENTER\" maxHeight\u003d\"50.0\" maxWidth\u003d\"800.0\" styleClass\u003d\"tasklist-card\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "      \u003cLabel fx:id\u003d\"taskInProgress\" contentDisplay\u003d\"CENTER\" graphicTextGap\u003d\"5.0\" text\u003d\"taskInProgress\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion minWidth\u003d\"10.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"timer\" alignment\u003d\"CENTER_RIGHT\" contentDisplay\u003d\"CENTER\" text\u003d\"timer\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cFont size\u003d\"26.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "      \u003cInsets bottom\u003d\"30.0\" left\u003d\"30.0\" right\u003d\"30.0\" top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "Permas-Teo": 22
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "Permas-Teo": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/SettingsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "\u003cVBox fx:id\u003d\"settingsPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" mouseTransparent\u003d\"true\" prefHeight\u003d\"500.0\" prefWidth\u003d\"340.0\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    \u003cchildren\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003cLabel fx:id\u003d\"petNameLabel\" mouseTransparent\u003d\"true\" text\u003d\"Pet Name\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets top\u003d\"70.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003cTextField fx:id\u003d\"petNameTextField\" layoutX\u003d\"10.0\" maxHeight\u003d\"50.0\" maxWidth\u003d\"300.0\" mouseTransparent\u003d\"true\" prefHeight\u003d\"30.0\" prefWidth\u003d\"300.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003cLabel fx:id\u003d\"pomodoroLabel\" mouseTransparent\u003d\"true\" text\u003d\"Default Pomodoro Duration\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003cTextField fx:id\u003d\"pomodoroTextField\" maxHeight\u003d\"50.0\" maxWidth\u003d\"300.0\" mouseTransparent\u003d\"true\" prefHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003cLabel fx:id\u003d\"challengeLabel\" mouseTransparent\u003d\"true\" text\u003d\"Daily Challenge Target\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets top\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003cTextField fx:id\u003d\"challengeTextField\" maxHeight\u003d\"30.0\" maxWidth\u003d\"300.0\" mouseTransparent\u003d\"true\" prefHeight\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"20.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        \u003c/TextField\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    \u003c/children\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 77,
      "BransonNg": 3
    }
  },
  {
    "path": "src/main/resources/view/StatisticsDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003cVBox fx:id\u003d\"statisticsPane\" alignment\u003d\"CENTER\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"500.0\" prefWidth\u003d\"340.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel text\u003d\"Daily Challenge\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion layoutX\u003d\"10.0\" layoutY\u003d\"92.0\" prefHeight\u003d\"30.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003cLabel fx:id\u003d\"progressDaily\" text\u003d\"0 mins\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003cLabel text\u003d\" / \"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003cLabel fx:id\u003d\"progressTarget\" text\u003d\"100 mins\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003cfont\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                              \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                           \u003c/font\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                  \u003cImageView fx:id\u003d\"progressBarDaily\" fitHeight\u003d\"30.0\" fitWidth\u003d\"200.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion prefHeight\u003d\"90.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"barChartTitle\" alignment\u003d\"CENTER\" text\u003d\"Duration Pommed\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChartPomDurationData\" prefHeight\u003d\"174.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "          \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "          \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cRegion layoutX\u003d\"10.0\" layoutY\u003d\"102.0\" prefHeight\u003d\"50.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cLabel fx:id\u003d\"barChartTitle1\" alignment\u003d\"CENTER\" layoutX\u003d\"167.0\" layoutY\u003d\"259.0\" text\u003d\"Tasks Completed\" textAlignment\u003d\"CENTER\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cfont\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cFont size\u003d\"16.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/font\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/Label\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003cBarChart fx:id\u003d\"barChartTasksDoneData\" layoutX\u003d\"10.0\" layoutY\u003d\"272.0\" prefHeight\u003d\"174.0\" prefWidth\u003d\"340.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cxAxis\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cCategoryAxis side\u003d\"BOTTOM\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003cyAxis\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cNumberAxis side\u003d\"LEFT\" /\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "      \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 78
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cGridPane styleClass\u003d\"status-bar\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "  \u003cLabel fx:id\u003d\"saveLocationStatus\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "         \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003c/GridPane.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "artlee06": 9,
      "-": 11
    }
  },
  {
    "path": "src/main/resources/view/TaskListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.scene.control.CheckBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003cHBox fx:id\u003d\"cardPane\" alignment\u003d\"TOP_CENTER\" fillHeight\u003d\"false\" maxWidth\u003d\"800.0\" minHeight\u003d\"110.0\" minWidth\u003d\"800.0\" mouseTransparent\u003d\"true\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    \u003cGridPane alignment\u003d\"TOP_CENTER\" mouseTransparent\u003d\"true\" prefWidth\u003d\"715.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        \u003cHBox alignment\u003d\"TOP_CENTER\" prefWidth\u003d\"717.0\" GridPane.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                \u003cInsets bottom\u003d\"25.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003cGridPane alignment\u003d\"TOP_CENTER\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cColumnConstraints maxWidth\u003d\"40\" minWidth\u003d\"20\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003cVBox alignment\u003d\"CENTER\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" alignment\u003d\"TOP_LEFT\" styleClass\u003d\"cell_big_label\" textFill\u003d\"#453fe9\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003cVBox styleClass\u003d\"tasklist-card\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    \u003cHBox minHeight\u003d\"90\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003cVBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cpadding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \u003cInsets left\u003d\"15\" right\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003c/padding\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            \u003cCheckBox fx:id\u003d\"done\" styleClass\u003d\"checkbox\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003cVBox maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"642.0\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003cHBox maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"0.0\" prefWidth\u003d\"638.0\"\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                           \u003cchildren\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER_LEFT\" maxWidth\u003d\"719.0\" prefWidth\u003d\"719.0\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                            \u003cInsets bottom\u003d\"10.0\" left\u003d\"15.0\" right\u003d\"5.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                        \u003cLabel fx:id\u003d\"name\" prefHeight\u003d\"30.0\" prefWidth\u003d\"961.0\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                        \u003cFlowPane fx:id\u003d\"tags\" alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                       \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                 \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                 \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                 \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                              \u003cRegion prefHeight\u003d\"73.0\" prefWidth\u003d\"32.0\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    \u003cVBox alignment\u003d\"CENTER\" minWidth\u003d\"180\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                        \u003cLabel id\u003d\"reminder\" fx:id\u003d\"reminder\" minWidth\u003d\"30\" styleClass\u003d\"reminder\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                       \u003cInsets top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003c/VBox.margin\u003e\u003c/Label\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cVBox prefHeight\u003d\"57.0\" prefWidth\u003d\"506.0\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                            \u003cInsets right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                 \u003cHBox prefHeight\u003d\"47.0\" prefWidth\u003d\"149.0\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003cchildren\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                       \u003cLabel id\u003d\"recurring\" fx:id\u003d\"recurring\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"180.0\" styleClass\u003d\"recurring\" textAlignment\u003d\"RIGHT\"\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                          \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                             \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                          \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                       \u003c/Label\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                              \u003cLabel fx:id\u003d\"priority\" alignment\u003d\"CENTER_RIGHT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"181.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$priority\" textAlignment\u003d\"RIGHT\" /\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003c/children\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                 \u003c/HBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                           \u003c/children\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                               \u003cLabel fx:id\u003d\"description\" mouseTransparent\u003d\"true\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" wrapText\u003d\"true\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                           \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                              \u003cInsets bottom\u003d\"20.0\" left\u003d\"15.0\" right\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                           \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                  \u003c/VBox\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                  \u003cInsets left\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "artlee06"
        },
        "content": "               \u003cInsets /\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "         \u003cInsets /\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cInsets /\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "artlee06": 71,
      "Permas-Teo": 4,
      "BransonNg": 29,
      "-": 20
    }
  },
  {
    "path": "src/main/resources/view/TaskListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "\u003cVBox alignment\u003d\"TOP_CENTER\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "   \u003cLabel fx:id\u003d\"tasksHeader\" graphicTextGap\u003d\"1.0\" text\u003d\"Tasks\" textFill\u003d\"#453fe9\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cfont\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "         \u003cFont size\u003d\"24.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003c/font\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "         \u003cInsets bottom\u003d\"20.0\" top\u003d\"20.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "      \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "   \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    \u003cListView fx:id\u003d\"taskListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "artlee06": 11,
      "BransonNg": 2,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 1,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String defaultConfigAsString \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Current log level : INFO\\n\" + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // number first"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // number first"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void verifyVersionParsedCorrectly("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String versionString, int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final Index fifthTaskIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(fifthTaskIndex.equals(fifthTaskIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse(fifthTaskIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/BBProductiveIcon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                errorMessage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 1,
      "BransonNg": 4,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * NullPointerException} if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * NullPointerException} if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path tempDir;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 3,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Tests JSON Read and Write */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                FileUtil.readFromFile(SERIALIZATION_FILE),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.deserializeObjectFromJsonFile("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                serializableTestClass.getListOfLocalDateTimes(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                serializableTestClass.getMapOfIntegerToString(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 15,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Word parameter cannot be empty\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"Word parameter should be a single word\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    // ---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                        .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 36,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPetStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonPomodoroStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path temporaryFolder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonTaskListStorage(temporaryFolder.resolve(\"taskList.json\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(temporaryFolder.resolve(\"pet.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonPomodoroStorage(temporaryFolder.resolve(\"pomodoro.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(temporaryFolder.resolve(\"statistics.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Setup LogicManager with JsonTaskListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonTaskListIoExceptionThrowingStub("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        temporaryFolder.resolve(\"invalidTaskList.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(temporaryFolder.resolve(\"invalidPet.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonPomodoroStorage(temporaryFolder.resolve(\"invalidPomodoro.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonStatisticsStorage(temporaryFolder.resolve(\"invalidStorage.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"invalidPrefs.json\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String addCommand \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                AddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TASK1).withTags().build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.addTask(expectedTask);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e logic.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command and confirms that - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertCommandSuccess("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String inputCommand, String expectedMessage, Model expectedModel)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws CommandException, ParseException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * is correct."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * correct."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getPet(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getPomodoro(),"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getStatistics(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Executes the command and confirms that - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     *"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertCommandFailure("
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String inputCommand,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A stub class to throw an {@code IOException} when the save method is called. */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static class JsonTaskListIoExceptionThrowingStub extends JsonTaskListStorage {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        private JsonTaskListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void saveTaskList(ReadOnlyTaskList taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4,
      "BransonNg": 58,
      "Permas-Teo": 30,
      "-": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/PetManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class PetManagerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private final PetManager petManager \u003d new PetManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementEXP_bydone() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.incrementExp();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(pet.getExp().equals(\"5\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void incrementEXP_byPom() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.incrementPomExp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(pet.getExp().equals(\"25\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateLastDoneTime_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new Pet("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \"BB\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \"50\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \"1\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        \"HAPPY\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        LocalDateTime.now().minus(Duration.ofMinutes(5)).toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateLastDoneTaskWhenDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String lastDoneTaskTime \u003d pet.getLastDoneTaskTime();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime lastDoneTaskTimeWithoutMili \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                LocalDateTime.parse(lastDoneTaskTime).withNano(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                LocalDateTime.now()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withNano(0)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .toString()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .equals(lastDoneTaskTimeWithoutMili.toString()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                petManager"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .getTimeForHangry()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withNano(0)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .equals(LocalDateTime.now().withNano(0).plusMinutes(1)));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeToHangry_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet(\"BB\", \"50\", \"1\", \"HAPPY\", LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.changeToHangry();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(pet.getMood().equals(\"HANGRY\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void changeToHappy_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet(\"BB\", \"50\", \"1\", \"HANGRY\", LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.changeToHappy();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(pet.getMood().equals(\"HAPPY\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateDisplayElementsHappy_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet(\"BB\", \"50\", \"1\", \"HAPPY\", LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getExpBarInt().equals(\"50 XP / 100 XP\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getLevelText().equals(\"1\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getPetImage().equals(\"/images/pet/level1.png\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getExpBarImage().equals(\"/images/progress/ProgressBar50%.png\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateDisplayElementsHangry_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet(\"BB\", \"150\", \"2\", \"HANGRY\", LocalDateTime.now().toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.setPet(pet);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        petManager.updateDisplayElements();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getExpBarInt().equals(\"50 XP / 100 XP\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getLevelText().equals(\"2\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getPetImage().equals(\"/images/pet/level2hangry.png\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(petManager.getExpBarImage().equals(\"/images/progress/ProgressBar50%.png\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 80,
      "artlee06": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/PomodoroManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.storage.JsonPetStorage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.storage.JsonPomodoroStorage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.storage.JsonStatisticsStorage;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.storage.JsonTaskListStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomodoroManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @TempDir public Path temporaryFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PetManager petManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomodoroManager pomodoroManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new JsonTaskListStorage(temporaryFolder.resolve(\"taskList.json\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(temporaryFolder.resolve(\"pet.json\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new JsonPomodoroStorage(temporaryFolder.resolve(\"pomodoro.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new JsonStatisticsStorage(temporaryFolder.resolve(\"statistics.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        StorageManager storage \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager \u003d new PomodoroManager(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        petManager \u003d new PetManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setDefaultStartTime(25f);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setRestTime(5f);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPomodoroManager(pomodoroManager);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.setPetManager(petManager);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void produceCorrectTimeAsString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String timeString \u003d pomodoroManager.getDefaultStartTimeAsString();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(timeString.equals(\"25:00\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void setPomodoroTimes_updateModel() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String newDefaultTime;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String newRestTime;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setDefaultStartTime(42f);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setRestTime(13f);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        newDefaultTime \u003d model.getPomodoro().getDefaultTime();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        newRestTime \u003d model.getPomodoro().getRestTime();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        boolean defaultMatches \u003d newDefaultTime.equals(\"42.0\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        boolean restMatches \u003d newRestTime.equals(\"13.0\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(defaultMatches);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(restMatches);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void generateUpdatedDayDataTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime start \u003d end.minusHours(48);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cDayData\u003e dayDatas \u003d pomodoroManager.generateUpdatedDayData(start, end);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(dayDatas.size() \u003d\u003d 3);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void updateStatisticsTest() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final int AMOUNT_TO_TEST \u003d 42;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime end \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime start \u003d end.minusMinutes(AMOUNT_TO_TEST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        DayData d \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                model.getDayDataFromDateStatistics("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        new Date(LocalDateTime.now().toLocalDate().toString()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(d.getPomDurationData().value \u003d\u003d 0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.setStartDateTime(start);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        pomodoroManager.updateStatistics(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cDayData\u003e dayDatas \u003d pomodoroManager.generateUpdatedDayData(start, end);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        int totalMinutes \u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (DayData dayData : dayDatas) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            DayData a \u003d model.getDayDataFromDateStatistics(dayData.getDate());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            totalMinutes +\u003d a.getPomDurationData().value;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(totalMinutes \u003d\u003d AMOUNT_TO_TEST);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 106,
      "artlee06": 2,
      "Permas-Teo": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/StatisticsManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.model.Statistics.DEFAULT_DAILY_TARGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAY6;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.getTypicalStatistics;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class StatisticsManagerTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    StatisticsManager statisticsManager \u003d new StatisticsManager();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setStatistics_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statisticsManager.setStatistics(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateStatisticsDisplayValues_typicalDayDatas_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsManager.setStatistics(new Statistics(getTypicalStatistics()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsManager.updateStatisticsDisplayValues();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedDailyTargetText \u003d DEFAULT_DAILY_TARGET;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Integer dataPomDurationData \u003d DAY6.getPomDurationData().value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Integer expectedProgressDaily \u003d dataPomDurationData \u003e\u003d 100 ? 100 : dataPomDurationData;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedProgressDailyText \u003d String.valueOf(expectedProgressDaily);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Integer expectedPercentage \u003d (expectedProgressDaily / 10) * 10;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedProgressBarDailyFilepathString \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"/images/progress/ProgressBar\" + expectedPercentage + \"%.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(statisticsManager.getDailyTargetText(), expectedDailyTargetText);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(statisticsManager.getProgressDailyText(), expectedProgressDailyText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                statisticsManager.getProgressBarDailyFilepathString(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                expectedProgressBarDailyFilepathString);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateStatisticsDisplayValues_nullStatistics_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                () -\u003e statisticsManager.updateStatisticsDisplayValues());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDailyTargetText_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statisticsManager.setDailyTargetText(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains integration tests (interaction with the Model) for {@code AddCommand}. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_newTask_success() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.addTask(validTask);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(validTask),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                model,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskInList \u003d model.getTaskList().getTaskList().get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertCommandFailure(new AddCommand(taskInList), model, AddCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 9,
      "BransonNg": 9,
      "Permas-Teo": 14,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.Observer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void constructor_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_taskAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        ModelStubAcceptingTaskAdded modelStub \u003d new ModelStubAcceptingTaskAdded();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validTask),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.tasksAdded);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_duplicateTask_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task validTask \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validTask);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTask(validTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                CommandException.class,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task alice \u003d new TaskBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task bob \u003d new TaskBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A default model stub that have all of the methods failing. */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public String[] getTagNames() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public boolean hasTag(Tag t) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void setTaskSaver(TaskSaver taskSaver) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTaskList(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void showAllTasks() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public PetManager getPetManager() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPetName(String name) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setComparator(Comparator\u003cTask\u003e comparator, String sortOrder) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setSearchResultOrder(Comparator\u003cTask\u003e compare) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void setPetManager(PetManager PetManager) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public ReadOnlyStatistics getStatistics() {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void updateDataDatesStatistics() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public void updatesDayDataStatistics(DayData dayData) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public DayData getDayDataFromDateStatistics(Date date) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public Task getPomodoroTask() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setPomodoroDefaultTime(float defaultTimeInMin) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setPomodoroRestTime(float restTimeInMin) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setPomodoroTimeLeft(float timeLeft) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            // TODO Auto-generated method stub"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void setStatisticsManager(StatisticsManager statisticsManager) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            // TODO Auto-generated method stub"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void notifyMainWindow(String inputString) throws CommandException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void addObserver(Observer observer) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A Model stub that contains a single task. */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private class ModelStubWithTask extends ModelStub {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        private final Task task;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        ModelStubWithTask(Task task) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            this.task \u003d task;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return this.task.isSameTask(task);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A Model stub that always accept the task being added. */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private class ModelStubAcceptingTaskAdded extends ModelStub {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final ArrayList\u003cTask\u003e tasksAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return tasksAdded.stream().anyMatch(task::isSameTask);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            tasksAdded.add(task);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return new TaskList();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 63,
      "FyonnOh": 2,
      "artlee06": 21,
      "BransonNg": 44,
      "Permas-Teo": 29,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_emptyTaskList_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_nonEmptyTaskList_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model model \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(new TaskList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 13,
      "Permas-Teo": 13,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandCompletorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CompletorException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class CommandCompletorTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final int DEFAULT_LIST_SIZE \u003d 5;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_commandAutoComplete_successful() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandCompletor cc \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedAddCommand \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"add n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/forschool r/15/04/20@10:30 \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult actualAddCommand \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        \"ad n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/forschool r/15/04/20@10:30\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        DEFAULT_LIST_SIZE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedAddCommand, actualAddCommand.getSuggestion());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDoneCommand \u003d \"done 1 2 3 \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult actualDoneCommand \u003d cc.getSuggestedCommand(\"do 1 2 3\", DEFAULT_LIST_SIZE);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDoneCommand, actualDoneCommand.getSuggestion());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDeleteCommand \u003d \"delete 1 2 3 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult actualDeleteCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand(\"del 1 2 3\", DEFAULT_LIST_SIZE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDeleteCommand, actualDeleteCommand.getSuggestion());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedFindCommand \u003d \"find hello world \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult actualFindCommand \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand(\"fi hello world\", DEFAULT_LIST_SIZE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedFindCommand, actualFindCommand.getSuggestion());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_indexAutoComplete_successful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandCompletor cc \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDoneCommand \u003d \"done 1 2 \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult actualDoneCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand(\"do 1 2 7 8 9999 -10 0.5\", DEFAULT_LIST_SIZE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDoneCommand, actualDoneCommand.getSuggestion());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(actualDoneCommand instanceof CompletorDeletionResult, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDeleteCommand \u003d \"delete 1 5 \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CompletorResult actualDeleteCommand \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand(\"del 0 01 5 6\", DEFAULT_LIST_SIZE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDeleteCommand, actualDeleteCommand.getSuggestion());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(actualDeleteCommand instanceof CompletorDeletionResult, true);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_argsAutoComplete_successful() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandCompletor cc \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedAddCommand \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"add n/Math Homework des/Chapter 5, Pages 1 - 3 t/forschool p/3 r/15/04/20@10:30 \";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualAddCommand \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                \"add n/Math Homework des/Chapter 5, Pages 1 - 3  t/forschool 3 15/04/20@10:30\","
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                DEFAULT_LIST_SIZE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .getSuggestion();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedAddCommand, actualAddCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedEditCommand \u003d \"edit 2 r/15/04/20@10:30 p/3 \";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualEditCommand \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand(\"edit 2 15/04/20@10:30 p/3\", DEFAULT_LIST_SIZE)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .getSuggestion();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedEditCommand, actualEditCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedEditIndexUnchanged \u003d \"edit 2 r/15/04/20@10:30 \";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualEditIndexUnchanged \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                cc.getSuggestedCommand(\"edit 2 15/04/20@10:30\", DEFAULT_LIST_SIZE).getSuggestion();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedEditIndexUnchanged, actualEditIndexUnchanged);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_commandAutoComplete_unsuccessful() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandCompletor cc \u003d new CommandCompletor();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedAddCommand \u003d String.format(Messages.COMPLETE_UNFOUND_FAILURE, \"asjjj\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualAddCommand;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            actualAddCommand \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    cc.getSuggestedCommand("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    \"asjjj n/Math Homework p/1 des/Chapter 5, Pages 1 - 3 t/for school r/15/04/20@10:30\","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                    DEFAULT_LIST_SIZE)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                            .getSuggestion();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (CompletorException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            actualAddCommand \u003d e.getMessage();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedAddCommand, actualAddCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String actualDoneCommand;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            actualDoneCommand \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    cc.getSuggestedCommand(\"fffsdf 1,2,3\", DEFAULT_LIST_SIZE).getSuggestion();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (CompletorException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            actualDoneCommand \u003d e.getMessage();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedDoneCommand \u003d String.format(Messages.COMPLETE_UNFOUND_FAILURE, \"fffsdf\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedDoneCommand, actualDoneCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECURRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains helper methods for testing commands. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_NAME_TASK1 \u003d \"Homework 1\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_NAME_TASK2 \u003d \"Lab 2\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_PRIORITY_TASK1 \u003d \"1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_PRIORITY_TASK2 \u003d \"2\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_DESCRIPTION_TASK1 \u003d \"Pages 10 - 12\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_DESCRIPTION_TASK2 \u003d \"Introduction to TCP\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_TAG_MA1521 \u003d \"MA1521\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_TAG_HELP \u003d \"HELP\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String VALID_REMINDER \u003d \"15/03/21@16:07\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String VALID_RECURRING \u003d \"d\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String NAME_DESC_TASK1 \u003d \" \" + PREFIX_NAME + VALID_NAME_TASK1;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String NAME_DESC_TASK2 \u003d \" \" + PREFIX_NAME + VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String PRIORITY_DESC_TASK1 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TASK1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String PRIORITY_DESC_TASK2 \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DESCRIPTION_DESC_TASK1 \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TASK1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DESCRIPTION_DESC_TASK2 \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String TAG_DESC_HELP \u003d \" \" + PREFIX_TAG + VALID_TAG_HELP;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String TAG_DESC_MA1521 \u003d \" \" + PREFIX_TAG + VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String REMINDER \u003d \" \" + PREFIX_REMINDER + VALID_REMINDER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String RECURRING \u003d \" \" + PREFIX_RECURRING + VALID_RECURRING;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_NAME + \"math\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_PRIORITY + \"99\"; // any number not 1,2 or 3 not allowed in priority"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            \" \" + PREFIX_TAG + \"tricky*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String INVALID_REMINDER \u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \" \" + PREFIX_REMINDER + \"15/03/20@@@16:07\"; // invalid date"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static final String INVALID_REMINDER_PAST \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            \" \" + PREFIX_REMINDER + \"15/03/20@16:07\"; // invalid date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public static final String INVALID_RECURRING \u003d \" \" + PREFIX_RECURRING + \"m\"; // invalid format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TASK1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final EditCommand.EditTaskDescriptor DESC_TASK2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DESC_TASK1 \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new EditTaskDescriptorBuilder() // KIV might need to change this to include reminder"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK1)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK1)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK1)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_HELP)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DESC_TASK2 \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521, VALID_TAG_HELP)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Command command,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Model actualModel,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertCommandSuccess("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Command command, Model actualModel, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * - the task list, filtered task list and selected task in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertCommandFailure("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList expectedTaskList \u003d new TaskList(actualModel.getTaskList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        List\u003cTask\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedTaskList, actualModel.getTaskList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredTaskList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the task at the given {@code targetIndex}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * in the {@code model}\u0027s task list."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void showTaskAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d model.getFilteredTaskList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final String[] name \u003d task.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        model.updateFilteredTaskList(new NameContainsKeywordsPredicate(Arrays.asList(name)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(task, model.getFilteredTaskList().get(0));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 15,
      "FyonnOh": 2,
      "artlee06": 8,
      "BransonNg": 21,
      "Permas-Teo": 34,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StringBuilder(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", taskToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskToDelete \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StringBuilder(DeleteCommand.MESSAGE_DELETE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", taskToDelete));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.deleteTask(taskToDelete);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showNoTask(expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list list"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskList().getTaskList().size());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(new Index[] {INDEX_SECOND_TASK});"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Updates {@code model}\u0027s filtered list to show no one. */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 6,
      "BransonNg": 28,
      "Permas-Teo": 31,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DoneCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " * tests for {@code DoneCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DoneCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskToDone \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task doneTask \u003d new TaskBuilder(taskToDone).withReminder().withDone().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder(DoneCommand.MESSAGE_DONE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", doneTask));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedModel.setTask("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), doneTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskToDone \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task doneTask \u003d new TaskBuilder(taskToDone).withReminder().withDone().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        StringBuilder expectedMessage \u003d new StringBuilder(DoneCommand.MESSAGE_DONE_TASK_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedMessage.append(String.format(\"%n%s\", doneTask));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager expectedModel \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedModel.setTask("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased()), doneTask);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(expectedModel, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertCommandSuccess(doneCommand, model, expectedMessage.toString(), expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskList().getTaskList().size());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DoneCommand doneCommand \u003d new DoneCommand(new Index[] {outOfBoundIndex});"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(doneCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DoneCommand doneFirstCommand \u003d new DoneCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DoneCommand doneSecondCommand \u003d new DoneCommand(new Index[] {INDEX_SECOND_TASK});"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(doneFirstCommand.equals(doneFirstCommand));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DoneCommand deleteFirstCommandCopy \u003d new DoneCommand(new Index[] {INDEX_FIRST_TASK});"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(doneFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(doneFirstCommand.equals(1));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(doneFirstCommand.equals(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(doneFirstCommand.equals(doneSecondCommand));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Updates {@code model}\u0027s filtered list to show no one. */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void showNoTask(Model model) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        model.updateFilteredTaskList(p -\u003e false);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(model.getFilteredTaskList().isEmpty());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "artlee06": 2,
      "Permas-Teo": 107,
      "BransonNg": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showTaskAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task editedTask \u003d new TaskBuilder().withReminder(VALID_REMINDER).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(editedTask).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index indexLastTask \u003d Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task lastTask \u003d model.getFilteredTaskList().get(indexLastTask.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        TaskBuilder taskInList \u003d new TaskBuilder(lastTask);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedTask \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                taskInList"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastTask, descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.setTask(lastTask, editedTask);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_TASK, new EditTaskDescriptor());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task editedTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task taskInFilteredList \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task editedTask \u003d"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new TaskBuilder(taskInFilteredList)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withReminder(VALID_REMINDER)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        INDEX_FIRST_TASK,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK2).build());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TASK_SUCCESS, editedTask);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Model expectedModel \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskList(model.getTaskList()),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTask(model.getFilteredTaskList().get(0), editedTask);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_duplicateTaskUnfilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task firstTask \u003d model.getFilteredTaskList().get(INDEX_FIRST_TASK.getZeroBased());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(firstTask).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_TASK, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_duplicateTaskFilteredList_failure() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // edit task in filtered list into a duplicate in task list"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskInList \u003d model.getTaskList().getTaskList().get(INDEX_SECOND_TASK.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        INDEX_FIRST_TASK, new EditTaskDescriptorBuilder(taskInList).build());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_TASK);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_invalidTaskIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredTaskList().size() + 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list, but smaller than size of"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "     * task list"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_invalidTaskIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        showTaskAtIndex(model, INDEX_FIRST_TASK);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of task list list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getTaskList().getTaskList().size());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand editCommand \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditCommand("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        outOfBoundIndex,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK2).build());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_TASK_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_TASK, DESC_TASK1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        EditTaskDescriptor copyDescriptor \u003d new EditTaskDescriptor(DESC_TASK1);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_TASK, copyDescriptor);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_TASK, DESC_TASK1)));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_TASK, DESC_TASK2)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 21,
      "artlee06": 8,
      "Permas-Teo": 28,
      "BransonNg": 73,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditTaskDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class EditTaskDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        EditTaskDescriptor descriptorWithSameValues \u003d new EditTaskDescriptor(DESC_TASK1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(DESC_TASK1.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(DESC_TASK1.equals(DESC_TASK1));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(DESC_TASK2));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_TASK1).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_TASK1)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAmy \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder(DESC_TASK1)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAmy \u003d new EditTaskDescriptorBuilder(DESC_TASK1).withTags(VALID_TAG_MA1521).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(DESC_TASK1.equals(editedAmy));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 3,
      "Permas-Teo": 25,
      "BransonNg": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult expectedCommandResult \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TASKS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains integration tests (interaction with the Model) for {@code FindCommand}. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model model \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Model expectedModel \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new ModelManager("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    getTypicalTaskList(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pet(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Pomodoro(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new Statistics(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_tag_taskFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        HashSet\u003cTag\u003e testTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] tagNames \u003d model.getTagNames();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Tag newTag \u003d new Tag(tagNames[0]);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        testTags.add(newTag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(testTags);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Task t : model.getFilteredTaskList()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (t.hasTag(newTag)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                tl.addTask(t);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(tl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_tagName_taskFound() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        HashSet\u003cTag\u003e testTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] tagNames \u003d model.getTagNames();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Tag newTag \u003d new Tag(tagNames[0]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        testTags.add(newTag);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task taskWithTag \u003d new TaskBuilder().withName(\"Im a new task\").withTags(\"forTest\").build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                preparePredicate(taskWithTag.getName().fullName, testTags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList tl \u003d new TaskList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        tl.addTask(taskWithTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (Task t : model.getFilteredTaskList()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            if (t.hasTag(newTag)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                tl.addTask(t);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.addTask(taskWithTag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(tl);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Command sort \u003d new SortCommand(new String[] {\"name\"});"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            sort.execute(model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            sort.execute(expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void execute_zeroKeywords_noTaskFound() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_TASKS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedModel.updateFilteredTaskList(predicate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredTaskList());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}. */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")), tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(new String[0]), tags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4,
      "BransonNg": 69,
      "Permas-Teo": 13,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains integration tests (interaction with the Model) and unit tests for ListCommand. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        model \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        getTypicalTaskList(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new UserPrefs()); // Should we shift these to ModelManager"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        model.getTaskList(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pet(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Pomodoro(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new Statistics(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "Permas-Teo": 8,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.Observer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PetManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.StatisticsManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class SetCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPetName_successful() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet pet \u003d new Pet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ModelStubWithPet modelStub \u003d new ModelStubWithPet(pet);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        modelStub.setPetName(\"Momu\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(pet.getName().equals(\"Momu\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setPomodoroDefaultTime_successful() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pomodoro pomodoro \u003d new Pomodoro();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ModelStubWithPomodoro modelStub \u003d new ModelStubWithPomodoro(pomodoro);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        modelStub.setPomodoroDefaultTime(5);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertTrue(pomodoro.getDefaultTime().equals(\"5.0\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setTaskSaver(TaskSaver taskSaver) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void addTask(Task task) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setTaskList(ReadOnlyTaskList newData) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public ReadOnlyTaskList getTaskList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setTask(Task target, Task editedTask) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public ObservableList\u003cTask\u003e getFilteredTaskList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public boolean hasTag(Tag t) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public String[] getTagNames() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void updateFilteredTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void showAllTasks() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public PetManager getPetManager() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPetName(String name) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setComparator(Comparator\u003cTask\u003e comparator, String sortOrder) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setSearchResultOrder(Comparator\u003cTask\u003e compare) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPetManager(PetManager PetManager) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void updateDataDatesStatistics() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void updatesDayDataStatistics(DayData dayData) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public DayData getDayDataFromDateStatistics(Date date) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public Task getPomodoroTask() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPomodoroDefaultTime(float defaultTimeInMin) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPomodoroRestTime(float restTimeInMin) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPomodoroTimeLeft(float timeLeft) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setStatisticsManager(StatisticsManager statisticsManager) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        public void notifyMainWindow(String inpuString) throws CommandException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void addObserver(Observer observer) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private class ModelStubWithPomodoro extends ModelStub {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        private final Pomodoro pomodoro;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ModelStubWithPomodoro(Pomodoro pomodoro) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            this.pomodoro \u003d pomodoro;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPomodoroDefaultTime(float defaultTimeInMin) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            this.pomodoro.setDefaultTime(Float.toString(defaultTimeInMin));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private class ModelStubWithPet extends ModelStub {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        private final Pet pet;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ModelStubWithPet(Pet pet) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            this.pet \u003d pet;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        public void setPetName(String name) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            this.pet.setName(name);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 233,
      "artlee06": 14,
      "BransonNg": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.PomodoroManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.logic.parser.FindCommandParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskPriority1 \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder().withName(\"Task 1\").withPriority(\"1\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskPriority2 \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder().withName(\"Task 2\").withPriority(\"2\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskPriority3 \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder().withName(\"Task 3\").withPriority(\"3\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDate1 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 1\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(4))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDate2 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 2\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(3))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDate3 \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withName(\"Reminder Task 3\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(1))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static Task taskDateDone3 \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder(taskDate3)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withReminder(LocalDateTime.now().plusDays(1))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .withDone()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static ModelStub modelStub;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelStub \u003d new SortCommandTest().new ModelStub();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelStub.setTaskList(stubList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortWithFindDone_successful() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] prioritySort \u003d {\"priority\"};"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(prioritySort).execute(modelStub);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        new FindCommandParser().parse(\" Reminder\").execute(modelStub);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        commandResult \u003d new SortCommand(prioritySort).execute(modelStub);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(stubList);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, prioritySort[0]),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDateDone3);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] reversePriorityAfterPriority \u003d {\"priority\", \"r-priority\"};"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        new SortCommand(reversePriorityAfterPriority).execute(modelStub);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByPriority_successful() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] prioritySort \u003d {\"priority\", \"name\"};"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(prioritySort).execute(modelStub);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(stubList);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, String.join(\", \", prioritySort)),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByName_successful() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] nameSort \u003d {\"name\"};"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(nameSort).execute(modelStub);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(stubList);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, nameSort[0]),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByDate_successful() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] dateSort \u003d {\"date\"};"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(dateSort).execute(modelStub);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(stubList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, dateSort[0]),"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void execute_sortByDone_doneTaskreSort_successful() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String[] doneSort \u003d {\"done\"};"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        CommandResult commandResult \u003d new SortCommand(doneSort).execute(modelStub);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task doneTask \u003d doneTask(taskPriority1);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelStub.setTask(taskPriority1, doneTask);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList stubList \u003d new TaskList();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelStub expectedModel \u003d new ModelStub();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskPriority3);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(taskDate3);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        stubList.addTask(doneTask);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedModel.setTaskList(stubList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(SortCommand.MESSAGE_SUCCESS, doneSort[0]),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedModel.getFilteredTaskList(), modelStub.getFilteredTaskList());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Task doneTask(Task t) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new TaskBuilder(taskPriority1).withDone().withReminder().build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A default model stub that have all of the methods failing. */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private class ModelStub extends ModelManager {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Path getTaskListFilePath() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setTaskListFilePath(Path taskListFilePath) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public boolean hasTask(Task task) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void deleteTask(Task target) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPet getPet() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPetName(String name) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public ReadOnlyPomodoro getPomodoro() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public PomodoroManager getPomodoroManager() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroManager(PomodoroManager pomodoroManager) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public void setPomodoroTask(Task task) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        public ReadOnlyStatistics getStatistics() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 28,
      "BransonNg": 235,
      "Permas-Teo": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECURRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMINDER_PAST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK2;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECURRING;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMINDER;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HELP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MA1521;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECURRING;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TASK2).withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                PREAMBLE_WHITESPACE"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK2"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK1"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK2"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // multiple prioritys - last priority accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2 + PRIORITY_DESC_TASK2 + DESCRIPTION_DESC_TASK2 + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Task expectedTaskMultipleTags \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(TASK2).withTags(VALID_TAG_HELP, VALID_TAG_MA1521).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTaskMultipleTags));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // with reminder and no tags"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task expectedTaskReminder \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new TaskBuilder(TASK2).withTags().withReminder(VALID_REMINDER).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                NAME_DESC_TASK2 + PRIORITY_DESC_TASK2 + DESCRIPTION_DESC_TASK2 + REMINDER,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new AddCommand(expectedTaskReminder));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // with reminder and tags"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task expectedTaskReminderTags \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new TaskBuilder(TASK2)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .withTags(VALID_TAG_HELP, VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .withReminder(VALID_REMINDER)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + REMINDER,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new AddCommand(expectedTaskReminderTags));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // with recurring"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task expectedTaskRecurring \u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new TaskBuilder(TASK2)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withTags()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withRecurring(VALID_RECURRING, LocalDateTime.now())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2 + PRIORITY_DESC_TASK2 + DESCRIPTION_DESC_TASK2 + RECURRING,"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new AddCommand(expectedTaskRecurring));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // with recurring and reminder"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task expectedTaskRecurRem \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new TaskBuilder(TASK2)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withTags()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withReminder(VALID_REMINDER)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withRecurring(VALID_RECURRING, LocalDateTime.now())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + REMINDER"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + RECURRING,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new AddCommand(expectedTaskRecurRem));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // with recurring, reminder and tags"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Task expectedTaskEverything \u003d"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new TaskBuilder(TASK2)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withTags(VALID_TAG_HELP, VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withReminder(VALID_REMINDER)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withRecurring(VALID_RECURRING, LocalDateTime.now())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + REMINDER"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + RECURRING,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new AddCommand(expectedTaskEverything));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task expectedTask \u003d new TaskBuilder(TASK1).withTags().build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK1 + PRIORITY_DESC_TASK1 + DESCRIPTION_DESC_TASK1,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new AddCommand(expectedTask));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                VALID_NAME_TASK2 + PRIORITY_DESC_TASK2 + DESCRIPTION_DESC_TASK2,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                INVALID_NAME_DESC"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + VALID_TAG_HELP,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, INVALID_NAME_DESC + INVALID_PRIORITY_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                PREAMBLE_NON_EMPTY"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK2"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // invalid reminder due to wrong format"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + VALID_TAG_HELP"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + INVALID_REMINDER,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                Reminder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // invalid reminder due time being in the past"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + VALID_TAG_HELP"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + INVALID_REMINDER_PAST,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                Reminder.MESSAGE_CONSTRAINTS_PAST);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // invalid recurring due to wrong format"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                NAME_DESC_TASK2"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + VALID_TAG_HELP"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + INVALID_RECURRING,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                Recurring.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 16,
      "artlee06": 102,
      "Permas-Teo": 64,
      "BransonNg": 38,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * expectedValues} and only the last value is returned upon calling {@code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void assertArgumentPresent("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix * */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertPreamblePresent("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String argsString \u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 9,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** Contains helper methods for testing command parsers. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * created equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertParseSuccess("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * message equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 1,
      "BransonNg": 7,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations outside of"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the same path through the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * DeleteCommand, and therefore we test only one of them. The path variation for those two cases"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * occur inside the ParserUtil, and therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(new Index[] {INDEX_FIRST_TASK}));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"a\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 10,
      "Permas-Teo": 1,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RECURRING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMINDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_REMINDER_PAST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RECURRING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMINDER;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HELP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_MA1521;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RECURRING;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMINDER;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_TASK1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_TASK1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_TASK1, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"1\" + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS); // invalid priority"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // valid priority followed by invalid priority. The test case for invalid"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // priority followed"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // by valid"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"1\" + PRIORITY_DESC_TASK2 + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Task} being"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // edited,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, \"1\" + TAG_DESC_HELP + TAG_DESC_MA1521 + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, \"1\" + TAG_DESC_HELP + TAG_EMPTY + TAG_DESC_MA1521, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                parser, \"1\" + TAG_EMPTY + TAG_DESC_HELP + TAG_DESC_MA1521, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                \"1\" + INVALID_NAME_DESC + VALID_DESCRIPTION_TASK1 + VALID_PRIORITY_TASK1,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // reminders, for invalid and for reminders set in the past"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_REMINDER, Reminder.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_REMINDER_PAST, Reminder.MESSAGE_CONSTRAINTS_PAST);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // recurring"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RECURRING, Recurring.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_TASK;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + NAME_DESC_TASK1"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + REMINDER"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        + RECURRING;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withName(VALID_NAME_TASK1)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK1)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521, VALID_TAG_HELP)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withReminder(VALID_REMINDER)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withRecurring(VALID_RECURRING, LocalDateTime.now())"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_TASK1;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withName(VALID_NAME_TASK1).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRIORITY_DESC_TASK1;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_TASK1).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_TASK1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withDescription(VALID_DESCRIPTION_TASK1).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_HELP;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // reminder"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + REMINDER;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptorBuilder().withReminder(VALID_REMINDER).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // recurring"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RECURRING;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .withRecurring(VALID_RECURRING, LocalDateTime.now())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String userInput \u003d"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK1"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK1"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_HELP"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + TAG_DESC_MA1521;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_HELP, VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PRIORITY_DESC + PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditTaskDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new EditTaskDescriptorBuilder().withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userInput \u003d"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                targetIndex.getOneBased()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + DESCRIPTION_DESC_TASK2"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        + PRIORITY_DESC_TASK2;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor \u003d"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new EditTaskDescriptorBuilder()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_TASK;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 10,
      "FyonnOh": 4,
      "artlee06": 26,
      "Permas-Teo": 68,
      "BransonNg": 41,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                \"     \","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertParseSuccess(parser, \" Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "BransonNg": 5,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"2\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                MESSAGE_INVALID_INDEX,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(INDEX_FIRST_TASK, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority((String) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_validValueWithoutWhitespace_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void parsePriority_validValueWithWhitespace_returnsTrimmedPriority() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String priorityWithWhitespace \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        System.out.println(priorityWithWhitespace);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "artlee06": 2,
      "BransonNg": 18,
      "Permas-Teo": 6,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/PomCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.PomCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class PomCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private PomCommandParser parser \u003d new PomCommandParser();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void parse_invalidTime_failure() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                \"1 tm/-1\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseFailure("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                parser,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                \"1 tm/0\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, PomCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void parse_validIndex_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final int INDEX \u003d 42;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index index \u003d Index.fromOneBased(INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomCommand expectedCommand \u003d new PomCommand(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseSuccess(parser, \"\" + INDEX, expectedCommand);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void parse_validTimer_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final int INDEX \u003d 42;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        final float TIMER_AMOUNT \u003d 17f;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Index index \u003d Index.fromOneBased(INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        PomCommand expectedCommand \u003d new PomCommand(index, TIMER_AMOUNT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertParseSuccess(parser, INDEX + \" tm/17\", expectedCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class SetCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // private SetCommandParser parser \u003d new SetCommandParser();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String VALID_PETNAME \u003d \"BB\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String VALID_POM \u003d \"30\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private String VALID_DAILY \u003d \"150\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    //     SetCommandParser parser \u003d new SetCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     // SetCommand expectedSetCommand \u003d new SetCommand(new PetName(VALID_PETNAME) ,   new"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // PomDuration(VALID_POM) , new DailyTarget(VALID_DAILY));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    //     SetCommand expectedSetCommand \u003d new SetCommand(new PetName(VALID_PETNAME), new"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    // PomDuration(\"\"), new DailyTarget(\"\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    //     assertParseSuccess("
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    //         parser,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    //         \" pet/BB\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    //         expectedSetCommand);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    // }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 19,
      "artlee06": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TaskListParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.EditTaskDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListParserTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskListParser parser \u003d new TaskListParser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(TaskUtil.getAddCommand(task));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(new AddCommand(task), command);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        DeleteCommand command \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (DeleteCommand)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_TASK.getOneBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(new DeleteCommand(new Index[] {INDEX_FIRST_TASK}), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        EditTaskDescriptor descriptor \u003d new EditTaskDescriptorBuilder(task).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        EditCommand command \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (EditCommand)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                EditCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + INDEX_FIRST_TASK.getOneBased()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                                        + TaskUtil.getEditTaskDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_TASK, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                (FindCommand)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        parser.parseCommand("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                FindCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + \" \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                        + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ParseException.class,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                MESSAGE_UNKNOWN_COMMAND,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 13,
      "BransonNg": 29,
      "Permas-Teo": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB_3;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.util.TaskBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.testutil.TaskListBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(new TaskList(), new TaskList(modelManager.getTaskList()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(new Statistics(), modelManager.getStatistics());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setTaskListFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath_validPath_setsTaskListFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.setTaskListFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(path, modelManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasTask(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTag_returnsTrue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(modelManager.hasTag(new Tag(\"MA1521\")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskBuilder lowerCaseTag \u003d new TaskBuilder(HOMEWORK10).withTags(\"ma1521\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.setTask(HOMEWORK10, lowerCaseTag.build());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(modelManager.hasTag(new Tag(\"MA1521\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void multipleTag_returnsTrue() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; i++) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            TaskBuilder lowerCaseTag \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    new TaskBuilder(HOMEWORK10).withName(String.format(\"task %d\", i));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            modelManager.addTask(lowerCaseTag.build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(modelManager.hasTag(new Tag(\"MA1521\")));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        for (int i \u003d 0; i \u003c 100; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            modelManager.deleteTask(modelManager.getFilteredTaskList().get(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(modelManager.hasTag(new Tag(\"MA1521\")));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.deleteTask(modelManager.getFilteredTaskList().get(0));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(modelManager.hasTag(new Tag(\"MA1521\")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_taskNotInTaskList_returnsFalse() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(modelManager.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_taskInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        modelManager.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(modelManager.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void getFilteredTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                UnsupportedOperationException.class,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                () -\u003e modelManager.getFilteredTaskList().remove(0));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setStatisticsManager_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setStatisticsManager(null));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList taskList \u003d new TaskListBuilder().withTask(HOMEWORK10).withTask(LAB_3).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList differentTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        modelManager \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager(taskList, new Pet(), new Pomodoro(), new Statistics(), userPrefs);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ModelManager modelManagerCopy \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new ModelManager(taskList, new Pet(), new Pomodoro(), new Statistics(), userPrefs);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different taskList -\u003e returns false"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                modelManager.equals("
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new ModelManager("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                differentTaskList,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pet(),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pomodoro(),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Statistics(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                userPrefs)));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String[] keywords \u003d HOMEWORK10.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        modelManager.updateFilteredTaskList("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                modelManager.equals("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new ModelManager("
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                taskList, new Pet(), new Pomodoro(), new Statistics(), userPrefs)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        modelManager.showAllTasks();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        differentUserPrefs.setTaskListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                modelManager.equals("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        new ModelManager("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                taskList,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pet(),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Pomodoro(),"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                new Statistics(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                differentUserPrefs)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4,
      "Permas-Teo": 26,
      "BransonNg": 55,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/StatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.VALID_POM_DURATION_DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.VALID_TASKS_DONE_DATA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAY0;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAYNEW;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.getTypicalDayDatas;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.getTypicalStatistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.settings.DailyTarget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.testutil.DayDataBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class StatisticsTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private final String VALID_DAILY_TARGET \u003d \"50\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDailyTarget_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics expectedStatistics \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedStatistics.setDailyTarget(VALID_DAILY_TARGET);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DailyTarget expectedDailyTarget \u003d new DailyTarget(VALID_DAILY_TARGET);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(expectedStatistics.getDailyTarget().equals(expectedDailyTarget));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDailyTarget_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statistics.setDailyTarget(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics expectedStatistics \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.setDayDatas(getTypicalDayDatas());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedStatistics, statistics);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statistics.setDayDatas(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statistics.resetData(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void resetData_withValidReadOnlyStatistics_replacesData() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics newData \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.resetData(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(newData, statistics);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDates_nextDay_success() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statistics \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.updateDataDates(DAYNEW.getDate().value);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics expectedStatistics \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        expectedStatistics.update("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new DayDataBuilder(DAYNEW).withPomDurationData(\"0\").withTasksDoneData(\"0\").build());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedStatistics, statistics);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDates_manyDaysLater_success() { // many days \u003e CONSTANT_SIZE"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statistics \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        LocalDate dayManyDaysLater \u003d DAYNEW.getDate().value.plusDays(50);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statistics.updateDataDates(dayManyDaysLater);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics expectedStatistics \u003d new Statistics(dayManyDaysLater);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedStatistics, statistics);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDayData_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statistics.updateDayData(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getDayDataFromDate_nullDate_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e statistics.getDayDataFromDate(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getDayDataFromDate_dayDataNotInStatistics_returnsNull() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(null, statistics.getDayDataFromDate(DAYNEW.getDate()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getDayDataFromDate_dayDataInStatistics_returnsTrue() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statisticsTypical \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(DAY0, statisticsTypical.getDayDataFromDate(DAY0.getDate()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getDayDataFromDate_dayDataWithSameIdentityFieldsInStatistics_returnsTrue() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statisticsTypical \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData editedDayData \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new DayDataBuilder(DAY0)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPomDurationData(VALID_POM_DURATION_DATA)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTasksDoneData(VALID_TASKS_DONE_DATA)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        statisticsTypical.updateDayData(editedDayData);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(DAY0, statisticsTypical.getDayDataFromDate(DAY0.getDate()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getCustomQueue_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                UnsupportedOperationException.class, () -\u003e statistics.getCustomQueue().remove(0));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 7,
      "Hardoh": 2,
      "Permas-Teo": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/model/TaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private final TaskList taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(Collections.emptyList(), taskList.getTaskList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void resetData_withValidReadOnlyTaskList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList newData \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(newData, taskList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void resetData_withDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Two tasks with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d Arrays.asList(HOMEWORK10, editedAlice);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskListStub newData \u003d new TaskListStub(newTasks);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e taskList.resetData(newData));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e taskList.hasTask(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_taskNotInTaskList_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(taskList.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_taskInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(taskList.hasTask(HOMEWORK10));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void hasTask_taskWithSameIdentityFieldsInTaskList_returnsTrue() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(HOMEWORK10);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(taskList.hasTask(editedAlice));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void getTaskList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e taskList.getTaskList().remove(0));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** A stub ReadOnlyTaskList whose tasks list can violate interface constraints. */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static class TaskListStub implements ReadOnlyTaskList {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskListStub(Collection\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            this.tasks.setAll(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        public Optional\u003cString\u003e getSortOrder() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 9,
      "Permas-Teo": 9,
      "BransonNg": 36,
      "-": 55
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTaskListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setTaskListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/CustomQueueTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.VALID_POM_DURATION_DATA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.VALID_TASKS_DONE_DATA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAY0;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAYNEW;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAYNEW2;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.dayData.exceptions.DayDataNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.dayData.exceptions.InvalidTableException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.testutil.DayDataBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class CustomQueueTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private CustomQueue customQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private LocalDate TYPICAL_STATISTICS_LATEST_LOCAL_DATE \u003d LocalDate.parse(\"2020-03-23\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private LocalDate VALID_LOCAL_DATE \u003d LocalDate.parse(\"2018-11-13\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDataDatesCustom_success() throws InvalidTableException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.updateDataDatesCustom(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CustomQueue expectedCustomQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedCustomQueue, customQueue);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void updateDataDatesCustom_nullLocalDatethrowsNullPointerException()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.updateDataDatesCustom(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDayDataCustom_nullLocalDatethrowsNullPointerException()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.updateDayDataCustom(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void updateDayDataCustom_nonexistentDayDatathrowsDayDataNotFoundException()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DayDataNotFoundException.class, () -\u003e customQueue.updateDayDataCustom(DAYNEW));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void getDayDataFromDateCustom_nullLocalDatethrowsNullPointerException()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.getDayDataFromDateCustom(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void getDayDataFromDateCustom_nonexistentDayDatathrowsDayDataNotFoundException()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(VALID_LOCAL_DATE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                DayDataNotFoundException.class,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                () -\u003e customQueue.getDayDataFromDateCustom(DAYNEW.getDate()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void getDayDataFromDateCustom_validDayData_returnsDayData()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        DayData day0Empty \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new DayDataBuilder(DAY0).withPomDurationData(\"0\").withTasksDoneData(\"0\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(day0Empty, customQueue.getDayDataFromDateCustom(day0Empty.getDate()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void add_nullDayData_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.add(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData_nullTargetDayData_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.setDayData(null, DAYNEW));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData_nullEditedDayDatan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.setDayData(DAYNEW, null));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData_targetDayDataNotInList_throwsDayDataNotFoundException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(DayDataNotFoundException.class, () -\u003e customQueue.setDayData(DAYNEW, DAYNEW));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData_editedDayDataIsSameDayData_success() throws InvalidTableException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.pop();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(DAYNEW);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.setDayData(DAYNEW, DAYNEW);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CustomQueue expectedCustomQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.pop();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.add(DAYNEW);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedCustomQueue, customQueue);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayData_editedDayDataHasSameIdentity_success() throws InvalidTableException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.pop();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(DAYNEW);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        DayData editedDayData \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new DayDataBuilder(DAYNEW)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPomDurationData(VALID_POM_DURATION_DATA)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTasksDoneData(VALID_TASKS_DONE_DATA)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.setDayData(DAYNEW, editedDayData);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CustomQueue expectedCustomQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.pop();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.add(editedDayData);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedCustomQueue, customQueue);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setDayData_editedDayDataHasDifferentIdentity_success()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.pop();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(DAYNEW);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.setDayData(DAYNEW, DAYNEW2);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CustomQueue expectedCustomQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.pop();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.add(DAYNEW2);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedCustomQueue, customQueue);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas_nullCustomQueue_throwsNullPointerException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e customQueue.setDayDatas((CustomQueue) null));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void setDayDatas_customQueue_replacesOwnListWithProvidedCustomQueue()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.pop();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(DAYNEW);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        CustomQueue expectedCustomQueue \u003d new CustomQueue();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.pop();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedCustomQueue.add(DAYNEW);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.setDayDatas(expectedCustomQueue);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(expectedCustomQueue, customQueue);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void setDayDatas_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                NullPointerException.class, () -\u003e customQueue.setDayDatas((List\u003cDayData\u003e) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                UnsupportedOperationException.class,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                () -\u003e customQueue.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void tableConstraintsAreEnforced_validTable_returnsTrue() throws InvalidTableException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                customQueue.tableConstraintsAreEnforced("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        customQueue.asUnmodifiableObservableList()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void tableConstraintsAreEnforced_invalidTable_returnsFalse()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throws InvalidTableException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.init(TYPICAL_STATISTICS_LATEST_LOCAL_DATE);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        customQueue.add(DAY0);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                customQueue.tableConstraintsAreEnforced("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        customQueue.asUnmodifiableObservableList()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 30,
      "Permas-Teo": 178
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.INVALID_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(INVALID_DATE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // invalid dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"12-12-1997\")); // wrong format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"12/12/1997\")); // wrong format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(Date.isValidDate(\"not a date\")); // wrong format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid dates"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Date.isValidDate(\"2020-03-19\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/PomDurationDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.INVALID_POM_DURATION_DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class PomDurationDataTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PomDurationData(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_invalidPomDurationData_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                IllegalArgumentException.class,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                () -\u003e new PomDurationData(INVALID_POM_DURATION_DATA));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidPomDurationData() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // invalid pomDurationData"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"cat\")); // not integer"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"12-12-1997\")); // date"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"-3\")); // negative number"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(PomDurationData.isValidPomDurationData(\"123456\")); // exceed minutes in a day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid pomDurationData"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(PomDurationData.isValidPomDurationData(\"50\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 5,
      "Permas-Teo": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/dayData/TasksDoneDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.model.dayData;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.INVALID_TASKS_DONE_DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class TasksDoneDataTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TasksDoneData(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void constructor_invalidTasksDoneData_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                IllegalArgumentException.class, () -\u003e new TasksDoneData(INVALID_TASKS_DONE_DATA));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidTasksDoneData() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // invalid tasksDoneData"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"cat\")); // not integer"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"12-12-1997\")); // date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(TasksDoneData.isValidTasksDoneData(\"-3\")); // negative number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid tasksDoneData"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(TasksDoneData.isValidTasksDoneData(\"50\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 4,
      "Permas-Teo": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Description.isValidDescription(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "Permas-Teo": 13,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"consultation\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"consultation\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"cOnsultation\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(predicate.test(new TaskBuilder().withName(\"Alice consultation\").build()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Keywords match priority and address, but does not match name"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"1\", \"SICP\", \"Pages\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                predicate.test("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        new TaskBuilder()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                .withName(\"Homework99\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                .withPriority(\"1\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                                .withDescription(\"SICP pages 5 - 7\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                                .build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "FyonnOh": 1,
      "BransonNg": 16,
      "Permas-Teo": 12,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void constructor_invalidPriority_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String invalidPriority \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // null priority number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // invalid priority numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"priority\")); // non-numeric"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // valid priority numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"3\")); // long priority numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 1,
      "BransonNg": 21,
      "-": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/RecurringTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public class RecurringTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void parseDateTime() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // valid parsing"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime dateTime \u003d Recurring.parseDateTime(\"17/03/21@14:17\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(2021, dateTime.getYear());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(3, dateTime.getMonthValue());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(17, dateTime.getDayOfMonth());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(14, dateTime.getHour());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(17, dateTime.getMinute());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void parseRecurType() throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // valid types"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(RecurType.DAILY, Recurring.parseRecurType(\"d\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertEquals(RecurType.WEEKLY, Recurring.parseRecurType(\"w\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // invalid and thus catch exception"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e Recurring.parseRecurType(\"m\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void shouldUpdateReminder() throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // assert True"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        Recurring testRecurring \u003d new Recurring(\"d\", LocalDateTime.of(2020, 03, 18, 14, 16));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime testDateTime \u003d LocalDateTime.of(2020, 03, 18, 14, 17);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertTrue(testRecurring.shouldUpdateReminder(testDateTime));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // assert False"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        LocalDateTime testFalseDateTime \u003d LocalDateTime.of(2021, 03, 18, 14, 16);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertFalse(testRecurring.shouldUpdateReminder(testFalseDateTime));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "artlee06": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/ReminderTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "artlee06"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "artlee06"
        },
        "content": "public class ReminderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void isValidReminder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        // valid reminders"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertTrue(Reminder.isValidReminder(\"17/03/20@14:17\")); // regular example of a date"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertTrue(Reminder.isValidReminder(\"17/03/20@07:17\")); // regular example but an AM date"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertFalse(Reminder.isValidReminder(\"\")); // empty string not allowed"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertFalse("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Reminder.isValidReminder(\"17th March at 7.17am\")); // miscallenous date not allowed"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertFalse(Reminder.isValidReminder(\"jfknsjvskvks\")); // gibberish not allowed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public void calculateDelay() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime pastTime \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Reminder.stringFormatter.parse(\"17/03/20@14:17\", LocalDateTime::from);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        LocalDateTime futureTime \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                Reminder.stringFormatter.parse(\"17/03/20@14:30\", LocalDateTime::from);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        assertTrue(Reminder.calculateDelay(pastTime, futureTime) \u003d\u003d 780);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "artlee06"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 6,
      "artlee06": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task task \u003d new TaskBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e task.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void isSameTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(HOMEWORK10));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.isSameTask(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(HOMEWORK10).withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // same name, same priority, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // same name, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // same name, same priority, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        editedAlice \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.isSameTask(editedAlice));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task aliceCopy \u003d new TaskBuilder(HOMEWORK10).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.equals(aliceCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(HOMEWORK10.equals(HOMEWORK10));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(5));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different task -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(TASK2));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Task editedAlice \u003d new TaskBuilder(HOMEWORK10).withName(VALID_NAME_TASK2).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withPriority(VALID_PRIORITY_TASK2).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withDescription(VALID_DESCRIPTION_TASK2).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        editedAlice \u003d new TaskBuilder(HOMEWORK10).withTags(VALID_TAG_HELP).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(HOMEWORK10.equals(editedAlice));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 4,
      "FyonnOh": 2,
      "Permas-Teo": 38,
      "BransonNg": 14,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/task/UniqueTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "package seedu.address.model.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.TASK2;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.DuplicateTaskException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.exceptions.TaskNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TaskBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class UniqueTaskListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private final UniqueTaskList uniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_taskNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(uniqueTaskList.contains(HOMEWORK10));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void contains_taskInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertTrue(uniqueTaskList.contains(HOMEWORK10));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void contains_taskWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertTrue(uniqueTaskList.contains(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void add_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.add(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void add_duplicateTask_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.add(HOMEWORK10));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_nullTargetTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(null, HOMEWORK10));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_nullEditedTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_targetTaskNotInList_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                TaskNotFoundException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, HOMEWORK10));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_editedTaskIsSameTask_success() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, HOMEWORK10);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_editedTaskHasSameIdentity_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        Task editedAlice \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new TaskBuilder(HOMEWORK10)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        .withTags(VALID_TAG_MA1521)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, editedAlice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedUniqueTaskList.add(editedAlice);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_editedTaskHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.setTask(HOMEWORK10, TASK2);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTask_editedTaskHasNonUniqueIdentity_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(DuplicateTaskException.class, () -\u003e uniqueTaskList.setTask(HOMEWORK10, TASK2));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void remove_nullTask_throwsNullPointerException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.remove(null));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void remove_taskDoesNotExist_throwsTaskNotFoundException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(TaskNotFoundException.class, () -\u003e uniqueTaskList.remove(HOMEWORK10));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void remove_existingTask_removesTask() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.remove(HOMEWORK10);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTasks_nullUniqueTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class, () -\u003e uniqueTaskList.setTasks((UniqueTaskList) null));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTasks_uniqueTaskList_replacesOwnListWithProvidedUniqueTaskList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        uniqueTaskList.setTasks(expectedUniqueTaskList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTasks_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTaskList.setTasks((List\u003cTask\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTasks_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        uniqueTaskList.add(HOMEWORK10);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e taskList \u003d Collections.singletonList(TASK2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        uniqueTaskList.setTasks(taskList);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        UniqueTaskList expectedUniqueTaskList \u003d new UniqueTaskList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        expectedUniqueTaskList.add(TASK2);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertEquals(expectedUniqueTaskList, uniqueTaskList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void setTasks_listWithDuplicateTasks_throwsDuplicateTaskException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        List\u003cTask\u003e listWithDuplicateTask \u003d Arrays.asList(HOMEWORK10, HOMEWORK10);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DuplicateTaskException.class, () -\u003e uniqueTaskList.setTasks(listWithDuplicateTask));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Hardoh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                UnsupportedOperationException.class,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                () -\u003e uniqueTaskList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 112,
      "Permas-Teo": 39,
      "BransonNg": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedDayDataTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayData.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAY0;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonAdaptedDayDataTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String INVALID_DATE \u003d \"2020-03-176\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String INVALID_POM_DURATION_DATA \u003d \"50000\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String INVALID_TASKS_DONE_DATA \u003d \"-1\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_DATE \u003d DAY0.getDate().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_POM_DURATION_DATA \u003d DAY0.getPomDurationData().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String VALID_TASKS_DONE_DATA \u003d DAY0.getTasksDoneData().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_validDayDataDetails_returnsDayData() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d new JsonAdaptedDayData(DAY0);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(DAY0, dayData.toModelType());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        INVALID_DATE, VALID_POM_DURATION_DATA, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedDayData(null, VALID_POM_DURATION_DATA, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidPomDurationData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        VALID_DATE, INVALID_POM_DURATION_DATA, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d PomDurationData.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_nullPomDurationData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData(VALID_DATE, null, VALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, PomDurationData.class.getSimpleName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_nullTasksDoneData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData(VALID_DATE, VALID_POM_DURATION_DATA, null);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, TasksDoneData.class.getSimpleName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidTasksDoneData_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedDayData dayData \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedDayData("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        VALID_DATE, VALID_POM_DURATION_DATA, INVALID_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        String expectedMessage \u003d TasksDoneData.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, dayData::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 1,
      "Permas-Teo": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.InvalidPetException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class JsonAdaptedPetTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_PET_NAME \u003d \"@.@\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_LASTDONETASKTIME \u003d \"123456\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_LEVEL_UPPER \u003d \"4\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_LEVEL_LOWER \u003d \"0\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_EXP_EXP_FIRST \u003d \"150\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_EXP_LEVEL_FIRST \u003d \"1\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_EXP_EXP_SECOND \u003d \"50\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_EXP_LEVEL_SECOND \u003d \"2\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String INVALID_MOOD \u003d \"NOT UNHAPPY\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALID_PET_NAME \u003d \"Momu\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALID_LASTDONETASKTIME \u003d \"2020-04-11T13:59:24.013541600\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALID_LEVEL \u003d \"2\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALID_EXP_EXP \u003d \"150\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALID_EXP_LEVEL \u003d \"2\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public static final String VALID_MOOD \u003d \"HANGRY\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidPetName_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_PET_NAME,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_EXP,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_LEVEL,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_MOOD,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_PETNAME_MESSAGE;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidLastDoneTaskTime_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PET_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_EXP,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_LEVEL,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_MOOD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_LASTDONETASKTIME_MESSAGE;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidLevelLower_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PET_NAME,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_EXP,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_LEVEL_LOWER,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_MOOD,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_LEVEL_MESSAGE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidLevelUpper_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PET_NAME,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_EXP,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_LEVEL_UPPER,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_MOOD,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_LEVEL_MESSAGE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidExpFirst_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PET_NAME,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_EXP_EXP_FIRST,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_EXP_LEVEL_FIRST,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_MOOD,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_EXP_MESSAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidExpSecond_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PET_NAME,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_EXP_EXP_SECOND,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_EXP_LEVEL_SECOND,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_MOOD,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_EXP_MESSAGE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void toModelType_invalidMood_returnsInvalidPetException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonAdaptedPet adaptedPet \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedPet("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PET_NAME,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_EXP,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_EXP_LEVEL,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_MOOD,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_LASTDONETASKTIME);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        String expectedMessage \u003d JsonAdaptedPet.INVALID_MOOD_MESSAGE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(InvalidPetException.class, expectedMessage, adaptedPet::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.model.task.Done.DONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedTask.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.LAB_3;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "// TODO stub: arthur please put in valid reminder here to replace final nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonAdaptedTaskTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // private static final String INVALID_DONE \u003d \"#A\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_NAME \u003d LAB_3.getName().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_PRIORITY \u003d LAB_3.getPriority().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d LAB_3.getDescription().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final String VALID_DONE \u003d DONE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            LAB_3.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_validTaskDetails_returnsTask() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask task \u003d new JsonAdaptedTask(LAB_3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(LAB_3, task.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_NAME,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PRIORITY,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_DONE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_TAGS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        VALID_PRIORITY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        VALID_DONE,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        VALID_TAGS,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_invalidPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_NAME,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        INVALID_PRIORITY,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_DONE,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_TAGS,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d Priority.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_nullPriority_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        VALID_NAME, null, VALID_DESCRIPTION, VALID_DONE, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        VALID_NAME, VALID_PRIORITY, null, VALID_DONE, VALID_TAGS, null, null);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        String expectedMessage \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, task::toModelType);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonAdaptedTask task \u003d"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonAdaptedTask("
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_NAME,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_PRIORITY,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        VALID_DONE,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        invalidTags,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        null);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        assertThrows(IllegalValueException.class, task::toModelType);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 26,
      "FyonnOh": 16,
      "Permas-Teo": 18,
      "BransonNg": 17,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonPetStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "public class JsonPetStorageTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonPetStorageTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyPet\u003e readPet(String filePath) throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return new JsonPetStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                .readPet(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void readPet_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readPet(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertFalse(readPet(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readPet(\"notJsonFormatPet.json\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void readAndSavePet_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempPet.json\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        Pet original \u003d new Pet();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        JsonPetStorage jsonPetStorage \u003d new JsonPetStorage(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        jsonPetStorage.savePet(original, filePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        ReadOnlyPet readBack \u003d jsonPetStorage.readPet(filePath).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertEquals(original, new Pet(readBack));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        original.setName(\"Momu\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        original.changeHangry();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        jsonPetStorage.savePet(original, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        readBack \u003d jsonPetStorage.readPet(filePath).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertEquals(original, new Pet(readBack));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        jsonPetStorage.savePet(original); // file path not specified"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        readBack \u003d jsonPetStorage.readPet().get(); // file path not specified"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertEquals(original, new Pet(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void savePet_nullPet_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePet(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private void savePet(ReadOnlyPet pet, String filePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            new JsonPetStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                    .savePet(pet, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    public void savePets_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e savePet(new Pet(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableStatisticsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.testutil.TypicalDayDatas;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonSerializableStatisticsTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableStatisticsTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path TYPICAL_STATISTICS_FILE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"typicalStatistics.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path INVALID_STATISTICS_FILE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            TEST_DATA_FOLDER.resolve(\"invalidStatistics.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_typicalStatisticsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonSerializableStatistics dataFromFile \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_STATISTICS_FILE, JsonSerializableStatistics.class)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statisticsFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics typicalStatistics \u003d TypicalDayDatas.getTypicalStatistics();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(statisticsFromFile, typicalStatistics);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void toModelType_invalidStatisticsFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonSerializableStatistics dataFromFile \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_STATISTICS_FILE, JsonSerializableStatistics.class)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                        .get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 2,
      "Permas-Teo": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableTaskListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonSerializableTaskListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTaskListTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TYPICAL_TASKS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalTasks.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path INVALID_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidTask.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private static final Path DUPLICATE_TASK_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateTask.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_typicalTasksFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(TYPICAL_TASKS_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList taskListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList typicalTasksTaskList \u003d TypicalTasks.getTypicalTaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(taskListFromFile, typicalTasksTaskList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_invalidTaskFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(INVALID_TASK_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void toModelType_duplicateTasks_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonSerializableTaskList dataFromFile \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonUtil.readJsonFile(DUPLICATE_TASK_FILE, JsonSerializableTaskList.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                IllegalValueException.class,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                JsonSerializableTaskList.MESSAGE_DUPLICATE_TASK,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 2,
      "BransonNg": 21,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonStatisticsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.storage.JsonAdaptedDayDataTest.VALID_POM_DURATION_DATA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.DAY0;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.getTypicalStatistics;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.testutil.DayDataBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class JsonStatisticsStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonStatisticsStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void readStatistics_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readStatistics(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyStatistics\u003e readStatistics(String filePath)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "            throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new JsonStatisticsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                .readStatistics(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String statisticsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statisticsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(statisticsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertFalse(readStatistics(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                DataConversionException.class,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                () -\u003e readStatistics(\"notJsonFormatStatistics.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void readStatistics_invalidAndValidDayDataStatistics_throwDataConversionException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                DataConversionException.class,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                () -\u003e readStatistics(\"invalidAndValidDayDataStatistics.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void readAndSaveStatistics_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempStatistics.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics original \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage jsonStatisticsStorage \u003d new JsonStatisticsStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyStatistics readBack \u003d jsonStatisticsStorage.readStatistics(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "        DayData newDay0 \u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "                new DayDataBuilder(DAY0).withPomDurationData(VALID_POM_DURATION_DATA).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        original.updateDayData(newDay0);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        jsonStatisticsStorage.saveStatistics(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        readBack \u003d jsonStatisticsStorage.readStatistics().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics_nullStatistics_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveStatistics(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Saves {@code Statistics} at the specified {@code filePath}. */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private void saveStatistics(ReadOnlyStatistics statistics, String filePath) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new JsonStatisticsStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .saveStatistics(statistics, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void saveStatistics_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveStatistics(new Statistics(), null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "FyonnOh": 6,
      "Permas-Teo": 102
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonTaskListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.HOMEWORK10;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.OPTIONAL_HOMEWORK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.OPTIONAL_LAB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class JsonTaskListStorageTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonTaskListStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readTaskList(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private java.util.Optional\u003cReadOnlyTaskList\u003e readTaskList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new JsonTaskListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .readTaskList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertFalse(readTaskList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DataConversionException.class, () -\u003e readTaskList(\"notJsonFormatTaskList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readTaskList_invalidAndValidTaskTaskList_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DataConversionException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e readTaskList(\"invalidAndValidTaskTaskList.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readAndSaveTaskList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempTaskList.json\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList original \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage jsonTaskListStorage \u003d new JsonTaskListStorage(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyTaskList readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        original.addTask(OPTIONAL_LAB);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        original.removeTask(HOMEWORK10);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original, filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList(filePath).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        original.addTask(OPTIONAL_HOMEWORK);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        jsonTaskListStorage.saveTaskList(original); // file path not specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        readBack \u003d jsonTaskListStorage.readTaskList().get(); // file path not specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(readBack));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList_nullTaskList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Saves {@code TaskList} at the specified {@code filePath}. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private void saveTaskList(ReadOnlyTaskList TaskList, String filePath) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new JsonTaskListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .saveTaskList(TaskList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void saveTaskList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveTaskList(new TaskList(), null));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 104
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            throws DataConversionException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        userPrefs.setTaskListFilePath(Paths.get(\"data\", \"tasklist.json\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Try saving when the file exists"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 11,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalDayDatas.getTypicalStatistics;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalPet.getTypicalPet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.testutil.TypicalPomodoro.getTypicalPomodoro;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyPet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyPomodoro;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.ReadOnlyStatistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.ReadOnlyTaskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonTaskListStorage taskListStorage \u003d new JsonTaskListStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPomodoroStorage pomodoroStorage \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                new JsonPomodoroStorage(getTempFilePath(\"pomodoro.json\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        JsonStatisticsStorage statisticsStorage \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new JsonStatisticsStorage(getTempFilePath(\"statistics.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        JsonPetStorage petStorage \u003d new JsonPetStorage(getTempFilePath(\"pet.json\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        storageManager \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                new StorageManager("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        taskListStorage,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        petStorage,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        pomodoroStorage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        statisticsStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                        userPrefsStorage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void taskListReadSave() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * {@link JsonTaskListStorage} class."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskListStorageTest} class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList original \u003d getTypicalTaskList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        storageManager.saveTaskList(original);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        ReadOnlyTaskList retrieved \u003d storageManager.readTaskList().get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertEquals(original, new TaskList(retrieved));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public void getTaskListFilePath() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertNotNull(storageManager.getTaskListFilePath());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void pomodoroReadSave() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * {@link JsonPomodoroStorage} class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskListStorageTest} class."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Pomodoro original \u003d getTypicalPomodoro();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        storageManager.savePomodoro(original);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyPomodoro retrieved \u003d storageManager.readPomodoro().get();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Pomodoro(retrieved));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void petReadSave() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * {@link JsonTaskListStorage} class."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonTaskListStorageTest} class."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Pet original \u003d getTypicalPet();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        storageManager.savePet(original);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyPet retrieved \u003d storageManager.readPet().get();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Pet(retrieved));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getPetFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertNotNull(storageManager.getPetFilePath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void statisticsReadSave() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * {@link JsonStatisticsStorage} class."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonStatisticsStorageTest} class."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics original \u003d getTypicalStatistics();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        storageManager.saveStatistics(original);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        ReadOnlyStatistics retrieved \u003d storageManager.readStatistics().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertEquals(original, new Statistics(retrieved));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public void getStatisticsFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        assertNotNull(storageManager.getStatisticsFilePath());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 58,
      "BransonNg": 19,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A set of assertion methods useful for writing tests. */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception. This is a"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * consistency with our custom {@link #assertThrows(Class, String, Executable)} method. To"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * standardize API calls in this project, users should use this method instead of {@link"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * expectedMessage}. If there\u0027s no need for the verification of the exception\u0027s error message,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * call {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static void assertThrows("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            Class\u003c? extends Throwable\u003e expectedType,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String expectedMessage,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 14,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DayDataBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.PomDurationData;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.TasksDoneData;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** A utility class to help with building DayData objects. */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class DayDataBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"2020-03-18\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_POM_DURATION_DATA \u003d \"100\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_TASKS_DONE_DATA \u003d \"10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private PomDurationData pomDurationData;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private TasksDoneData tasksDoneData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomDurationData \u003d new PomDurationData(DEFAULT_POM_DURATION_DATA);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        tasksDoneData \u003d new TasksDoneData(DEFAULT_TASKS_DONE_DATA);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Initializes the DayDataBuilder with the data of {@code dayDataToCopy}. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder(DayData dayDataToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        date \u003d dayDataToCopy.getDate();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        pomDurationData \u003d dayDataToCopy.getPomDurationData();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        tasksDoneData \u003d dayDataToCopy.getTasksDoneData();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the {@code Date} of the {@code DayData} that we are building. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder withDate(String date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the {@code PomDurationData} of the {@code DayData} that we are building. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder withPomDurationData(String pomDurationData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.pomDurationData \u003d new PomDurationData(pomDurationData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    /** Sets the {@code TasksDoneData} of the {@code DayData} that we are building. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayDataBuilder withTasksDoneData(String tasksDoneData) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        this.tasksDoneData \u003d new TasksDoneData(tasksDoneData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public DayData build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new DayData(date, pomDurationData, tasksDoneData);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditTaskDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class to help with building EditTaskDescriptor objects. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class EditTaskDescriptorBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private EditTaskDescriptor descriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.descriptor \u003d new EditTaskDescriptor(descriptor);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code EditTaskDescriptor} with fields containing {@code task}\u0027s details */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder(Task task) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor \u003d new EditTaskDescriptor();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setName(task.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setPriority(task.getPriority());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setDescription(task.getDescription());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setTags(task.getTags());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Name} of the {@code EditTaskDescriptor} that we are building. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Priority} of the {@code EditTaskDescriptor} that we are building. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Address} of the {@code EditTaskDescriptor} that we are building. */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditTaskDescriptor}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public EditTaskDescriptorBuilder withReminder(String reminder) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            descriptor.setReminder(new Reminder(reminder));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public EditTaskDescriptorBuilder withRecurring(String recurrStringStorage) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            descriptor.setRecurring(new Recurring(recurrStringStorage));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public EditTaskDescriptorBuilder withRecurring("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            String recurrString, LocalDateTime referenceDateTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            descriptor.setRecurring(new Recurring(recurrString, referenceDateTime));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public EditTaskDescriptor build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 24,
      "artlee06": 33,
      "BransonNg": 8,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A class used to test serialization and deserialization */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            String.format("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    \"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Done;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import seedu.address.model.task.Recurring;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "FyonnOh"
        },
        "content": "import seedu.address.model.task.Reminder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.exceptions.InvalidReminderException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class to help with building Task objects. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskBuilder {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Default homework\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_PRIORITY \u003d \"1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Default Pages 1 and 2\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final String DEFAULT_DONE \u003d \"N\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Done done;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private Optional\u003cReminder\u003e reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    private Optional\u003cRecurring\u003e recurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d new Done(DEFAULT_DONE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Initializes the TaskBuilder with the data of {@code taskToCopy}. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder(Task taskToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        name \u003d taskToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        priority \u003d taskToCopy.getPriority();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        description \u003d taskToCopy.getDescription();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        done \u003d taskToCopy.getDone();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(taskToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        reminder \u003d taskToCopy.getOptionalReminder();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        recurring \u003d taskToCopy.getOptionalRecurring();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Name} of the {@code Task} that we are building. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Task} that we are"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Address} of the {@code Task} that we are building. */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Sets the {@code Priority} of the {@code Task} that we are building. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public TaskBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.done \u003d new Done(Done.DONE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withReminder(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.of(new Reminder(dateTime));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskBuilder withReminder(String dateTime) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.of(new Reminder(dateTime));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        } catch (InvalidReminderException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    /** Sets reminder as optional.empty for task builder. */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public TaskBuilder withReminder() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        this.reminder \u003d Optional.empty();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public TaskBuilder withRecurring(String recurrStringStorage) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurring \u003d Optional.of(new Recurring(recurrStringStorage));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    public TaskBuilder withRecurring(String recurrString, LocalDateTime referenceDateTime) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurring \u003d Optional.of(new Recurring(recurrString, referenceDateTime));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "artlee06"
        },
        "content": "            this.recurring \u003d Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "artlee06"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "artlee06"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public Task build() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "artlee06"
        },
        "content": "        return new Task(name, priority, description, done, tags, reminder, recurring);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 18,
      "FyonnOh": 1,
      "artlee06": 30,
      "BransonNg": 42,
      "Permas-Teo": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * A utility class to help with building TaskList objects. Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * {@code TaskList ab \u003d new TaskListBuilder().withTask(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TaskListBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListBuilder() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListBuilder(TaskList taskList) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Adds a new {@code Task} to the {@code TaskList} that we are building. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskListBuilder withTask(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        taskList.addTask(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public TaskList build() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TaskUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditTaskDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class for Task. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TaskUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an add command string for adding the {@code task}. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static String getAddCommand(Task task) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getTaskDetails(task);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the part of command string for the given {@code task}\u0027s details. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static String getTaskDetails(Task task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        sb.append(PREFIX_NAME + task.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        sb.append(PREFIX_PRIORITY + task.getPriority().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + task.getDescription().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        task.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the part of command string for the given {@code EditTaskDescriptor}\u0027s details. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static String getEditTaskDescriptorDetails(EditTaskDescriptor descriptor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .getName()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .getPriority()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                .ifPresent("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                        priority -\u003e sb.append(PREFIX_PRIORITY).append(priority.value).append(\" \"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        descriptor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .getDescription()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                .ifPresent("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "                        address -\u003e sb.append(PREFIX_DESCRIPTION).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 14,
      "BransonNg": 14,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class for test cases. */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Folder used for temp files created during testing. Ignored by Git. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path. Creates"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the middle index of the task in the {@code model}\u0027s task list. */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size() / 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    /** Returns the last index of the Task in the {@code model}\u0027s Task list. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredTaskList().size());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns the task in the {@code model}\u0027s task list at {@code index}. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static Task getTask(Model model, Index index) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        return model.getFilteredTaskList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 6,
      "BransonNg": 6,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalDayDatas.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.Statistics;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import seedu.address.model.dayData.DayData;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "/** A utility class containing a list of {@code Task} objects to be used in tests. */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "public class TypicalDayDatas {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY0 \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-17\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"10\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"2\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY1 \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-18\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"0\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"0\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY2 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-19\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"40\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"7\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY3 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-20\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"30\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"4\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY4 \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-21\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"70\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"1\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY5 \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-22\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"100\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"3\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAY6 \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-23\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"90\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"2\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAYNEW \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-24\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"40\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"20\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final DayData DAYNEW2 \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            new DayDataBuilder()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDate(\"2020-03-25\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPomDurationData(\"400\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTasksDoneData(\"1\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    // public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    private TypicalDayDatas() {} // prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code TaskList} with all the typical tasks. */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static Statistics getTypicalStatistics() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        Statistics statistics \u003d new Statistics();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        for (DayData dayData : getTypicalDayDatas()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "            statistics.update(dayData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return statistics;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static List\u003cDayData\u003e getTypicalDayDatas() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(DAY0, DAY1, DAY2, DAY3, DAY4, DAY5, DAY6));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Permas-Teo": 84,
      "BransonNg": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a list of {@code Index} objects to be used in tests. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Index INDEX_FIRST_TASK \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Index INDEX_SECOND_TASK \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static final Index INDEX_THIRD_TASK \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 4,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPet.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a variety of {@code Pet} objects to be used in tests. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TypicalPet {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TypicalPet() {} // prevents instantiation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code Pet} with all the default attributes */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Pet getTypicalPet() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        Pet pet \u003d new Pet();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return pet;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPomodoro.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.Pomodoro;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a list of {@code Pomodoro} objects to be used in tests. */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "public class TypicalPomodoro {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TypicalPomodoro() {} // prevents instantiation"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code Pomdoro} with all the default attributes. */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static Pomodoro getTypicalPomodoro() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        return new Pomodoro();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK1;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_TASK2;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK1;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_TASK2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK1;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRIORITY_TASK2;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HELP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_MA1521;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "artlee06"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import seedu.address.model.TaskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "import seedu.address.model.task.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "/** A utility class containing a list of {@code Task} objects to be used in tests. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task HOMEWORK10 \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Homework 10\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Pages 100 - 112\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"MA1521\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withReminder(\"15/03/21@16:07\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task LAB_3 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Lab 3\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Introduction to UDP\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"help\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withReminder(\"10/03/21@16:07\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task TUTORIAL_1 \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"mum tells me to do Tutorial 1\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Introduction to Calculus\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"MA1521\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withReminder(\"05/03/21@16:07\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task BUY_MILK \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Buy milk\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Very hungry\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withRecurring(\"w\", LocalDateTime.now())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task FEED_CAT \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"mum tells me to feed cat\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Cat is making noise\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withReminder(\"08/03/21@16:07\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withRecurring(\"d\", LocalDateTime.now())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task RUN \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"mum tells me to run\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Complete 2.4km run!\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withRecurring(\"w\", LocalDateTime.now())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task GYM \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Gym\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"3\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Complete 100 sets of pushups\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "artlee06"
        },
        "content": "                    .withRecurring(\"w\", LocalDateTime.now())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task OPTIONAL_LAB \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Bonus Lab\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"1\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Implement Google\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task OPTIONAL_HOMEWORK \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(\"Homework 11\")"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(\"2\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(\"Fourier Analysis\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(\"Optional\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    // Manually added - Task\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task TASK1 \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(VALID_NAME_TASK1)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(VALID_PRIORITY_TASK1)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(VALID_DESCRIPTION_TASK1)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(VALID_TAG_HELP)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "    public static final Task TASK2 \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            new TaskBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withName(VALID_NAME_TASK2)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withPriority(VALID_PRIORITY_TASK2)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withDescription(VALID_DESCRIPTION_TASK2)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                    .withTags(VALID_TAG_MA1521, VALID_TAG_HELP)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    .build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    /** Returns an {@code TaskList} with all the typical tasks. */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    public static TaskList getTypicalTaskList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        TaskList ab \u003d new TaskList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "        for (Task task : getTypicalTasks()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "            ab.addTask(task);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Hardoh"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTasks() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "        return new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Permas-Teo"
        },
        "content": "                Arrays.asList(HOMEWORK10, LAB_3, TUTORIAL_1, BUY_MILK, FEED_CAT, RUN, GYM));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Hardoh": 5,
      "artlee06": 9,
      "Permas-Teo": 60,
      "BransonNg": 28,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * A test object which can be constructed via an FXML file. Unlike other JavaFX classes, this class"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "BransonNg"
        },
        "content": " * can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 2,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "            \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "    @TempDir public Path testFolder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                NullPointerException.class,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                AssertionError.class,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "                () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * UiPart used for testing. It should only be used with invalid FXML files or the valid file"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "     * located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "BransonNg"
        },
        "content": "        @FXML private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "BransonNg": 22,
      "-": 96
    }
  }
]
