[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        \u0027site-name\u0027: \u0027NUSProductivity\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "-": 154,
      "watsheldon": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    //testing travis, delete later"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.storage.CalendarBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.storage.JsonCalendarStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.storage.JsonModuleBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.storage.ModuleBookStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                userPrefs.getCalendarFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBookStorage moduleBookStorage \u003d new JsonModuleBookStorage(userPrefs.getModuleBookFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CalendarBookStorage calendarBookStorage \u003d new JsonCalendarStorage(userPrefs.getCalendarFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage, moduleBookStorage, calendarBookStorage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Optional\u003cModuleBook\u003e moduleBookOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Optional\u003cObservableList\u003cTask\u003e\u003e taskListOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook initialModules;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ObservableList\u003cTask\u003e initTask;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            moduleBookOptional \u003d storage.readModuleBook();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            taskListOptional \u003d storage.readCalendar();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (!moduleBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with an empty moduleBook\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            initialModules \u003d moduleBookOptional.orElseGet(ModuleBook::new);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            initTask \u003d taskListOptional.orElse(FXCollections.observableList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            initialModules \u003d new ModuleBook();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            initTask \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            initialModules \u003d new ModuleBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            initTask \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new ModelManager(initialData, userPrefs, initialModules, initTask);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            model.updateDeadlineTaskList(Model.PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            storage.saveCalendar(model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 13,
      "-": 180,
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_MODULE \u003d \"Module specified does not exist in the module book!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_TASK_INDEX \u003d \"The module task index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE \u003d \"Invalid Date format! Please key in Date in DD-MM-YYYY \\n%1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_INVALID_SORTING_PARAM \u003d \"Invalid parameter for sorting! \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"(sorting parameter can be either \u0027priority\u0027 or \u0027date\u0027)\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 4,
      "-": 13,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the user prefs\u0027 diary book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getDiaryBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an unmodifiable view of list of diaries */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cDiaryEntry\u003e getDiaryList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns an list of String that contains what is currently in the folder"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilesInFolderList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calender Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns a list of deadline Tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cTask\u003e getDeadlineTaskList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Profile Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNusModule\u003e getModulesListTaken();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableValue\u003cString\u003e getMajor();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Profile getProfile();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 50,
      "zhouxinwei97": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            storage.saveModuleBook(model.getModuleBook());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            storage.saveCalendar(model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getDiaryList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getDiaryBookFilePath();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getFilesInFolderList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getDeadlineTaskList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getModulesListTaken();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableValue\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getMajor();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Profile getProfile() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return model.getProfile();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return model.getModuleBookFilePath();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 5,
      "-": 79,
      "zhouxinwei97": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddBookCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class AddBookCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addressbook\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows AddBook tab.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String SWITCHED_MESSAGE \u003d \"Switched to AddBook Tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CalenderCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"calendar\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows Calendar tab.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String SWITCHED_MESSAGE \u003d \"Switched to Calendar Tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** The application should switch tab */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final boolean switchTab;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean switchTab) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.switchTab \u003d switchTab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this(feedbackToUser, false, false, false);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean isSwitchTab() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return switchTab;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 69,
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DiaryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diary\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows diary tab.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String SWITCHED_MESSAGE \u003d \"Switched to Diary tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedTags);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 20,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MajorCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Update the major the user taken in NUS."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class MajorCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"major\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": State your major (e.g. Computer Science) \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"for the app to help you with module planning\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: your major\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"Computer Science\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Major updated: \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Major majorTaken;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code NusModule}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public MajorCommand(Major major) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        majorTaken \u003d major;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.updateMajor(majorTaken);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + majorTaken);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof MajorCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 majorTaken.equals(((MajorCommand) other).majorTaken)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 45,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ModPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModPlanCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"modplan\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows modplan tab.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String SWITCHED_MESSAGE \u003d \"Switched to modplan Tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotesCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notes\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows notes tab.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String SWITCHED_MESSAGE \u003d \"Switched to notes Tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotesCreateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * NotesCommand is created when a notecommand is parsed, to return what operation to be done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * implementation is not yet completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCreateCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesCreate\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create new file in specified directory \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"PATH \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_FILE_NAME + \"FILE_NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_TYPE + \"TYPE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"PATH_TYPE\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"Desktop/ \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_FILE_NAME + \"Test.doc \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_TYPE + \"file \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"abs \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_CREATE_SUCCESS \u003d \"File is successfully created at \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_CREATE_FAIL \u003d \"File is unable to be created at \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_CREATE_DUPLICATE \u003d \"File already exists\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_NOTHING_HAPPENED \u003d \"Nothing Happened \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_MAKEDIR_SUCCESSFUL \u003d \"Directory is successfully created \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_MAKEDIR_UNSUCCESSFUL \u003d \"Directory is unable to be created \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_MAKEDIR_DUPLICATE \u003d \" already exists\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes note;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a new NotesCommand to Create/Open/Delete a new note."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param note the operation and location that will be done to the note."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesCreateCommand(Notes note) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.type \u003d note.getType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d note.getPath();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d note.getFilePathType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a document at the specified path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the created document will reside in."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult createDoc(String path) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.filePath.equals(\"abs\")) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.getCurrentDirectory() + File.separatorChar + path;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        buildDirectoryName(pathName); // Build the CurrentDirectory name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.exists() \u003d\u003d true) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_CREATE_DUPLICATE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            myFile.createNewFile();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes.setList(NotesListCommand.listfilesArray(Notes.getCurrentDirectory()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_CREATE_SUCCESS + pathName);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_CREATE_FAIL + pathName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Build the directory name to be shown as current directory."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathName current path name inputted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void buildDirectoryName(String pathName) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] splittedDirectoryName \u003d pathName.split(File.separator);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String newDirectory \u003d \"\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (int i \u003d 0; i \u003c splittedDirectoryName.length - 1; i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            newDirectory +\u003d splittedDirectoryName[i] + File.separator;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setCurrentDirectory(newDirectory);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a folder at the specified path."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the created document will reside in."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult createFolder(String path) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.filePath.equals(\"abs\")) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.getCurrentDirectory() + File.separatorChar + path;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.exists()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(pathName + MESSAGE_MAKEDIR_DUPLICATE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setCurrentDirectory(pathName);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.mkdir()) { // return true if directory is created"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes.setList(NotesListCommand.listfilesArray(Notes.getCurrentDirectory()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(\"successfully created\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(Notes.getCurrentDirectory());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_MAKEDIR_SUCCESSFUL + pathName);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_MAKEDIR_UNSUCCESSFUL + pathName);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes getNote() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.type.equals(\"file\")) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return createDoc(this.path);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (this.type.equals(\"folder\")) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return createFolder(this.path);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_NOTHING_HAPPENED);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesCreateCommand otherNotesOpen \u003d (NotesCreateCommand) other;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note.equals(otherNotesOpen.getNote());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotesDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * NotesCommand is created when a notecommand is parsed, to return what operation to be done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * implementation is not yet completed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesDeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesDelete\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete specified file \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"PATH \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_FILE_NAME + \"FILE_NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"PATH_TYPE\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"Desktop/ \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_FILE_NAME + \"Test.doc \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"abs \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_DELETE_SUCESSFUL \u003d \" is successfully deleted \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_DELETE_UNSUCCESSFUL \u003d \" is unable to be deleted \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_DELETE_NOT_FOUND \u003d \" does not exists\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_DELETE_FOLDER \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"You can only delete a file through this method, not a directory\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes note;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a new NotesCommand to Create/Open/Delete a new note."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param note the operation and location that will be done to the note."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesDeleteCommand(Notes note) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d note.getPath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d note.getFilePathType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Deletes a document at the specified path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the created document will reside in."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult deleteDoc(String path) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.filePath.equals(\"abs\")) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.getCurrentDirectory() + File.separatorChar + path;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        buildDirectoryName(pathName); // Build the CurrentDirectory name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!myFile.exists()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(pathName + MESSAGE_DELETE_NOT_FOUND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.isDirectory()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_FOLDER);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] fileNames \u003d this.path.split(File.separator);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.delete()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes.setList(NotesListCommand.listfilesArray(Notes.getCurrentDirectory()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(fileNames[fileNames.length - 1] + MESSAGE_DELETE_SUCESSFUL);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(fileNames[fileNames.length - 1] + MESSAGE_DELETE_UNSUCCESSFUL);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Build the directory name to be shown as current directory."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathName current path name inputted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void buildDirectoryName(String pathName) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] splittedDirectoryName \u003d pathName.split(File.separator);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String newDirectory \u003d \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (int i \u003d 0; i \u003c splittedDirectoryName.length - 1; i++) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            newDirectory +\u003d splittedDirectoryName[i] + File.separator;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setCurrentDirectory(newDirectory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes getNote() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deleteDoc(this.path);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesDeleteCommand otherNotesOpen \u003d (NotesDeleteCommand) other;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note.equals(otherNotesOpen.getNote());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotesListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * NotesCommand is created when a notecommand is parsed, to return what operation to be done."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * implementation is not yet completed"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesListCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesList\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": List files in specified directory \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"PATH \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"PATH TYPE \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"Desktop \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"abs\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_NOTHING_HAPPENED \u003d \"Nothing Happened \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_LISTED_DIR \u003d \"Listed Directory at \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_NOT_DIR \u003d \" is not a directory\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MESSAGE_NOT_EXIST \u003d \" does not exist\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes note;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a new NotesListCommand to list a new note."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param note the operation and location that will be done to the note."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesListCommand(Notes note) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d note.getPath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d note.getFilePathType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Tentative, may remove this function."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path dummy"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return dummy"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult listFiles(String path) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.filePath.equals(\"abs\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.getCurrentDirectory() + File.separatorChar + path;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.exists() \u003d\u003d false) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(pathName + MESSAGE_NOT_EXIST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (myFile.isDirectory() \u003d\u003d false) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(pathName + MESSAGE_NOT_DIR);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cNotes\u003e filesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File[] allFiles \u003d myFile.listFiles();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (File f : allFiles) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] allFileName \u003d f.toString().split(File.separator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String filename \u003d allFileName[allFileName.length - 1];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (filename.charAt(0) \u003d\u003d (\u0027.\u0027)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes note \u003d new Notes(filename);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            filesArrayList.add(note);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setList(filesArrayList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setCurrentDirectory(pathName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_LISTED_DIR + pathName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Tentative, to be updated."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path dummy"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return dummy"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ArrayList\u003cNotes\u003e listfilesArray(String path) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(path);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cNotes\u003e filesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File[] allFiles \u003d myFile.listFiles();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (File f : allFiles) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] allFileName \u003d f.toString().split(File.separator);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String filename \u003d allFileName[allFileName.length - 1];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (filename.charAt(0) \u003d\u003d (\u0027.\u0027)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes note \u003d new Notes(filename);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            filesArrayList.add(note);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filesArrayList;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes getNote() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return listFiles(this.path);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesListCommand otherNotesOpen \u003d (NotesListCommand) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note.equals(otherNotesOpen.getNote());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/NotesOpenCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_NOTES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.awt.Desktop;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * NotesCommand is created when a notecommand is parsed, to return what operation to be done."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * implementation is not yet completed"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesOpenCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"notesOpen\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens a file \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"PATH \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_FILE_NAME + \"FILE_NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"PATH_TYPE \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH + \"Desktop \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_FILE_NAME + \"test.doc \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_NOTES_PATH_TYPE + \"abs \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_OPEN_SUCCESS \u003d \"Opened file \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_OPEN_FAIL \u003d \"Failed to open file \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_UNABLE_TO_FIND \u003d \"Unable to find file to open \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes note;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Creates a new NotesOpenCommand to Open a new note."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param note the operation and location that will be done to the note."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesOpenCommand(Notes note) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d note.getPath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d note.getFilePathType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Opens a document at the specified path."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path the given path that the document resides in."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a CommandResult based on whether the operation succeed or failed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult openDoc(String path) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String pathName \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.filePath.equals(\"abs\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.HOME_DIRECTORY + File.separatorChar + path;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            pathName \u003d Notes.getCurrentDirectory() + File.separatorChar + path;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(pathName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (Desktop.isDesktopSupported()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                Desktop.getDesktop().open(myFile);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (!myFile.isDirectory()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                buildDirectoryName(pathName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                Notes.setCurrentDirectory(pathName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes.setList(NotesListCommand.listfilesArray(Notes.getCurrentDirectory()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_OPEN_SUCCESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IOException ex) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_OPEN_FAIL + this.path);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IllegalArgumentException ex) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_UNABLE_TO_FIND + this.path);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Build the directory name to be shown as current directory."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathName current path name inputted"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void buildDirectoryName(String pathName) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] splittedDirectoryName \u003d pathName.split(File.separator);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String newDirectory \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (int i \u003d 0; i \u003c splittedDirectoryName.length - 1; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            newDirectory +\u003d splittedDirectoryName[i] + File.separator;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes.setCurrentDirectory(newDirectory);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes getNote() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateNotesList(PREDICATE_SHOW_ALL_NOTES);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return openDoc(this.path);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesOpenCommand otherNotesOpen \u003d (NotesOpenCommand) other;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.note.equals(otherNotesOpen.getNote());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ProfileCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ProfileCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"profile\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows profile tab.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String SWITCHED_MESSAGE \u003d \"Switched to profile Tab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.searcher.Module;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eSearch Command Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Handler for Search Command"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"Use search to perform a module search. Syntax is search \u003cmodule code\u003e\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    + \"Example: search CS1101S\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String SEARCH_FAILURE \u003d \"There is no such Module\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static final String SYNTAX_FAILURE \u003d \"Your command seems to be wrong\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String modToSearch;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public SearchCommand(String modToSearch) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.modToSearch \u003d modToSearch;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        Module myMod;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            myMod \u003d Search.findModule(modToSearch);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return new CommandResult(myMod.toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return new CommandResult(SYNTAX_FAILURE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 42,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryAddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents the command that adds a diary entry."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryAddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryAdd\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for adding diary entries \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_CONTENT + \"ENTRY CONTENT\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_CONTENT + \"I failed my midterm today :( \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Diary entry added:\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final DiaryEntry diaryEntry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryAddCommand(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(diaryEntry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.diaryEntry \u003d diaryEntry;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (model.isEmptyDiaryEntry(diaryEntry)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"The diary entry is empty!\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        model.addDiaryEntry(diaryEntry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS + diaryEntry.getHeading()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 43,
      "zhouxinwei97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryDeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents the command that deletes a diary entry."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryDeleteCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryDelete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for deleting diary entries \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"ENTRY ID\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Diary entry deleted\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final int entryId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryDeleteCommand(int entryId) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.entryId \u003d entryId;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!model.isValidEntryId(entryId)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"The diary entry ID is not in range!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        model.deleteDiaryEntry(entryId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String messageResult \u003d \"Diary entry \" + entryId + \" deleted.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(messageResult);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 42,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryLogCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents the command that shows diary log."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryLogCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryLog\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": shows the log of added diary entries\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String diaryLogs \u003d model.showDiaryLog();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(diaryLogs);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 23,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryMoodCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents the command that tags a diary entry with mood."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryMoodCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryMood\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for tagging a diary entry with a specific mood \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"ENTRY ID\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_MOOD + \"WEATHER\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"1\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_MOOD + \"stressed\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"mood recorded\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final int entryId;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final Mood mood;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryMoodCommand(int entryId, Mood mood) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.entryId \u003d entryId;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!model.isValidEntryId(entryId)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"The diary entry ID is not in range!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        model.tagMood(entryId, mood);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String messageResult \u003d \"Mood recorded.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(messageResult);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 48,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryShowCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIARY_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public abstract class DiaryShowCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryShow\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows a particular diary entry\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + COMMAND_WORD + \": Shows a diary entry by specifying the entry ID \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"ENTRY ID \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"1 \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"or\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + COMMAND_WORD + \": Shows a diary entry by specifying the date \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_DIARY_DATE + \" DATE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_DIARY_DATE + \" 01-04-2020 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 27,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryShowDateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryShowDateCommand extends DiaryShowCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entry ids with given date: \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final LocalDate date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryShowDateCommand(LocalDate date) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!model.isExistingDate(date)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"Cannot find diary entry with the given date!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        List\u003cInteger\u003e ids \u003d model.getListOfIdsByDate(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \" + ids + \". Use diaryShow id/ENTRY_ID \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                + \"to see a particular entry.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 34,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryShowIdCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryShowIdCommand extends DiaryShowCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Diary entry shown: \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final int entryId;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryShowIdCommand(int entryId) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.entryId \u003d entryId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!model.isValidEntryId(entryId)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"The diary entry ID is not in range!\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        DiaryEntry entry \u003d model.getDiaryEntryById(entryId);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \" + entry);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 31,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/diarycommand/DiaryWeatherCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.commands.diarycommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEATHER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents the command that tags a diary entry with weather."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryWeatherCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"diaryWeather\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \": Allows for tagging a diary entry with a specific weather \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"ENTRY ID\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_WEATHER + \"WEATHER\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_ENTRY_ID + \"1\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            + PREFIX_WEATHER + \"sunny\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"weather recorded\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final int entryId;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final Weather weather;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryWeatherCommand(int entryId, Weather weather) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.entryId \u003d entryId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!model.isValidEntryId(entryId)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new CommandException(\"The diary entry ID is not in range!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        model.tagWeather(entryId, weather);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String messageResult \u003d \"Weather recorded.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new CommandResult(messageResult);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 47,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulecommand/AddModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES_TAKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Adds a module to our application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"moduleAdd\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for adding modules \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"GRADE [Optional] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"A+ \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module added: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_NUS_MODULE \u003d \"module already exist\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final NusModule toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code NusModule}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public AddModuleCommand(NusModule module) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (model.hasModule(toAdd.getModuleCode())) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_NUS_MODULE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateModulesListTaken(PREDICATE_SHOW_ALL_MODULES_TAKEN);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 60,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulecommand/CapCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Calculates current CAP based on NUS modules the user has taken."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class CapCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cap\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Calculates your current CAP based on the modules\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"CAP calculated\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double result \u003d model.getCap();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String message \u003d MESSAGE_SUCCESS + \"\\nCurrent CAP: \" + result;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(message);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulecommand/DeleteModuleCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES_TAKEN;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Deletes a NUS module identified using given module code from the module book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"moduleDel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Allows for deleting modules \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: MODULE CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module deleted \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code NusModule}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DeleteModuleCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModuleCode)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.deleteModule(targetModuleCode);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.updateModulesListTaken(PREDICATE_SHOW_ALL_MODULES_TAKEN);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + targetModuleCode);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModuleCode.equals(((DeleteModuleCommand) other).targetModuleCode));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/modulecommand/GradeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_MODULES_TAKEN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Updates a module\u0027s grade in our module book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class GradeCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"grade\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \": Adds or changes a grade to a module in the module book. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"GRADE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_GRADE + \"A+ \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Module grade updated: \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Grade gradeToBeUpdated;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModuleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public GradeCommand(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        gradeToBeUpdated \u003d grade;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModuleCode)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.gradeModule(targetModuleCode, gradeToBeUpdated);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateModulesListTaken(PREDICATE_SHOW_ALL_MODULES_TAKEN);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + targetModuleCode + \" \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + gradeToBeUpdated.getText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof GradeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModuleCode.equals(((GradeCommand) other).targetModuleCode));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 64,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/TaskBreakdownCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Shows the number of tasks for each module in the program."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class TaskBreakdownCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskBreakdown\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed number of tasks for each module:\\n%s\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String taskBreakdown \u003d model.getTaskBreakdown();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(model.getTaskBreakdown());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, taskBreakdown));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 25,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/addcommand/AddDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Adds a deadline."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadlineAdd\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds deadline. Format of input should be:\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \" deadlineAdd desc/\u003cdescription\u003e by/{DD-MM-YYYY} cat/\u003cCategory\u003e\\n \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + \"Example: deadlineAdd desc/CS2101 presentation script by/02-04-2020 cat/School Work\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline added: \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Task deadlineToAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddDeadlineCommand (Task deadline) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(deadline);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        deadlineToAdd \u003d deadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        if (model.isEmptyDeadline(deadlineToAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new CommandException(\"There is no task to be added!\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.addDeadlineTask(deadlineToAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTaskList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + deadlineToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "                || (other instanceof AddDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "                \u0026\u0026 deadlineToAdd.equals(((AddDeadlineCommand) other).deadlineToAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "xuanxinng": 40,
      "zhouxinwei97": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/addcommand/AddToDoCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Adds a todo."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class AddToDoCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"todo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds todo. Format of input should be:\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            + \" todo \u003cdescription\u003e \\n\" + \"Example: todo water plants\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Todo added: \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public static final String MESSAGE_INVALID \u003d \"Your todo seems to be empty!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Task todoToAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddToDoCommand(Task todoToAdd) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(todoToAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.todoToAdd \u003d todoToAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        if (model.isEmptyToDo(todoToAdd)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new CommandException(\"There is no task to be added!\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        model.addToDo(todoToAdd);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + todoToAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof AddToDoCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 todoToAdd.equals(((AddToDoCommand) other).todoToAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 5,
      "xuanxinng": 45,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/addcommand/ModuleTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULETASK_TIMING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Add a new module task to a specific module which is already recorded in the program."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleTaskCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"moduleTask\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a task to one of your modules \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_DESC + \"Description \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"Module related \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULETASK_TIMING + \"Timing of the task (in the format of {YYYY-MM-DD})\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_PRIORITY + \"Priority \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_DESC + \"Tutorial 08 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2030 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            + PREFIX_MODULETASK_TIMING + \"30-04-2020 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_PRIORITY + \"5 \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New task added successfully\\nList of tasks for %s\\n%s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_MODULE \u003d \"This module does not exist, \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"maybe you can add the module first\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleTask toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleTaskCommand(ModuleTask task) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(task);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        toAdd \u003d task;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(toAdd.getModuleRelated())) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.addModuleTask(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.addDeadlineTask(toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTaskList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String tasksInfo \u003d model.getModuleTaskInfo(toAdd.getModuleRelated());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.getModuleRelated(), tasksInfo));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof ModuleTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 toAdd.equals(((ModuleTaskCommand) other).toAdd));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 68,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/deletecommand/DeleteDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Adds a deadline."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteDeadlineCommand extends DeleteTaskCommand {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline Deleted: \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"No such deadline exists\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Task deadlineToDelete;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DeleteDeadlineCommand(Task deadlineToDelete) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(deadlineToDelete);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.deadlineToDelete \u003d deadlineToDelete;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (Task.getDeadlineTaskList().size() \u003c deadlineToDelete.getIndex()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getDeadlineTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task removed \u003d lastShownList.get(deadlineToDelete.getIndex() - 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.deleteTask(removed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (removed instanceof ModuleTask) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            model.getModuleBook().removeModuleTask((ModuleTask) removed);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTaskList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + removed);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Task getDeadlineToDelete() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.deadlineToDelete;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof DeleteDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 deadlineToDelete.equals(((DeleteDeadlineCommand) other).getDeadlineToDelete()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 8,
      "zhouxinwei97": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/deletecommand/DeleteModuleTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TASK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Deletes a task of certain module identified using it\u0027s displayed index from the module book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteModuleTaskCommand extends DeleteTaskCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Delete task as required successfully\\nList of tasks for %s\\n%s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DeleteModuleTaskCommand(ModuleCode moduleCode, Index targetIndex) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.targetModule \u003d moduleCode;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModule)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getSizeOfModuleTaskList(targetModule)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_TASK_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getDeadlineTaskList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task removed \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.deleteTask(removed);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.deleteModuleTask(targetModule, targetIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTaskList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.updateDeadlineTaskList(PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String tasksInfo \u003d model.getModuleTaskInfo(targetModule);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetModule, tasksInfo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof DeleteModuleTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModule.equals(((DeleteModuleTaskCommand) other).targetModule)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteModuleTaskCommand) other).targetIndex));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 58,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/deletecommand/DeleteTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Deletes a task from the calendar or from certain module in profile tab."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public abstract class DeleteTaskCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"taskDelete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Delete deadline. Format of input should be:\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \" taskDelete index/{num} \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: taskDelete index/2\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"or\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + COMMAND_WORD + \": Delete a module task \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_INDEX + \"index \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_INDEX + \"1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/donecommand/DoneCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.donecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Mark a task as done from the calendar or from certain module in profile tab."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public abstract class DoneCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"done\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Mark deadline as done. Format of input should be:\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \" done index/{num} \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: done index/2\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"or\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + COMMAND_WORD + \": mark a module task as done \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_INDEX + \"index \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_INDEX + \"1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/donecommand/DoneDeadlineCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.donecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Mark a deadline in calendar as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DoneDeadlineCommand extends DoneCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Deadline done: \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_FAIL \u003d \"No such deadline exists\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Task deadlineDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DoneDeadlineCommand(Task deadlineDone) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(deadlineDone);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.deadlineDone \u003d deadlineDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (Task.getDeadlineTaskList().size() \u003c deadlineDone.getIndex()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new CommandResult(MESSAGE_FAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        List\u003cTask\u003e lastShownList \u003d model.getDeadlineTaskList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task completed \u003d lastShownList.get(deadlineDone.getIndex() - 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        completed.markAsDone();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTaskList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(Model.PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + completed);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Task getDeadlineDone() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof DoneDeadlineCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 deadlineDone.equals(((DoneDeadlineCommand) other).getDeadlineDone()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 41,
      "zhouxinwei97": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/donecommand/DoneModuleTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.donecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Mark a task of certain module identified using it\u0027s displayed index from the module book as done."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DoneModuleTaskCommand extends DoneCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Mark task as done successfully\\nList of tasks for %s\\n%s\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DoneModuleTaskCommand(ModuleCode moduleCode, Index targetIndex) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.targetModule \u003d moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModule)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d model.getSizeOfModuleTaskList(targetModule)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_MODULE_TASK_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.doneModuleTask(targetModule, targetIndex);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTaskList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(Model.PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String tasksInfo \u003d model.getModuleTaskInfo(targetModule);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetModule, tasksInfo));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof DoneModuleTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModule.equals(((DoneModuleTaskCommand) other).targetModule)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DoneModuleTaskCommand) other).targetIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 55,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/findcommand/FindTasksByCatCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.CatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Find tasks in calendar by specific category."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class FindTasksByCatCommand extends FindTasksCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" Tasks found\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final CatContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public FindTasksByCatCommand(CatContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(model.getDeadlineTaskList().size() + MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof FindTasksByCatCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 28,
      "zhouxinwei97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/findcommand/FindTasksByDateCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.DateContainKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Find tasks in calendar by specific date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class FindTasksByDateCommand extends FindTasksCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" Tasks found\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final DateContainKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public FindTasksByDateCommand(DateContainKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(predicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(model.getDeadlineTaskList().size() + MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof FindTasksByDateCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 29,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/findcommand/FindTasksByModuleCodeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.ModuleCodeContainKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Find tasks in calendar by specific module code."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class FindTasksByModuleCodeCommand extends FindTasksCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \" Tasks found\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final ModuleCodeContainKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public FindTasksByModuleCodeCommand(ModuleCodeContainKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(model.getDeadlineTaskList().size() + MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof FindTasksByModuleCodeCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 28,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/findcommand/FindTasksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.findcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULETASK_TIMING;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Find tasks in calendar by specific key word (category/date/module code)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public abstract class FindTasksCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findTask\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Find tasks as required\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + COMMAND_WORD + \": find tasks related to given module code \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"MODULE CODE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULE_CODE + \"CS2103T \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"or\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + COMMAND_WORD + \": find tasks related to given category \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_CAT + \"CATEGORY\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_TASK_CAT + \"School work \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"or\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + COMMAND_WORD + \": find tasks related to given date \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULETASK_TIMING + \"DATE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_MODULETASK_TIMING + \"01-01-2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 36,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/listcommand/ListAllTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands.taskcommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Find tasks in calendar by specific module code."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ListAllTaskCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all Tasks\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listTask\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ListAllTaskCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.updateDeadlineTaskList(Model.PREDICATE_SHOW_ALL_TASK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/listcommand/ListModuleTaskCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.listcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Find tasks in module book by specific module code."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ListModuleTaskCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"List of tasks for %s\\n%s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listModuleTasks\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Show the tasks related to certain module \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"MODULE CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2103T \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode targetModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code NusModule}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ListModuleTaskCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModuleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!model.hasModule(targetModuleCode)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String tasksInfo \u003d model.getModuleTaskInfo(targetModuleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, targetModuleCode, tasksInfo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof ListModuleTaskCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 targetModuleCode.equals(((ListModuleTaskCommand) other).targetModuleCode));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/taskcommand/sortcommand/SortTasksCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.sortcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORTING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Sort tasks in calendar by date or priority."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class SortTasksCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortTask\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort the tasks as required \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_SORTING + \"Sorting parameter \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            + PREFIX_SORTING + \"priority\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tasks sorted by \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String sortingParam;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public SortTasksCommand(String sortingParam) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(sortingParam);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.sortingParam \u003d sortingParam;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.sortTask(sortingParam);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS + sortingParam);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof SortTasksCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 sortingParam.equals(((SortTasksCommand) other).sortingParam));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 50,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person person \u003d new Person(name, phone, email, tagList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddDeadlineCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DEADLINE_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class AddDeadlineCommandParser implements Parser\u003cAddDeadlineCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_DESC, PREFIX_DEADLINE_DATE, PREFIX_TASK_CAT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_DESC, PREFIX_DEADLINE_DATE, PREFIX_TASK_CAT)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task deadline \u003d ParserUtil.parseDeadline(argMultimap.getValue(PREFIX_TASK_DESC).get(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_DEADLINE_DATE).get(), argMultimap.getValue(PREFIX_TASK_CAT).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new AddDeadlineCommand(deadline);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "zhouxinwei97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.AddModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new AddModuleCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap1 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap2 \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (arePrefixesPresent(argMultimap1, PREFIX_MODULE_CODE, PREFIX_GRADE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap1.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    argMultimap1.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Module moduleInfo \u003d Search.findModule(moduleCode.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            int moduleCredit \u003d moduleInfo.getCredits();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Grade grade \u003d ParserUtil.parseGrade(argMultimap1.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            NusModule module \u003d new NusModule(moduleCode, moduleCredit,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    Optional.of(grade), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap2, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap2.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    argMultimap2.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Module moduleInfo \u003d Search.findModule(moduleCode.toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            int moduleCredit \u003d moduleInfo.getCredits();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            NusModule module \u003d new NusModule(moduleCode, moduleCredit,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    Optional.empty(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddToDoCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.AddDeadlineCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.AddToDoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class AddToDoCommandParser implements Parser\u003cAddToDoCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddToDoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_DESC);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_DESC)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task todo \u003d ParserUtil.parseTodo(argMultimap.getValue(PREFIX_TASK_DESC).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new AddToDoCommand(todo);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "zhouxinwei97": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.AddBookCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.CalenderCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.DiaryCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.MajorCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.ModPlanCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesCreateCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesDeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesOpenCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.ProfileCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryAddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryDeleteCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryLogCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryMoodCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryShowCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryWeatherCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.AddModuleCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.CapCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.GradeCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.TaskBreakdownCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.AddDeadlineCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.AddToDoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.ModuleTaskCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.donecommand.DoneCommand;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.taskcommand.listcommand.ListAllTaskCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.listcommand.ListModuleTaskCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.sortcommand.SortTasksCommand;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case CalenderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new CalenderCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case AddBookCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new AddBookCommand();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case ProfileCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new ProfileCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case ModPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new ModPlanCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case NotesCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new NotesCommand();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryLogCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryLogCommand();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryWeatherCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryWeatherCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryMoodCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryMoodCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        case DiaryShowCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryShowCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case GradeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new GradeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case CapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new CapCommand();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case AddToDoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new AddToDoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case DeleteTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case DoneCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DoneCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case FindTasksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new FindTasksCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case ListAllTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new ListAllTaskCommand();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case ListModuleTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new ListModuleTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case TaskBreakdownCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new TaskBreakdownCommand();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case SortTasksCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new SortTasksCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case ModuleTaskCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new ModuleTaskCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        case MajorCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new MajorCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case NotesListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new NotesListCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case NotesCreateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new NotesCreateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case NotesOpenCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new NotesOpenCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        case NotesDeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new NotesDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 4,
      "Kangwkk": 53,
      "-": 75,
      "zhouxinwei97": 48,
      "watsheldon": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_NOTES_PATH_TYPE \u003d new Prefix(\"pt/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_NOTES_PATH \u003d new Prefix(\"loc/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_NOTES_TYPE \u003d new Prefix(\"type/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_NOTES_FILE_NAME \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /* Module Prefixes*/"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_GRADE \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_MODULE_CODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /* Task Prefixes*/"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_DESC \u003d new Prefix(\"desc/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_DEADLINE_DATE \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_CAT \u003d new Prefix(\"cat/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_OPERATION \u003d new Prefix(\"op/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Prefix PREFIX_TASK_INDEX \u003d new Prefix(\"index/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_MODULETASK_TIMING \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"pri/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final Prefix PREFIX_SORTING \u003d new Prefix(\"by/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /* Diary Prefixes*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final Prefix PREFIX_ENTRY_CONTENT \u003d new Prefix(\"ec/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final Prefix PREFIX_ENTRY_ID \u003d new Prefix(\"id/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final Prefix PREFIX_WEATHER \u003d new Prefix(\"w/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final Prefix PREFIX_MOOD \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public static final Prefix PREFIX_DIARY_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 7,
      "-": 15,
      "zhouxinwei97": 11,
      "watsheldon": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteModuleCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new DeleteModuleCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.deletecommand.DeleteDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.deletecommand.DeleteModuleTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DeleteTaskCommandParser implements Parser\u003cDeleteTaskCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DeleteTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap1 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap2 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_TASK_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (arePrefixesPresent(argMultimap1, PREFIX_TASK_INDEX)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap1.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Task deadline \u003d ParserUtil.parseRemoveDeadline(argMultimap1.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteDeadlineCommand(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap2, PREFIX_MODULE_CODE, PREFIX_TASK_INDEX)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap2.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    argMultimap2.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap2.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DeleteModuleTaskCommand(moduleCode, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    DeleteTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 56,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiaryAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryAddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy Java docs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryAddCommandParser implements Parser\u003cDiaryAddCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy Java docs."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ENTRY_CONTENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_CONTENT)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DiaryAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String entryContent \u003d argMultimap.getValue(PREFIX_ENTRY_CONTENT).get();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        DiaryEntry diaryEntry \u003d new DiaryEntry(entryContent);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new DiaryAddCommand(diaryEntry);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 38,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiaryDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryDeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryDeleteCommandParser implements Parser\u003cDiaryDeleteCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ENTRY_ID);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_ID)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DiaryDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String entryIdString \u003d argMultimap.getValue(PREFIX_ENTRY_ID).get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int entryId \u003d 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            entryId \u003d Integer.parseInt(entryIdString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(\"Please enter an integer!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new DiaryDeleteCommand(entryId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 42,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiaryMoodCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryMoodCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.StressedMood;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryMoodCommandParser implements Parser\u003cDiaryMoodCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryMoodCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ENTRY_ID, PREFIX_MOOD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_ID, PREFIX_MOOD)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DiaryMoodCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String entryIdString \u003d argMultimap.getValue(PREFIX_ENTRY_ID).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String moodString \u003d argMultimap.getValue(PREFIX_MOOD).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int entryId \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        Mood mood \u003d new StressedMood();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            entryId \u003d Integer.parseInt(entryIdString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(\"Please enter an integer!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            mood \u003d new MoodParser().parseMood(moodString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(\"Please enter a valid mood!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new DiaryMoodCommand(entryId, mood);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 54,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiaryShowCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DIARY_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryShowCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryShowDateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryShowIdCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Parses input arguments and creates a new DiaryShowCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryShowCommandParser implements Parser\u003cDiaryShowCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DiaryShowCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * and returns an DiaryShowCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryShowCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap1 \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ENTRY_ID);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap2 \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DIARY_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (arePrefixesPresent(argMultimap1, PREFIX_ENTRY_ID)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                \u0026\u0026 argMultimap1.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            String entryIdString \u003d argMultimap1.getValue(PREFIX_ENTRY_ID).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            int entryId \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                entryId \u003d Integer.parseInt(entryIdString);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                throw new ParseException(\"Please enter an integer!\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryShowIdCommand(entryId);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap2, PREFIX_DIARY_DATE)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                \u0026\u0026 argMultimap2.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            String dateString \u003d argMultimap2.getValue(PREFIX_DIARY_DATE).get().trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            LocalDate date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                date \u003d LocalDate.parse(dateString, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                throw new ParseException(\"Invalid date! format:{dd-mm-yyyy}\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return new DiaryShowDateCommand(date);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                    DiaryShowCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 74,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DiaryWeatherCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ENTRY_ID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_WEATHER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.commands.diarycommand.DiaryWeatherCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.SunnyWeather;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryWeatherCommandParser implements Parser\u003cDiaryWeatherCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param args"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryWeatherCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ENTRY_ID, PREFIX_WEATHER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ENTRY_ID, PREFIX_WEATHER)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DiaryWeatherCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String entryIdString \u003d argMultimap.getValue(PREFIX_ENTRY_ID).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String weatherString \u003d argMultimap.getValue(PREFIX_WEATHER).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int entryId \u003d 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        Weather weather \u003d new SunnyWeather();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            entryId \u003d Integer.parseInt(entryIdString);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(\"Please enter an integer!\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            weather \u003d new WeatherParser().parseWeather(weatherString);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new ParseException(\"Please enter a valid weather!\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return new DiaryWeatherCommand(entryId, weather);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 54,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DoneCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.donecommand.DoneCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.donecommand.DoneDeadlineCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.donecommand.DoneModuleTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new DoneCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class DoneCommandParser implements Parser\u003cDoneCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public DoneCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap1 \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_INDEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap2 \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_TASK_INDEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (arePrefixesPresent(argMultimap1, PREFIX_TASK_INDEX)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap1.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Task deadline \u003d ParserUtil.parseRemoveDeadline(argMultimap1.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DoneDeadlineCommand(deadline);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap2, PREFIX_MODULE_CODE, PREFIX_TASK_INDEX)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap2.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    argMultimap2.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(argMultimap2.getValue(PREFIX_TASK_INDEX).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new DoneModuleTaskCommand(moduleCode, index);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    DoneCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 56,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindTasksCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULETASK_TIMING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_CAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksByCatCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksByDateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksByModuleCodeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.CatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.DateContainKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.ModuleCodeContainKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new FindTasksCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class FindTasksCommandParser implements Parser\u003cFindTasksCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public FindTasksCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap1 \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap2 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULETASK_TIMING);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap3 \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_CAT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (arePrefixesPresent(argMultimap1, PREFIX_MODULE_CODE)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap1.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap1.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new FindTasksByModuleCodeCommand("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    new ModuleCodeContainKeywordsPredicate(Arrays.asList(moduleCode.toString())));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap2, PREFIX_MODULETASK_TIMING)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap2.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            String date \u003d argMultimap2.getValue(PREFIX_MODULETASK_TIMING).get().trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (Deadline.isValidDate(date)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return new FindTasksByDateCommand(new DateContainKeywordsPredicate(Arrays.asList(date)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                throw new ParseException(\"Invalid date! format:{dd-mm-yyyy}\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else if (arePrefixesPresent(argMultimap3, PREFIX_TASK_CAT)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 argMultimap3.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            String cat \u003d argMultimap3.getValue(PREFIX_TASK_CAT).get().trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return new FindTasksByCatCommand(new CatContainsKeywordsPredicate(Arrays.asList(cat)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    FindTasksCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 69,
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GradeCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GRADE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.GradeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new GradeCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class GradeCommandParser implements Parser\u003cGradeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GradeCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an GradeCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public GradeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE_CODE, PREFIX_GRADE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE_CODE, PREFIX_GRADE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Module moduleInfo \u003d Search.findModule(moduleCode.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        int moduleCredit \u003d moduleInfo.getCredits();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Grade grade \u003d ParserUtil.parseGrade(argMultimap.getValue(PREFIX_GRADE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new GradeCommand(moduleCode, grade);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 52,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ListModuleTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.listcommand.ListModuleTaskCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new ListModuleTaskCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ListModuleTaskCommandParser implements Parser\u003cListModuleTaskCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ListModuleTaskCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns a ListModuleTaskCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ListModuleTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(args);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new ListModuleTaskCommand(moduleCode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ListModuleTaskCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MajorCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.MajorCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new MajorCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class MajorCommandParser implements Parser\u003cMajorCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public MajorCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MajorCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Major major \u003d ParserUtil.parseMajor(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new MajorCommand(major);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ModuleTaskCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULETASK_TIMING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODULE_CODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TASK_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.ModuleTaskCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new ModuleTaskCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleTaskCommandParser implements Parser\u003cModuleTaskCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleTaskCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an ModuleTaskCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleTaskCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TASK_DESC, PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                        PREFIX_MODULETASK_TIMING, PREFIX_PRIORITY);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TASK_DESC, PREFIX_MODULE_CODE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                PREFIX_MODULETASK_TIMING, PREFIX_PRIORITY)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedDesc \u003d argMultimap.getValue(PREFIX_TASK_DESC).get().trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                argMultimap.getValue(PREFIX_MODULE_CODE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String timing \u003d argMultimap.getValue(PREFIX_MODULETASK_TIMING).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Task.isValidDate(timing)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_DATE, ModuleTaskCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Priority p \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTask moduleTask \u003d new ModuleTask(trimmedDesc, moduleCode, timing, p);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new ModuleTaskCommand(moduleTask);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 53,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MoodParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.CalmMood;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.HappyMood;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.SadMood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.StressedMood;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class MoodParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static HashMap\u003cString, Mood\u003e moodParser \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moodParser.put(\"calm\", new CalmMood());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moodParser.put(\"happy\", new HappyMood());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moodParser.put(\"sad\", new SadMood());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moodParser.put(\"stressed\", new StressedMood());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param moodString"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public Mood parseMood(String moodString) throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (moodParser.get(moodString) \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new IllegalValueException(\"Please enter a valid mood!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return moodParser.get(moodString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 21,
      "zhouxinwei97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotesCreateCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_TYPE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesCreateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new NotesCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCreateCommandParser implements Parser\u003cNotesCreateCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotesCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an NotesCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesCreateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        PREFIX_NOTES_TYPE, PREFIX_NOTES_FILE_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                PREFIX_NOTES_TYPE, PREFIX_NOTES_FILE_NAME)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesCreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String fullPathName \u003d argMultimap.getValue(PREFIX_NOTES_PATH).get() + File.separator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + argMultimap.getValue(PREFIX_NOTES_FILE_NAME).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes note \u003d ParserUtil.parseNotesCreateOperation(fullPathName ,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_NOTES_TYPE).get(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_NOTES_PATH_TYPE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new NotesCreateCommand(note);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotesDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesDeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new NotesCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesDeleteCommandParser implements Parser\u003cNotesDeleteCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotesCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an NotesCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesDeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE, PREFIX_NOTES_FILE_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE, PREFIX_NOTES_FILE_NAME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String fullPathName \u003d argMultimap.getValue(PREFIX_NOTES_PATH).get() + File.separator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + argMultimap.getValue(PREFIX_NOTES_FILE_NAME).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes note \u003d ParserUtil.parseNotesDeleteOperation(fullPathName,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_NOTES_PATH_TYPE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new NotesDeleteCommand(note);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotesListCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new NotesCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesListCommandParser implements Parser\u003cNotesListCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotesCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an NotesCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesListCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes note \u003d ParserUtil.parseNotesListOperation(argMultimap.getValue(PREFIX_NOTES_PATH).get(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_NOTES_PATH_TYPE).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new NotesListCommand(note);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/NotesOpenCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesOpenCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Parses input arguments and creates a new NotesCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesOpenCommandParser implements Parser\u003cNotesOpenCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the NotesCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * and returns an NotesCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesOpenCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NOTES_PATH, PREFIX_NOTES_FILE_NAME, PREFIX_NOTES_PATH_TYPE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NOTES_PATH, PREFIX_NOTES_PATH_TYPE, PREFIX_NOTES_FILE_NAME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesOpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String fullPathName \u003d argMultimap.getValue(PREFIX_NOTES_PATH).get() + File.separator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + argMultimap.getValue(PREFIX_NOTES_FILE_NAME).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes note \u003d ParserUtil.parseNotesOpenOperation(fullPathName,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                argMultimap.getValue(PREFIX_NOTES_PATH_TYPE).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new NotesOpenCommand(note);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String path, @code String pathType} into a {@code Notes}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path path and filename to be created"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathType path type, absolute or relative."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a new note object."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException when the given {@code notesListoperation} is invalid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Notes parseNotesListOperation(String path, String pathType) throws ParseException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path, pathType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPath \u003d path.trim();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPathType \u003d pathType.trim();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Notes.isValidPathType(trimmedPathType)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Notes.MESSAGE_CONSTRAINTS_PATH_TYPE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Notes(trimmedPath, trimmedPathType);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String path, @code String pathType} into a {@code Notes}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path path and filename to be created"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathType path type, absolute or relative."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a new note object."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException when the given {@code notesListoperation} is invalid."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Notes parseNotesCreateOperation(String path, String type, String pathType) throws ParseException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path, pathType);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(type);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPath \u003d path.trim();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPathType \u003d pathType.trim();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedType \u003d type.trim();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Notes.isValidPathType(trimmedPathType)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Notes.MESSAGE_CONSTRAINTS_PATH_TYPE);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Notes.isValidType(trimmedType)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Notes.MESSAGE_CONSTRAINTS_TYPE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Notes(trimmedPath, trimmedType, trimmedPathType);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String path, @code String pathType} into a {@code Notes}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path path and filename to be created"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathType path type, absolute or relative."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a new note object."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException when the given {@code notesOpenoperation} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Notes parseNotesOpenOperation(String path, String pathType) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path, pathType);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPath \u003d path.trim();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPathType \u003d pathType.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Notes.isValidPathType(trimmedPathType)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Notes.MESSAGE_CONSTRAINTS_PATH_TYPE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Notes(trimmedPath, trimmedPathType);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String path, @code String pathType} into a {@code Notes}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param path path and filename to be created"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param pathType path type, absolute or relative."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a new note object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException when the given {@code notesOpenoperation} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Notes parseNotesDeleteOperation(String path, String pathType) throws ParseException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path, pathType);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPath \u003d path.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedPathType \u003d pathType.trim();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Notes.isValidPathType(trimmedPathType)) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Notes.MESSAGE_CONSTRAINTS_PATH_TYPE);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Notes(trimmedPath, trimmedPathType);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses a {@code String moduleCode} into an {@code ModuleCode}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the given {@code moduleCode} is invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedModuleCode \u003d moduleCode.trim().toUpperCase();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(trimmedModuleCode)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new ModuleCode(trimmedModuleCode);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses a {@code String grade} into an {@code Grade}."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the given {@code grade} is invalid."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Grade parseGrade(String grade) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedGrade \u003d grade.trim().toUpperCase();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!Grade.isValidGrade(trimmedGrade)) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Grade.getGrade(trimmedGrade);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses a {@code String priority} into an {@code Priority}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedPriority \u003d priority.trim().toUpperCase();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!Priority.isValidPriority(trimmedPriority)) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Priority.getPriority(trimmedPriority);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses a {@code String major} into an {@code Major}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the given {@code Major} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Major parseMajor(String major) throws ParseException {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String trimmedMajor \u003d major.trim();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!Major.isValidMajor(trimmedMajor)) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(Major.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Major(trimmedMajor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String description, @code String date} into an {@code Deadline}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Task parseDeadline(String description, String date, String category) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(description, date);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!Deadline.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new ParseException(Deadline.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Deadline(trimmedDescription, trimmedDate, trimmedCategory, \"add\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String description, @code String date} into an {@code Deadline}."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Task parseRemoveDeadline(String index) throws ParseException {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        int indexInt \u003d Integer.parseInt(index.trim());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new Deadline(indexInt, \"delete\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Parses a {@code String Description} into an {@code Todo}."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static Task parseTodo(String description) throws ParseException {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new ToDo(trimmedDescription);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 64,
      "-": 108,
      "zhouxinwei97": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eSearchCommandParserClass\u003c/h1\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Simple Parser for Search Command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Search Command Parser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param args String of Module Code"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return Search Command Object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @throws ParseException Incase you type wrong"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (args.isEmpty()) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.SYNTAX_FAILURE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return new SearchCommand(args.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SortTasksCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SORTING_PARAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SORTING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.sortcommand.SortTasksCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Parses input arguments and creates a new SortTasksCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class SortTasksCommandParser implements Parser\u003cSortTasksCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ModuleTaskCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * and returns an ModuleTaskCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public SortTasksCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SORTING);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_SORTING)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTasksCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String sortingParam \u003d argMultimap.getValue(PREFIX_SORTING).get().trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!sortingParam.equals(\"priority\") \u0026\u0026 !sortingParam.equals(\"date\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SORTING_PARAM + \" \" + SortTasksCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new SortTasksCommand(sortingParam);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/WeatherParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.CloudyWeather;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.RainyWeather;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.SunnyWeather;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.WindyWeather;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Dummy java docs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class WeatherParser {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static HashMap\u003cString, Weather\u003e weatherIdentifiers \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weatherIdentifiers.put(\"cloudy\", new CloudyWeather());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weatherIdentifiers.put(\"rainy\", new RainyWeather());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weatherIdentifiers.put(\"sunny\", new SunnyWeather());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weatherIdentifiers.put(\"windy\", new WindyWeather());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param weatherString"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IllegalValueException"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public Weather parseWeather(String weatherString) throws IllegalValueException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (weatherIdentifiers.get(weatherString) \u003d\u003d null) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            throw new IllegalValueException(\"Please enter a valid weather!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return weatherIdentifiers.get(weatherString);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 21,
      "zhouxinwei97": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private DiaryBook diaryBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ObservableList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook \u003d new DiaryBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        taskList \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addTasks(Task t) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        taskList.add(t);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setDiaryEntry(ObservableList\u003cDiaryEntry\u003e diaryEntry) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryBook.setDiary(diaryEntry);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * dummy java docs."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param entry"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isEmptyDiaryEntry(DiaryEntry entry) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        // implement later"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addDiaryEntry(DiaryEntry diaryentry) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryBook.getObservableList().add(diaryentry);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 119,
      "zhouxinwei97": 33,
      "watsheldon": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Predicate\u003cNotes\u003e PREDICATE_SHOW_ALL_NOTES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Predicate\u003cTask\u003e PREDICATE_SHOW_ALL_TASK \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Predicate\u003cNusModule\u003e PREDICATE_SHOW_ALL_MODULES_TAKEN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getDiaryBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Diary Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    boolean isEmptyDiaryEntry(DiaryEntry diaryEntry);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    void addDiaryEntry(DiaryEntry diaryEntry);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    String showDiaryLog();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cDiaryEntry\u003e getDiaryList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    boolean isValidEntryId(int entryId);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    void deleteDiaryEntry(int entryId);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    void tagWeather(int entryId, Weather weather);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    void tagMood(int entryId, Mood mood);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    DiaryEntry getDiaryEntryById(int entryId);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    List\u003cInteger\u003e getListOfIdsByDate(LocalDate date);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    boolean isExistingDate(LocalDate date);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an list of String that contains what is currently in the folder */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNotes\u003e getFilesInFolderList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Updates the notes list by the given {@code predicate}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateNotesList(Predicate\u003cNotes\u003e predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d CAP Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    boolean hasModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * {@code module} must not already exist in the address book."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void addModule(NusModule module);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void deleteModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void gradeModule(ModuleCode moduleCode, Grade grade);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    double getCap();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void addModuleTask(ModuleTask moduleTask);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cNusModule\u003e getModulesListTaken();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    ModuleBook getModuleBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    int getSizeOfModuleTaskList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void deleteModuleTask(ModuleCode moduleCode, Index index);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void doneModuleTask(ModuleCode moduleCode, Index index);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    String getModuleTaskInfo(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    String getTaskBreakdown();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    List\u003cModuleTask\u003e getModuleTaskList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    List\u003cTask\u003e findTasksByDate(String date);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    List\u003cTask\u003e findTasksByCat(String cat);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deadline \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Adds deadline."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void addDeadlineTask(Task deadline);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void sortTaskList();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Task deleteTask(Task task);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Task doneDeadlineTask(Task deadline);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void sortTask(String param);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Checks if content of deadline is empty"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    boolean isEmptyDeadline(Task deadline);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /** Returns an list of Deadline that is currently in the list */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cTask\u003e getDeadlineTaskList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Updates the deadline list by the given {@code predicate}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TD \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Adds todo."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void addToDo(Task todo);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Checks if content of todo is empty"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    boolean isEmptyToDo(Task todo);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Profile \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void updateMajor(Major major);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableValue\u003cString\u003e getMajor();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Profile getProfile();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 46,
      "xuanxinng": 20,
      "-": 87,
      "watsheldon": 21,
      "zhouxinwei97": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final ObservableList\u003cDiaryEntry\u003e diaryEntries;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private DiaryBook diaryBook;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final FilteredList\u003cNotes\u003e filesInFolder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private ModuleBook moduleBook;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private FilteredList\u003cTask\u003e deadlineTaskList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final FilteredList\u003cNusModule\u003e moduleListTaken;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Profile studentProfile;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        ModuleBook moduleBook, ObservableList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, moduleBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + \" and module list: \" + moduleBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleBook \u003d moduleBook;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook \u003d new DiaryBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryEntries \u003d diaryBook.getInternalList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesInFolder \u003d new FilteredList\u003c\u003e(Notes.getAllFilesInFolder());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList \u003d new FilteredList\u003c\u003e(taskList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.setDeadlineTaskList(taskList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moduleListTaken \u003d new FilteredList\u003c\u003e(moduleBook.getModulesTakenList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        studentProfile \u003d new Profile(moduleBook);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this(new AddressBook(), new UserPrefs(), new ModuleBook(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                FXCollections.observableList(new ArrayList\u003c\u003e()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Diary Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void addDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook.addEntry(diaryEntry);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isEmptyDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        // implement later"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isValidEntryId(int entryId) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int minId \u003d 1;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int maxId \u003d diaryBook.getDiaryEntries().size();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return (entryId \u003e\u003d minId) \u0026\u0026 (entryId \u003c\u003d maxId);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void deleteDiaryEntry(int entryId) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook.deleteEntry(entryId);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void tagWeather(int entryId, Weather weather) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook.tagWeather(entryId, weather);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void tagMood(int entryId, Mood mood) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryBook.tagMood(entryId, mood);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryEntry getDiaryEntryById(int entryId) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryBook.getDiaryEntryById(entryId);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public List\u003cInteger\u003e getListOfIdsByDate(LocalDate date) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryBook.getListOfIdsByDate(date);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isExistingDate(LocalDate date) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryBook.isExistingDate(date);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String showDiaryLog() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryBook.showLog();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return diaryEntries;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cap Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.hasModule(moduleCode);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(module);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.deleteModule(moduleCode);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void gradeModule(ModuleCode moduleCode, Grade updatedGrade) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.gradeModule(moduleCode, updatedGrade);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.getCap();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return moduleListTaken;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moduleListTaken.setPredicate(predicate);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return userPrefs.getModuleBookFilePath();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.moduleBook;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public int getSizeOfModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.getSizeOfModuleTaskList(moduleCode);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public List\u003cModuleTask\u003e getModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.getModuleTaskList(moduleCode);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void deleteModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.deleteModuleTask(moduleCode, index);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void doneModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.doneModuleTask(moduleCode, index);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addModuleTask(ModuleTask moduleTask) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModuleTask(moduleTask);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getModuleTaskInfo(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.getModuleTaskInfo(moduleCode);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getTaskBreakdown() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook.getTaskBreakdown();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns an list of String that contains what is currently in the folder"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filesInFolder;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesInFolder.setPredicate(predicate);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Deadline Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean isEmptyDeadline(Task deadline) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns a list of task in the deadline task list"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskList;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList.setPredicate(predicate);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public List\u003cTask\u003e findTasksByDate(String date) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        List\u003cTask\u003e targetTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Task task : deadlineTaskList) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (task.getDate().equals(date)) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                targetTasks.add(task);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return targetTasks;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public List\u003cTask\u003e findTasksByCat(String cat) {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        List\u003cTask\u003e targetTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Task task : deadlineTaskList) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (task.getCategory().equals(cat)) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                targetTasks.add(task);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return targetTasks;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.add(deadline);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Task doneDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.getDeadlineTaskList().get(deadline.getIndex() - 1).markAsDone();"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task done \u003d Task.getDeadlineTaskList().get(deadline.getIndex() - 1);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.getDeadlineTaskList().remove(deadline.getIndex() - 1);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.getDeadlineTaskList().add(done);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return done;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void sortTaskList() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.sortDeadlineTaskList(\"date\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.sortDeadlineTaskList(\"done\");"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Task deleteTask(Task task) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.getDeadlineTaskList().remove(task);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.removeTaskPerDate(task.getDate(), task);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void sortTask(String param) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.sortDeadlineTaskList(param);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TD Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addToDo(Task todo) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean isEmptyToDo(Task todo) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Profile Module \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void updateMajor(Major major) {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        studentProfile.setMajor(major);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableValue\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return studentProfile.getMajor();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Profile getProfile() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return studentProfile;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 107,
      "xuanxinng": 18,
      "-": 147,
      "watsheldon": 59,
      "zhouxinwei97": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModuleBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Capulator;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Wraps all module-related data at the module-book level"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleBook {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private List\u003cNusModule\u003e modules;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ObservableList\u003cNusModule\u003e modulesTakenList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Major majorTaken;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTakenList \u003d FXCollections.observableList(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Creates an ModuleBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook(ModuleBook toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook(List\u003cNusModule\u003e modules) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        getModulesTakenList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Adds a module to the module book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * The module must not already exist in the module book."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modulesTakenList.add(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Removes {@code NusModule} that has the same module code as given from this {@code ModuleBook}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * such nus module must exist in the module book."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        int index \u003d -1;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size(); i++) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (modules.get(i).getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                index \u003d i;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modulesTakenList.remove(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public NusModule getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule result \u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                result \u003d module;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Replaces the contents of the module list with {@code mdoules}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void setModules(List\u003cNusModule\u003e modules) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void resetData(ModuleBook newData) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        setModules(newData.getModulesTakenList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Up"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * ydates the grade of the {@code NusModule} that has the same module code as given from this {@code ModuleBook}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * such nus module must exist in the module book."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void gradeModule(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(grade);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule targetModule \u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                targetModule \u003d module;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        modulesTakenList.remove(targetModule);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModule.setGrade(grade);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        modulesTakenList.add(targetModule);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Add a new module task to a specific module recorded in our program."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addModuleTask(ModuleTask moduleTask) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleTask);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getModuleCode().equals(moduleTask.getModuleRelated())) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                module.addTask(moduleTask);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Delete a module task in a specific module recorded in our program."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void deleteModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        getModule(moduleCode).getTasks().remove(index.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Mark a module task as done in a specific module recorded in our program."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void doneModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        getModule(moduleCode).getTasks().get(index.getZeroBased()).markAsDone();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Remove a specific module recorded in our program."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void removeModuleTask(ModuleTask moduleTask) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule targetModule \u003d null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTask targetTask;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            for (ModuleTask mt : module.getTasks()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                if (mt.equals(moduleTask)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    targetModule \u003d module;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    targetTask \u003d moduleTask;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        targetModule.getTasks().remove(moduleTask);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public List\u003cModuleTask\u003e getModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return getModule(moduleCode).getTasks();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Return a String contains the information of the tasks related to the specified module."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getModuleTaskInfo(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String infoOfTasks \u003d \"\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        List\u003cModuleTask\u003e tasks \u003d getModuleTaskList(moduleCode);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            String task \u003d (i + 1) + \". \" + tasks.get(i) + \"\\n\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            infoOfTasks +\u003d task;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return infoOfTasks;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Return a String contains the information of how many tasks are there related to each module in module book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getTaskBreakdown() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String infoOfTasks \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            int numberOfTasksNotDone \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            for (ModuleTask moduleTask: module.getTasks()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                if (moduleTask.getDoneStatus() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    numberOfTasksNotDone +\u003d 1;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            String message \u003d \"- \" + module.getModuleCode() + \":   \""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    + module.getTasks().size() + \" tasks in total   \""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    + numberOfTasksNotDone + \" tasks haven\u0027t been completed\\n\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            infoOfTasks +\u003d message;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return infoOfTasks;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void setMajor(Major major) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(major);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.majorTaken \u003d major;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if a module with the same module code as {@code NusModule} exists in the address book."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getModuleCode().equals(moduleCode)) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cNusModule\u003e getModulesTakenList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return modulesTakenList;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getCap() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Capulator capulator \u003d new Capulator(modules);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return capulator.calculateCap();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public int getSizeOfModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return getModule(moduleCode).getTasks().size();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 222,
      "zhouxinwei97": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    ObservableList\u003cTask\u003e getTaskList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "zhouxinwei97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Path calendarFilePath \u003d Paths.get(\"data\" , \"calendar.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Path diaryBookFilePath \u003d Paths.get(\"data\", \"stub-diaryEntries.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Path moduleBookFilePath \u003d Paths.get(\"data\" , \"modulebook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    // calendar entry at startup"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getCalendarFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return calendarFilePath;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 5,
      "-": 87,
      "zhouxinwei97": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calender/CatContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CatContainsKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CatContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getCategory(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof CatContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 keywords.equals(((CatContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calender/DateContainKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DateContainKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DateContainKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(task.getDate(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof ModuleCodeContainKeywordsPredicate); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calender/Deadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * \u003ch1\u003e Deadline Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Returns an extended type of Task, Deadline, where tasks have to be completed by a set date"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid Date in the format DD-MM-YYYY\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected String category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected String operation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Constructor for deadline class"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param description describes content of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param by sets targeted completion date of task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Deadline(String description, String by, String category, String operation) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireAllNonNull(operation);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.operation \u003d operation;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Deadline(int index, String operation) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(\"Delete task\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireAllNonNull(operation);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.operation \u003d operation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * dummy docs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] splittedDate \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int month \u003d Integer.parseInt(splittedDate[1]);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int day \u003d Integer.parseInt(splittedDate[0]);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.category;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getOperation() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.operation;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.index;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return super.toString() + \" (\" + by + \")\" + \"(\" + category + \")\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof Deadline)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Deadline otherTask \u003d (Deadline) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(otherTask.getDescription().equals(getDescription()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(otherTask.getDate().equals(this.getDate()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(this.getDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 22,
      "zhouxinwei97": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calender/ModuleCodeContainKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModuleCodeContainKeywordsPredicate implements Predicate\u003cTask\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModuleCodeContainKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean test(Task task) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (task instanceof ModuleTask) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            StringUtil.containsWordIgnoreCase"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                    (((ModuleTask) task).getModuleRelated().toString(), keyword));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof ModuleCodeContainKeywordsPredicate); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calender/Task.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * \u003ch1\u003e Task Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Represents general \u003ccode\u003e Task \u003c/code\u003e class such that it can be extended into more specific classes (Deadlines,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * To Dos)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * description must specify a task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ObservableList\u003cTask\u003e deadlineTaskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static HashMap\u003cString, ArrayList\u003cTask\u003e\u003e deadlineTaskHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Constructor for task class"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param description describes content of task"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireAllNonNull(description);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Return the status of the Task."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @return icon for status (tick or cross) to display if task is completed or not"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean getStatus() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Return the description of the task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @return description of task"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Add Task to the date in the HashMap."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param date date of the task, which is the key in the HashMap"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param task Task that is added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void addTaskPerDate(String date, Task task) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!deadlineTaskHashMap.containsKey(date)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            deadlineTaskHashMap.put(date, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            deadlineTaskHashMap.get(date).add(task);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            deadlineTaskHashMap.get(date).add(task);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Remove the task from the date in the HashMap"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param date date of the task, which is the key in the HashMap"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param task Task that is to be removed"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void removeTaskPerDate(String date, Task task) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskHashMap.get(date).remove(task);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (deadlineTaskHashMap.get(date).size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            deadlineTaskHashMap.remove(date);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns whether a specific date have any task present."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param date Key of the HashMap"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return true if a task is present in the date, false if not"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isTaskPresent(String date) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!deadlineTaskHashMap.containsKey(date)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (deadlineTaskHashMap.get(date).size() \u003c\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Adds task to the calendar."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void add(Task task) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList.add(task);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        addTaskPerDate(task.getDate(), task);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Removes task to the calendar."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param task"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static void remove(Task task) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        deadlineTaskList.remove(task);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        removeTaskPerDate(task.getDate(), task);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static HashMap\u003cString, ArrayList\u003cTask\u003e\u003e getDeadlineTaskHashMap() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskHashMap;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Mark the task as done."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return true when the task is marked as done"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean markAsDone() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        isDone \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return isDone;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns a new instance of the deadline task list."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return an empty deadline task list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cTask\u003e getNewDeadlineTaskList() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cTask\u003e deadlineTaskListDummy \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList \u003d FXCollections.observableArrayList(deadlineTaskListDummy);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskList;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void setDeadlineTaskList(ObservableList\u003cTask\u003e initialiedList) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlineTaskList \u003d initialiedList;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (Task task : initialiedList) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            addTaskPerDate(task.getDate(), task);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the observable list required for the UI."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return observable list required for the UI"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return deadlineTaskList;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Sort the deadline task list by value specified, value can be date or priority"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param value value specified can be date or priority"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void sortDeadlineTaskList(String value) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        SimpleDateFormat dateParser \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (value.equals(\"date\")) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Comparator\u003cTask\u003e comparator \u003d (Task o1, Task o2) -\u003e {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    return dateParser.parse(o1.getDate()).compareTo(dateParser.parse(o2.getDate()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    e.printStackTrace();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return -1;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            };"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            FXCollections.sort(deadlineTaskList, comparator);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (value.equals(\"priority\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Comparator\u003cTask\u003e comparator \u003d (Task o1, Task o2) -\u003e {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                if (o1 instanceof Deadline) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                } else if (o2 instanceof Deadline) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    return ((ModuleTask) o1).getPriority().compareTo(((ModuleTask) o2).getPriority());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            };"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            FXCollections.sort(deadlineTaskList, comparator);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (value.equals(\"done\")) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Comparator\u003cTask\u003e comparator \u003d (Task o1, Task o2) -\u003e {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return Boolean.compare(o1.isDone, o2.isDone);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            };"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            FXCollections.sort(deadlineTaskList, comparator);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return \"None\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return \"None\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getOperation() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return \"None\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Check whether a date is valid."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param date format of the date"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return true if it is a valid date."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isValidDate(String date) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] splittedDate \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int day \u003d Integer.parseInt(splittedDate[0]);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int month \u003d Integer.parseInt(splittedDate[1]);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (month \u003c 1 || month \u003e 12) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (day \u003c 1 || day \u003e 31) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (Exception ex) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns true if both task have the same date and data fields."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof Task)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task otherTask \u003d (Task) other;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(otherTask.getDescription().equals(this.description));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(otherTask.getDate().equals(this.getDate()));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return otherTask.getDescription().equals(this.description)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(this.getDate());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return Objects.hash(description);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 43,
      "Kangwkk": 11,
      "zhouxinwei97": 238
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calender/ToDo.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * \u003ch1\u003e To Do Class \u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " * Returns an extended type of Task, To Dos, where general tasks are added"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * Constructor for to do class"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     * @param description describes content of to do"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "xuanxinng": 21,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/DiaryBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.mood.HappyMood;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.weather.CloudyWeather;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a diary book that manages a list of diary entries."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryBook {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static List\u003cDiaryEntry\u003e diaryEntries;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ObservableList\u003cDiaryEntry\u003e internalList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryBook() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.diaryEntries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DiaryEntry dummyDiary \u003d new DiaryEntry(LocalDate.now(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                new CloudyWeather(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                new HappyMood(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \"First dummy entry\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryEntries.add(dummyDiary);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        internalList \u003d FXCollections.observableList(diaryEntries);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryBook(List\u003cDiaryEntry\u003e diaryEntries) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.diaryEntries \u003d diaryEntries;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setDiary(ObservableList\u003cDiaryEntry\u003e diaryEntry) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.internalList.addAll(diaryEntry);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cDiaryEntry\u003e getObservableList() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * Shows the logs of the recorded diary entries."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "     * @return String message representing the log messages."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String showLog() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        if (diaryEntries.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            return \"There are currently no entries in your diary book!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        int entryId \u003d 1;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        for (DiaryEntry entry : diaryEntries) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            sb.append(entryId++).append(\". \").append(entry.getHeading()).append(\"\\n\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String showEntry(int entryId) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryEntries.get(calibrateIndex(entryId)).toString();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void addEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        internalList.add(diaryEntry);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cDiaryEntry\u003e getInternalList() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void addEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryEntries.add(diaryEntry);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void deleteEntry(int entryId) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryEntries.remove(calibrateIndex(entryId));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void tagWeather(int entryId, Weather weather) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryEntries.get(calibrateIndex(entryId)).setWeather(weather);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void tagMood(int entryId, Mood mood) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        diaryEntries.get(calibrateIndex(entryId)).setMood(mood);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryEntry getDiaryEntryById(int entryId) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return diaryEntries.get(calibrateIndex(entryId));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public List\u003cInteger\u003e getListOfIdsByDate(LocalDate date) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        List\u003cInteger\u003e ids \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d diaryEntries.size(); i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            if (getDiaryEntryById(i).getDate().equals(date)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "                ids.add(i);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return ids;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public boolean isExistingDate(LocalDate date) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return getListOfIdsByDate(date).size() !\u003d 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public List\u003cDiaryEntry\u003e getDiaryEntries() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return this.diaryEntries;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private int calibrateIndex(int index) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return index - 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 83,
      "zhouxinwei97": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/DiaryEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a diary entry."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class DiaryEntry {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private Optional\u003cWeather\u003e weather;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private Optional\u003cMood\u003e mood;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private String entryContent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntry(LocalDate date, Weather weather, Mood mood, String entryContent) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.weather \u003d Optional.ofNullable(weather);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.mood \u003d Optional.ofNullable(mood);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.entryContent \u003d entryContent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public DiaryEntry(String entryContent) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this(LocalDate.now(), null, null, entryContent);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String getHeading() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String heading \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        heading +\u003d \" DATE: \" + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" | \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        heading +\u003d \"WEATHER: \" + (weather.isPresent() ? weather.get().toString() : \"N.A.\") + \" | \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        heading +\u003d \"MOOD: \" + (mood.isPresent() ? mood.get().toString() : \"N.A.\") + \" | \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return heading + \"\\n\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getEntryContent() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return entryContent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cWeather\u003e getWeather() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return weather;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cMood\u003e getMood() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return mood;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void setWeather(Weather weather) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.weather \u003d Optional.ofNullable(weather);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public void setMood(Mood mood) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.mood \u003d Optional.ofNullable(mood);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        String dairyDisplay \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        dairyDisplay +\u003d getHeading();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        dairyDisplay +\u003d \"_\".repeat(50) + \"\\n\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        dairyDisplay +\u003d entryContent + \"\\n\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        return dairyDisplay;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 50,
      "zhouxinwei97": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/CalmMood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " *Represents a calm mood. Extends from abstract class Mood."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class CalmMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CalmMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"calm\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/HappyMood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a happy mood. Extends from abstract class Mood."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class HappyMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public HappyMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"happy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/Mood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a particular Mood."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public abstract class Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final String mood;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    protected Mood(String mood) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return mood;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 14,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/SadMood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a sad mood. Extends from abstract class Mood."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class SadMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public SadMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"sad\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/mood/StressedMood.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.mood;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a stressed mood. Extends from abstract class Mood."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class StressedMood extends Mood {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public StressedMood() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"stressed\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/CloudyWeather.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a cloudy weather. Extends from abstract class Weather."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class CloudyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public CloudyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"cloudy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/RainyWeather.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a rainy weather. Extends from abstract class Weather."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class RainyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public RainyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"rainy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/SunnyWeather.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a sunny weather. Extends from abstract class Weather."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class SunnyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public SunnyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"sunny\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/Weather.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a particular weather."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public abstract class Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    private final String weather;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    protected Weather(String weather) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return weather;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 14,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/diary/weather/WindyWeather.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "package seedu.address.model.diary.weather;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "watsheldon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "watsheldon"
        },
        "content": " * Represents a windy weather. Extends from abstract class Weather."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "public class WindyWeather extends Weather {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    public WindyWeather() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "        super(\"windy\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "watsheldon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "watsheldon": 8,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/notes/Notes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.property.ReadOnlyObjectWrapper;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Represents a Note to be created."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class Notes {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"operation should contain open, create, createfolder and delete only and it should not be left blank.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_PATH_TYPE \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"Path type should only be abs(Absolute) or rel(Relative)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS_TYPE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"Type must be only file or folder\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String HOME_DIRECTORY \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static String currentDirectory \u003d HOME_DIRECTORY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ObservableValue\u003cString\u003e observableCurrentDirectory \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            new ReadOnlyObjectWrapper\u003c\u003e(\"Current Directory \" + currentDirectory);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String[] validType \u003d {\"file\", \"folder\"};"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String[] validPathType \u003d {\"abs\", \"rel\"};"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ObservableList\u003cNotes\u003e filesArrayListFiltered;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String path;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String type;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String pathType;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes(String path, String pathType) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.pathType \u003d pathType;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes(String path, String type, String pathType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.pathType \u003d pathType;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Notes(String path) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.path \u003d path;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ObservableList\u003cNotes\u003e getAllFilesInFolder() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File myFile \u003d new File(HOME_DIRECTORY);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cNotes\u003e filesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File[] allFiles \u003d myFile.listFiles();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (File f : allFiles) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String[] allFileName \u003d f.toString().split(Pattern.quote(File.separator));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String fileName \u003d allFileName[allFileName.length - 1];"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (fileName.charAt(0) \u003d\u003d (\u0027.\u0027)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Notes note \u003d new Notes(fileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            filesArrayList.add(note);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesArrayListFiltered \u003d FXCollections.observableArrayList(filesArrayList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filesArrayListFiltered;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void setList(ArrayList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        filesArrayListFiltered.setAll(notesList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Comparator\u003cNotes\u003e comparator \u003d new Comparator\u003cNotes\u003e() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            public int compare(Notes o1, Notes o2) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return (o1.getPath().compareToIgnoreCase(o2.getPath()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        FXCollections.sort(filesArrayListFiltered, comparator);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Return if it is a valid type."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param checkType type that is to be checked"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return true if valid false if not"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isValidType(String checkType) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (String type : validType) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (checkType.equals(type)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Return if it is a valid path."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param checkPathType path that is to be checked"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return true if valid false if not"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static boolean isValidPathType(String checkPathType) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (String pathType : validPathType) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (checkPathType.equals(pathType)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static String getCurrentDirectory() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return currentDirectory;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void setCurrentDirectory(String directory) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        currentDirectory \u003d directory;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getPath() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.path;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getFilePathType() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.pathType;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.type;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        boolean flag \u003d other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                || (other instanceof Notes // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 this.path.equals(((Notes) other).getPath())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u0026\u0026 this.pathType.equals(((Notes) other).getFilePathType()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (flag \u003d\u003d false) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            boolean typeFlag \u003d false;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (type \u003d\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                typeFlag \u003d true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                typeFlag \u003d this.type.equals(((Notes) other).getType());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return flag \u0026\u0026 typeFlag;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return (path + pathType).hashCode();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/Capulator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a device that can help NUS students to calculate their current CAP based on their graded modules."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class Capulator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private List\u003cNusModule\u003e modules;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Capulator(List\u003cNusModule\u003e modules) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules \u003d modules;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * calculates the CAP based on graded NUS modules in records."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @return a double represents the CAP gotten."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double calculateCap() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double sumOfGradePoints \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double sumOfModularCredits \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module: modules) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (module.getGrade().isPresent() \u0026\u0026 !module.getGrade().get().isSued()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                sumOfModularCredits +\u003d module.modularCredit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                sumOfGradePoints +\u003d module.modularCredit * module.getGradePoint();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (sumOfModularCredits \u003d\u003d 0.0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return sumOfGradePoints / sumOfModularCredits;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/Grade.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents the grades obtained by a NUS student for any specific module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public enum Grade {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    APLUS(5.0, \"A+\", true, true),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    A(5.0, \"A\", true, true),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    AMINUS(4.5, \"A-\", true, true),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    BPLUS(4.0, \"B+\", true, true),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    B(3.5, \"B\", true, true),"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    BMINUS(3.0, \"B-\", true, true),"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    CPLUS(2.5, \"C+\", true, true),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    C(2.0, \"C\", true, true),"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    DPLUS(1.5, \"D+\", true, false),"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    D(1.0, \"D\", true, false),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    F(0.0, \"F\", false, false),"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    S(0.0, \"S\", true, true),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    U(0.0, \"U\", false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid grade.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final double point;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String text;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final boolean isPassed;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final boolean isSatisfactory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Grade(double point, String text, boolean isPassed, boolean isSatisfactory) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.point \u003d point;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.isPassed \u003d isPassed;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.isSatisfactory \u003d isSatisfactory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Grade getGrade(String text) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Grade grade \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Grade g : values()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (g.text.equals(text)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                grade \u003d g;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return grade;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Grade getGradeAfterSu(String text) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Grade g : values()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (g.text.equals(text) \u0026\u0026 g.isSatisfactory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return S;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return U;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * checks whether the Grade object represents a grade that has been SUed or not."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @return true if the Grade object represents a grade that has been SUed or false if otherwise."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean isSued() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (this.equals(S) || this.equals(U)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getPoint() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.point;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.text;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns if a given string is a valid grade."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static boolean isValidGrade(String test) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Grade g : values()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (g.text.equals(test)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/Major.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a major in NUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class Major {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            \"Please enter a valid major name in NUS (e.g. Computer Science)\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final String nameOfMajor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Major(String name) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        checkArgument(isValidMajor(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        nameOfMajor \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns true if a given string is a valid major."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static boolean isValidMajor(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //implement later"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return nameOfMajor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof Major // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 nameOfMajor.equals(((Major) other).nameOfMajor)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return nameOfMajor.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/ModuleCode.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.searcher.Search;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a NUS module\u0027s module code."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid module code\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleCode(String code) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns if a given string is a valid module code."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Search.findModule(test);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 code.equals(((ModuleCode) other).code)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/ModuleTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.StringJoiner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a task related to a specific module. (e.g. an assignment of module CS2103T)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class ModuleTask extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final ModuleCode moduleRelated;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String timing;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModuleTask(String description, ModuleCode moduleRelated, String timing, Priority priority) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleRelated \u003d moduleRelated;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleCode getModuleRelated() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.moduleRelated;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return timing;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public int getDoneStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return isDone ? 1 : 0;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String getDoneMessage() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return isDone ? \"completed\" : \"not completed\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        StringJoiner sj \u003d new StringJoiner(\"   \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String desiredString \u003d sj.add(this.getDescription()).add(moduleRelated.toString())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .add(timing.toString()).add(priority.toString()).add(getDoneMessage()).toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return desiredString;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!(other instanceof ModuleTask)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTask otherTask \u003d (ModuleTask) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return otherTask.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 otherTask.getDate().equals(this.getDate())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 otherTask.getModuleRelated().equals(getModuleRelated())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 otherTask.getPriority().equals(getPriority());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 65,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/NusModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents a module in NUS."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class NusModule {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public final int modularCredit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Optional\u003cGrade\u003e grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private List\u003cModuleTask\u003e tasks;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public NusModule(ModuleCode moduleCode, int modularCredit,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                     Optional\u003cGrade\u003e grade, List\u003cModuleTask\u003e tasks) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void addTask(ModuleTask task) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        tasks.add(task);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public List\u003cModuleTask\u003e getTasks() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public double getGradePoint() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.grade.get().getPoint();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Optional\u003cGrade\u003e getGrade() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.grade;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void setGrade(Grade grade) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.grade \u003d Optional.ofNullable(grade);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public int getModularCredit() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.modularCredit;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleCode.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                || (other instanceof NusModule // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((NusModule) other).moduleCode)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/model/nusmodule/Priority.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Represents the priority of certain module tasks."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public enum Priority {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    VERYHIGH(\"Very high\", 5),"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    HIGH(\"High\", 4),"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    MEDIAN(\"Medium\", 3),"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    LOW(\"Low\", 2),"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    VERYLOW(\"Very low\", 1);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Please enter valid priority (an integer from 1 to 5)\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final int levelOfSignificance;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Priority(String text, int levelOfSignificance) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.levelOfSignificance \u003d levelOfSignificance;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns if a given string is a valid priority."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static boolean isValidPriority(String test) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            Integer.parseInt(test);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Priority p : values()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (p.levelOfSignificance \u003d\u003d Integer.parseInt(test)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static Priority getPriority(String text) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Priority priority \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (Priority p : values()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (p.levelOfSignificance \u003d\u003d Integer.parseInt(text)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                priority \u003d p;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public int getLevelOfSignificance() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.levelOfSignificance;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return this.text;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 54,
      "zhouxinwei97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireAllNonNull(name, phone, email, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return Objects.hash(name, phone, email, tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "-": 109,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/studentprofile/Profile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.studentprofile;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Creates a profile class to hold all profile information."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class Profile {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static SimpleStringProperty cap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ArrayList\u003cNusModule\u003e modulesTaken;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ArrayList\u003cNusModule\u003e modulesCurrentlyTaking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Major major;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ObservableValue\u003cString\u003e majorString;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Profile(ModuleBook moduleBook) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        cap \u003d new SimpleStringProperty(\"\" + moduleBook.getCap());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ArrayList\u003cNusModule\u003e getModulesTaken() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return modulesTaken;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ArrayList\u003cNusModule\u003e getModulesCurrentlyTaking() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return modulesCurrentlyTaking;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public SimpleStringProperty getCap() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return cap;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableValue\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return majorString;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static void setCap(String value) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        cap.set(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setMajor(Major major) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        majorString \u003d new SimpleStringProperty(major.nameOfMajor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/Classes.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eClasses Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * A class to hold information about each class timetable slot"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class Classes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String classNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String startTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String endTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private int size;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String venue;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String lessonType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public Classes(String input) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.classNo \u003d input.substring(3, input.indexOf(\"startTime\") - 3);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.startTime \u003d input.substring(input.indexOf(\"startTime\") + 12, input.indexOf(\"endTime\") - 3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.endTime \u003d input.substring(input.indexOf(\"endTime\") + 10, input.indexOf(\"weeks\") - 3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.size \u003d Integer.parseInt(input.substring(input.indexOf(\"size\") + 6));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.venue \u003d input.substring(input.indexOf(\"venue\") + 8, input.indexOf(\"\\\"day\\\":\") - 3);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.day \u003d input.substring(input.indexOf(\"\\\"day\\\":\") + 7, input.indexOf(\"lessonType\") - 3);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.lessonType \u003d input.substring(input.indexOf(\"lessonType\") + 13, input.indexOf(\"size\") - 3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Class ID: \" + this.classNo + \" \" + this.lessonType + \"\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Start Time: \" + this.startTime + \" End Time: \" + this.endTime + \" \" + this.day + \"\\n\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Size: \" + this.size + \"\\n\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Venue: \" + this.venue + \"\\n\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.lessonType;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.classNo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.classNo;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.day;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getVenue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.venue;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/ModPlanClass.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * WIP"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class ModPlanClass {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static final ArrayList\u003cString\u003e allMajors \u003d new ArrayList\u003c\u003e("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            Arrays.asList(\"Chinese Language\", \"Chinese Studies\", \"Japanese Studies\", \"Malay Studies\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"South Asian Studies\", \"Southeast Asian Studies\", \"English Language\", \"English Literature\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"History\", \"Philosophy\", \"Theater Studies\", \"Communications and New Media\", \"Economics\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Geography\", \"Political Science\", \"Psychology\", \"Social Work\", \"Sociology\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Environmental Studies in Geography\", \"Global Studies\", \"Business Administration(Accountancy)\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Business Administration\", \"Business Analytics\", \"Computer Science\", \"Information Systems\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Information Security\", \"Computer Engineering\", \"Dentistry\", \"Architecture\", \"Industrial Design\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Landscape Architecture\", \"Project and Facilities Management\", \"Real Estate\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Biomedical Engineering\", \"Chemical Engineering\", \"Civil Engineering\", \"Engineering Science\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Environmental Engineering\", \"Electrical Engineering\", \"Industrial and Systems Engineering\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Material Science Engineering\", \"Mechanical Engineering\", \"Computer Engineering\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Undergraduate Law Programme\", \"Graduate LL.B. Programme\", \"Medicine\", \"Nursing\", \"Music\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Applied Mathematics\", \"Chemistry\", \"Computational Biology\", \"Data Science and Analytics\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Environmental Studies in Biology\", \"Food Science and Technology\", \"Life Sciences\", \"Mathematics\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    \"Pharmacy\", \"Pharmaceutical Science\", \"Physics\", \"Quantitative Finance\", \"Statistics\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static ArrayList\u003cString\u003e statisticsReq \u003d new ArrayList\u003c\u003e(Arrays.asList(\"ST1131 /OR ST1232\", \"MA1101R\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"MA1102R\", \"CS1010E /OR CS1010S /OR CS1010X\", \"ST2131 /OR MA2216\", \"ST2132\", \"ST2137\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"MA2311 /OR MA2104 /OR MA2108S\", \"ST3131\", \"ST3236 /OR MA3238\", \"ST4199\", \"ST4231\", \"ST4233\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static final ArrayList\u003cString\u003e computerScienceReq \u003d new ArrayList\u003c\u003e(Arrays.asList(\"CS1101S\", \"CS1231S\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"CS2030S\", \"CS2040S\", \"CS2100\", \"CS2103T\", \"CS2106\", \"CS3230\", \"IS1103\", \"CS2101\", \"ES2660\", \"MA1521\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"MA1101R\", \"ST2334\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static final ArrayList\u003cString\u003e informationSystemsReq \u003d new ArrayList\u003c\u003e(Arrays.asList(\"CS1010J\", \"CS1231\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"IS1103\", \"CS2030\", \"CS2040\", \"CS2102\", \"CS2105\", \"IS2101\", \"IS2102\", \"IS2103\", \"IS3103\", \"IS3106\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"IS4100\", \"IS4103\", \"MA1301\", \"MA1312\", \"ST2334\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static final ArrayList\u003cString\u003e computerEngineeringReq \u003d new ArrayList\u003c\u003e(Arrays.asList(\"CS1010\", \"CS2040C\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"CS2113T\", \"CG2271\", \"CG2027\", \"EE2026\", \"CG2028\", \"EE4204\", \"CG2023\", \"CG1111\", \"CG1112\", \"CG4002\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"CS1231\", \"MA1511\", \"MA1512\", \"MA1508E\", \"ST2334\", \"CS2101\", \"EG2401A\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static final ArrayList\u003cString\u003e businessAnalyticsReq \u003d new ArrayList\u003c\u003e(Arrays.asList(\"BT1101\", \"CS1010S\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"EC1301\", \"IS1103\", \"MKT1705X\", \"BT2101\", \"BT2102\", \"CS2030\", \"CS2040\", \"IS2101\", \"ST2334\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"BT3102\", \"BT3103\", \"IS3103\", \"BT4103\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static final ArrayList\u003cString\u003e informationSecurityReq \u003d new ArrayList\u003c\u003e(Arrays.asList(\"CS1010\", \"CS1231S\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"CS2040C\", \"CS2100\", \"CS2102\", \"CS2113T\", \"CS2105\", \"CS2106\", \"IS3103\", \"CS2107\", \"CS3235\", \"IS4231\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            \"IS1103\", \"CS2101\", \"MA1101R\", \"MA1521\", \"ST2334\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static ArrayList\u003cString\u003e getAllMajors() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return allMajors;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static ArrayList\u003cString\u003e getComputerScienceReq() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return computerScienceReq;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static ArrayList\u003cString\u003e getInformationSystemsReq() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return informationSystemsReq;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static ArrayList\u003cString\u003e getComputerEngineeringReq() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return computerEngineeringReq;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static ArrayList\u003cString\u003e getBusinessAnalyticsReq() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return businessAnalyticsReq;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static ArrayList\u003cString\u003e getInformationSecurityReq() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return informationSystemsReq;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Takes in a major and a mod code"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param major (e.g Computer Science or Information Systems)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param mod   (any mod code e.g CS1101S)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return true if mod (mod code) is a compulsory core mod of Major"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static boolean checkIfCoreMod(String major, String mod) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        switch (major.toUpperCase()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case \"COMPUTER SCIENCE\":"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (String curr : computerScienceReq) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (curr.equals(mod)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case \"INFORMATION SYSTEMS\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (String curr : informationSystemsReq) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (curr.equals(mod)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case \"COMPUTER ENGINEERING\":"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (String curr : computerEngineeringReq) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (curr.equals(mod)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case \"BUSINESS ANALYTICS\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (String curr : businessAnalyticsReq) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (curr.equals(mod)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        case \"INFORMATION SECURITY\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (String curr : informationSecurityReq) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (curr.equals(mod)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 124,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/ModPlanLogic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eModule Planner Logic Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Just a class to handle logic behind module planning"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class ModPlanLogic {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function to check if Modules, myMod and toCheck,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * have clashing lecture slots"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param myMod module in question"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param toCheck module to check"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param sem which sem you planning"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return true if there is a clash, false otherwise"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static boolean checkLectureClash (Module myMod, Module toCheck, int sem) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        ArrayList\u003cClasses\u003e myModLectures;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        ArrayList\u003cClasses\u003e toCheckLectures;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (sem \u003d\u003d 1) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            myModLectures \u003d myMod.getSem1Lectures();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            toCheckLectures \u003d toCheck.getSem1Lectures();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            myModLectures \u003d myMod.getSem2Lectures();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            toCheckLectures \u003d toCheck.getSem2Lectures();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (Classes myModCurr : myModLectures) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String myModCurrDay \u003d myModCurr.getDay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            int myModCurrStart \u003d Integer.parseInt(myModCurr.getStartTime());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            int myModCurrEnd \u003d Integer.parseInt(myModCurr.getEndTime());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            for (Classes toCheckCurr : toCheckLectures) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                String toCheckCurrDay \u003d toCheckCurr.getDay();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                int toCheckCurrStart \u003d Integer.parseInt(toCheckCurr.getStartTime());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                int toCheckCurrEnd \u003d Integer.parseInt(toCheckCurr.getEndTime());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                if (myModCurrDay.equals(toCheckCurrDay)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    if (myModCurrStart \u003e\u003d toCheckCurrStart) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        if (myModCurrStart \u003e\u003d toCheckCurrEnd) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        if (myModCurrEnd \u003c\u003d toCheckCurrStart) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function to check if two classes clash"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param myClass first class"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param toCheck second class"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return true if there is clash false otherwise"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static boolean checkClassClash (Classes myClass, Classes toCheck) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        int myClassStart \u003d Integer.parseInt(myClass.getStartTime());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        int myClassEnd \u003d Integer.parseInt(myClass.getEndTime());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        int toCheckStart \u003d Integer.parseInt(myClass.getStartTime());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        int toCheckEnd \u003d Integer.parseInt(toCheck.getEndTime());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (myClassStart \u003e toCheckStart) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return myClassStart \u003c toCheckEnd;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } else if (myClassStart \u003d\u003d toCheckStart) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            return myClassEnd \u003e toCheckStart;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/Module.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eModule Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * A simple class to hold module information"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String title;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String code;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String department;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String faculty;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String workload;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String preclusion;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private int credits;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String sem1Exam \u003d \"NA\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private String sem2Exam \u003d \"NA\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Classes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Lectures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem1Others \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Lectures \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Tutorials \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private ArrayList\u003cClasses\u003e sem2Others \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Constructor for module class"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Parses info from http request into module"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * access information easily by using class functions"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param input this is raw HTTP data to be parsed"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public Module(String input) throws StringIndexOutOfBoundsException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.preclusion \u003d input.substring(input.indexOf(\"preclusion\") + 13, input.indexOf(\"description\") - 3);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.description \u003d input.substring(input.indexOf(\"description\") + 14, input.indexOf(\"title\\\":\") - 3);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.title \u003d input.substring(input.indexOf(\"title\") + 8, input.indexOf(\"department\") - 3);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.department \u003d input.substring(input.indexOf(\"department\") + 13, input.indexOf(\"faculty\") - 3);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.faculty \u003d input.substring(input.indexOf(\"faculty\") + 10, input.indexOf(\"workload\") - 3);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.workload \u003d input.substring(input.indexOf(\"workload\") + 10, input.indexOf(\"moduleCredit\") - 2);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        this.credits \u003d Integer.parseInt(input.substring(input.indexOf(\"moduleCredit\") + 15,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                input.indexOf(\"moduleCode\") - 3));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            this.code \u003d input.substring(input.indexOf(\"moduleCode\") + 13, input.indexOf(\"attributes\") - 3);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            this.code \u003d input.substring(input.indexOf(\"moduleCode\") + 13, input.indexOf(\"semesterData\") - 3);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String semesterData \u003d input.substring(input.indexOf(\"semester\\\":\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        semesterData \u003d semesterData.split(\"prereqTree\")[0];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        semesterData \u003d semesterData.split(\"fulfillRequirements\")[0];"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        parseSemData(semesterData);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        splitClassByType();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Helper function for search function to parse class timetable information"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param input string of class information"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private void parseSemData(String input) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        boolean hasSem1 \u003d input.contains(\"semester\\\":1\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        boolean hasSem2 \u003d input.contains(\"semester\\\":2\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        boolean hasExam \u003d input.contains(\"examDate\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String sem1Data \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String sem2Data \u003d \"\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (hasSem1 \u0026\u0026 hasExam) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem1Data \u003d input.substring(input.indexOf(\"timetable\") + 12, input.indexOf(\"examDate\") - 4);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem1Exam \u003d input.substring(input.indexOf(\"examDate\") + 11, input.indexOf(\"examDuration\") - 3).split(\"T\")[0];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } else if (hasSem1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (hasSem2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Data \u003d input.substring(input.indexOf(\"timetable\") + 12, input.indexOf(\"semester\\\":2\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Data \u003d input.substring(input.indexOf(\"timetable\") + 12);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String[] classes \u003d sem1Data.split(\"classNo\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (int i \u003d 1; i \u003c classes.length; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String temp \u003d classes[i];"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            temp \u003d temp.split(\"},\\\\{\")[0];"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            Classes myClass \u003d new Classes(temp);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem1Classes.add(myClass);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (hasSem2) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (hasExam) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Data \u003d input.substring(input.lastIndexOf(\"timetable\") + 12,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        input.lastIndexOf(\"examDate\") - 4);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Exam \u003d input.substring(input.lastIndexOf(\"examDate\") + 11,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        input.lastIndexOf(\"examDuration\") - 3).split(\"T\")[0];"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Data \u003d input.substring(input.lastIndexOf(\"timetable\") + 12);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        classes \u003d sem2Data.split(\"classNo\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (int i \u003d 1; i \u003c classes.length; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String temp \u003d classes[i];"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            temp \u003d temp.split(\"},\\\\{\")[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            Classes myClass \u003d new Classes(temp);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            sem2Classes.add(myClass);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Helper Function for Constructor"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private void splitClassByType() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (Classes curr : sem1Classes) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (curr.getLessonType().equals(\"Lecture\")) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Lectures.add(curr);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else if (curr.getLessonType().equals(\"Tutorial\")) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Tutorials.add(curr);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem1Others.add(curr);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        for (Classes curr : sem2Classes) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            if (curr.getLessonType().equals(\"Lecture\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Lectures.add(curr);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else if (curr.getLessonType().equals(\"Tutorial\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Tutorials.add(curr);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                sem2Others.add(curr);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getCode() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.code;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.title;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Classes() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem1Classes;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getSem1_exam() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem1Exam;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Classes() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem2Classes;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String getSem2_exam() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return sem2Exam;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public int getCredits() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.credits;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Lectures() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem1Lectures;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Tutorials() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem1Tutorials;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem1Others() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem1Others;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Lectures() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem2Lectures;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Tutorials() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem2Tutorials;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public ArrayList\u003cClasses\u003e getSem2Others() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return this.sem2Others;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + this.code + \" \" + this.title + \"\\n\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Faculty: \" + this.faculty + \"\\n\";"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Department: \" + this.department + \"\\n\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Credit Units: \" + this.credits + \"\\n\";"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + \"Workload: \" + this.workload + \"\\n\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        output \u003d output + this.description + \"\\n\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (!sem1Exam.equals(\"\")) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            output \u003d output + \"Semester 1 Exam: \" + sem1Exam + \"\\n\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (!sem2Exam.equals(\"\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            output \u003d output + \"Semester 2 Exam: \" + sem2Exam + \"\\n\";"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return output;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 212
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/Search.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "package seedu.address.searcher;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "import javax.net.ssl.HttpsURLConnection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * \u003ch1\u003eSearch Class\u003c/h1\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * Class provides simple search function which takes in"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * a module code and outputs simple module information"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " * taken from NUSMODs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "mpang45456"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "public class Search {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function takes in module code and returns Module Object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * For more info on Module Object, look at module Class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param moduleCode input Module Code all caps"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return module"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    public static Module findModule(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String fileName \u003d moduleCode + \".txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        File tempFile \u003d new File(\".\" + File.separator + \"src\" + File.separator + \"main\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + File.separator + \"java\" + File.separator + \"seedu\" + File.separator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + \"address\" + File.separator + \"searcher\" + File.separator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + \"cache\" + File.separator + fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            BufferedReader myReader \u003d new BufferedReader(new FileReader(tempFile));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String tempString;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            while ((tempString \u003d myReader.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                output \u003d tempString;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            String httpsUrl \u003d \"https://api.nusmods.com/v2/2019-2020/modules/\" + moduleCode + \".json\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            URL url;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                url \u003d new URL(httpsUrl);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                HttpsURLConnection con \u003d (HttpsURLConnection) url.openConnection();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                output \u003d print_content(con);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } catch (IOException d) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                d.printStackTrace();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                BufferedWriter myWriter \u003d new BufferedWriter(new FileWriter(tempFile));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                myWriter.write(output);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                myWriter.close();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } catch (IOException f) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                f.printStackTrace();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return new Module(output);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * Function to get HTTP information"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @param con just java stuff"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     * @return Raw HTTP info in string"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    private static String print_content(HttpsURLConnection con) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        if (con !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                BufferedReader br \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                        new BufferedReader("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                                new InputStreamReader(con.getInputStream()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                String input;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "mpang45456"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                while ((input \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                    output \u003d input;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                br.close();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return output + \"\\n\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 87,
      "zhouxinwei97": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/12312rd.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/A.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/ASDASD.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CASDAS.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1010.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S\",\"description\":\"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\",\"title\":\"Programming Methodology\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,1,3,3],\"moduleCredit\":\"4\",\"moduleCode\":\"CS1010\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"01\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"02\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C03\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C09\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C11\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C10\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C1A\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C04\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C05\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C06\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C07\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"C08\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":17},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Sectional Teaching\",\"size\":300}],\"examDate\":\"2019-11-27T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"4\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"3\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":120}]}],\"fulfillRequirements\":[\"FIN4719\",\"FIN4124\",\"CP2106\",\"CS1020\",\"CS3237\",\"CS2107\",\"CS2040S\",\"CS2040\",\"CS2030\",\"CS2040C\",\"IT2001\",\"IT2002\",\"CS2100\",\"BT2101\",\"BT2102\",\"IS4241\",\"BT4222\",\"IS3221\",\"BT4221\",\"BT4212\",\"EE6934\",\"EE4703\",\"MA3269\",\"DSA3102\",\"ST3247\",\"CG2028\",\"CG1112\",\"IT3011\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1010J.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1010 and its equivalents\",\"description\":\"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.\",\"title\":\"Programming Methodology\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,1,3,3],\"moduleCredit\":\"4\",\"moduleCode\":\"CS1010J\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"03\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"14\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"06\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"12\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"01\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"10\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"08\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":12},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT15\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":12}],\"examDate\":\"2019-11-27T09:00:00.000Z\",\"examDuration\":120}]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1010S.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1010, CS1010E, CS1010J, CS1010X, CS1010XCP, CS1101S\",\"description\":\"This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and \\nforemost introductory course to computing and is equivalent to CS1010 and CS1010E Programming Methodology. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoS students.\",\"title\":\"Programming Methodology\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,1,3,3],\"moduleCredit\":\"4\",\"moduleCode\":\"CS1010S\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":325},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":325},{\"classNo\":\"44\",\"startTime\":\"1800\",\"endTime\":\"1930\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"47\",\"startTime\":\"2000\",\"endTime\":\"2130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"49\",\"startTime\":\"1800\",\"endTime\":\"1930\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"48\",\"startTime\":\"2000\",\"endTime\":\"2130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"50\",\"startTime\":\"1800\",\"endTime\":\"1930\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"54\",\"startTime\":\"2000\",\"endTime\":\"2130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"19\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"37\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"40\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"18\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"07\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"15\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"16\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"34\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"35\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"36\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"52\",\"startTime\":\"1900\",\"endTime\":\"2030\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"17\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"53\",\"startTime\":\"2000\",\"endTime\":\"2130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"29\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"30\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"31\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"32\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"21\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"27\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"28\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"38\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"39\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"15\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"20\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"24\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"25\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"26\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"12\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"12\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"13\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0204\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"14\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0204\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"19\",\"startTime\":\"2000\",\"endTime\":\"2130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"21\",\"startTime\":\"1000\",\"endTime\":\"1130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"41\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0217\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"51\",\"startTime\":\"1900\",\"endTime\":\"2030\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"22\",\"startTime\":\"1000\",\"endTime\":\"1130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"33\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"22\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"42\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0217\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"45\",\"startTime\":\"1900\",\"endTime\":\"2030\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"46\",\"startTime\":\"1900\",\"endTime\":\"2030\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"23\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":16},{\"classNo\":\"20\",\"startTime\":\"2000\",\"endTime\":\"2130\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"43\",\"startTime\":\"1800\",\"endTime\":\"1930\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":16}],\"examDate\":\"2019-11-27T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"40\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"01\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0430\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"20\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"14\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0307\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"24\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"08\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0430\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":54},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"10\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"35\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"15\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"17\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"18\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"19\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"23\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"02\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0430\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"03\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"04\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0430\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":54},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT27\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":600},{\"classNo\":\"38\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"26\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"28\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"29\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"33\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"41\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"42\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"43\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"11\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"12\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"13\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"05\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"36\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"44\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"12\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"22\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"32\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"34\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"21\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"39\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"25\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"37\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"27\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"31\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":55},{\"classNo\":\"30\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15}],\"examDate\":\"2020-05-04T01:00:00.000Z\",\"examDuration\":120}],\"fulfillRequirements\":[\"FIN4719\",\"FIN4124\",\"IT3010\",\"ZB4171\",\"LSM3241\",\"MA3269\",\"DSA3102\",\"ST3247\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1101R.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1101S.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1010 or its equivalents\",\"description\":\"This module introduces the concepts of programming and computational problem solving, and is the first and foremost introductory module to computing. Starting from a small core of fundamental abstractions, the module introduces programming as a method for communicating computational processes. The module begins with purely functional programming based on a simple substitution-based execution model, and ends with a powerful modern imperative language based on a realistic environment-based execution model. Topics covered include: functional abstraction, recursion, higher-order functions, data abstraction, algorithmic strategies, state mutation, loops and arrays, evaluation strategies, sorting and searching, debugging and testing.\",\"title\":\"Programming Methodology\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,2,1,3,2],\"moduleCredit\":\"4\",\"moduleCode\":\"CS1101S\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"2\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":300},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":300},{\"classNo\":\"05F\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05G\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"12\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"18\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"20\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"02D\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02C\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02A\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02B\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02J\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03G\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03E\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03F\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"23\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"24\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"09C\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"09A\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"09E\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"09F\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"09G\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06A\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06C\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06D\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05A\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05B\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08G\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08E\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08F\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08H\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08I\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":300},{\"classNo\":\"07D\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07J\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07B\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07C\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07A\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07G\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07E\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07F\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07H\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"07I\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08D\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08C\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08B\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06E\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06F\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04G\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04F\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04E\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04D\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04B\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04J\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04C\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04A\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03B\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03C\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03D\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03A\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"15\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"10B\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10A\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10C\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10F\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10E\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"17\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"19\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"21\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"22\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":27},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":300},{\"classNo\":\"01B\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"01A\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"01C\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"01G\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"01E\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"01F\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02G\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02E\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"02F\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05E\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":25},{\"classNo\":\"09J\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"09B\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"09D\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06B\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05C\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"05D\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"08A\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"06G\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10G\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"10D\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8}],\"examDate\":\"2019-11-27T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":80},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"2B\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"1A\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"2A\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"4A\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"4B\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"1B\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"3B\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"3A\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":8},{\"classNo\":\"04\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0211\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":20}],\"examDate\":\"2020-05-04T01:00:00.000Z\",\"examDuration\":120}],\"fulfillRequirements\":[\"FIN4719\",\"FIN4124\",\"EE5907\",\"MA3269\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1103.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS1521.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS20.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2030.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1020 or its equivalent\",\"description\":\"This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include\\nobjects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.\",\"title\":\"Programming Methodology II\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,0,2,3,3],\"prerequisite\":\"CS1010 or its equivalent\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2030\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"06\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"04\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"08\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"02\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"05\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Friday\",\"lessonType\":\"Recitation\",\"size\":50},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"03\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"02\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"05\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":250},{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0336\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23}],\"examDate\":\"2019-12-04T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"33\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"29\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"31\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"32\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B110\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":450},{\"classNo\":\"05\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"02\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"07\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"03\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"09\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"01\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"30\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"18\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"17\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"28\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"34\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"04\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"06\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"25\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"26\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"36\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0338\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"23\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"24\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"21\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"22\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0120\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"09\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"16\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"14\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"13\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"15\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":348},{\"classNo\":\"08\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"RMI-SR1\",\"day\":\"Thursday\",\"lessonType\":\"Recitation\",\"size\":100},{\"classNo\":\"19\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"20\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"35\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"12\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22},{\"classNo\":\"3\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT15\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":100},{\"classNo\":\"27\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":33},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":22}],\"examDate\":\"2020-05-05T09:00:00.000Z\",\"examDuration\":120},{\"semester\":3,\"timetable\":[{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-B112\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-B109\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-0120\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-0204\",\"day\":\"Monday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-0120\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-0120\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-B109\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"LT19\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":120},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":120},{\"classNo\":\"02\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-0204\",\"day\":\"Monday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-B112\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-0120\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-B112\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-0204\",\"day\":\"Wednesday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-0204\",\"day\":\"Wednesday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-0204\",\"day\":\"Monday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-0204\",\"day\":\"Wednesday\",\"lessonType\":\"Recitation\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-B112\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":20}],\"examDate\":\"2020-06-19T06:30:00.000Z\",\"examDuration\":120}],\"prereqTree\":\"CS1010\",\"fulfillRequirements\":[\"CS5239\",\"CS5343\",\"CP3107\",\"CS3218\",\"CS2104\",\"CS3226\",\"CS3240\",\"CS4243\",\"CS2102\",\"CS2113\",\"CS3245\",\"CS2309\",\"CS3241\",\"CS4215\",\"CS2113T\",\"CS2103\",\"CS2103T\",\"IS4302\",\"IS3261\",\"BT3102\",\"IS2102\",\"IS2103\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2040.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1020, CS1020E, CS2020, CS2010, CS2040C, CS2040S\",\"description\":\"This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.\",\"title\":\"Data Structures and Algorithms\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[3,0,1,3,3],\"prerequisite\":\"CS1010 or its equivalent\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2040\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"SR_LT19\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":48},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":250},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"14\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"12\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"13\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"15\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"08\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"04\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"11\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"2\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"SR_LT19\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":48},{\"classNo\":\"10\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B109\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD1\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":250},{\"classNo\":\"06\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":23}],\"examDate\":\"2019-12-04T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":220},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":220},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"09\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"04\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"05\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B112\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23},{\"classNo\":\"11\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B111\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":23}]},{\"semester\":4,\"timetable\":[{\"classNo\":\"03\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-B108\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-0204\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":60},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-0204\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":60},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-B111\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-B108\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-06-25\",\"end\":\"2020-07-30\"},\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-B108\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-B111\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-06-23\",\"end\":\"2020-07-28\"},\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-07-30T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":\"CS1010\",\"fulfillRequirements\":[\"CS5240\",\"CS5343\",\"CS5332\",\"CS5346\",\"CS5461\",\"CS5469\",\"CS2102\",\"CS2103\",\"CS2105\",\"CS2220\",\"CS2309\",\"CS3223\",\"CS3225\",\"CS3230\",\"CS3241\",\"CS3243\",\"CS3244\",\"CS4236\",\"CS4243\",\"CS3245\",\"CS4215\",\"CS2103T\",\"CS3218\",\"CS2108\",\"CS2113\",\"CS2113T\",\"CP3107\",\"CS4261\",\"CS4269\",\"BT4015\",\"IS3261\",\"CG2271\",\"CS5477\",\"CS4277\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2100.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS1104 or Students from Department of ECE\",\"description\":\"The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.\",\"title\":\"Computer Organisation\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[3,1,1,3,2],\"prerequisite\":\"CS1010 or its equivalent\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2100\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"03\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"05\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"04\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"06\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"10\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"11\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"12\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"13\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"14\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"03\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"05\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"06\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"07\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"15\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"08\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"01\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"02\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"08\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"10\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":314},{\"classNo\":\"12\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"09\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"04\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":314},{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":21},{\"classNo\":\"15\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM2-0108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21}],\"examDate\":\"2019-11-28T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"2\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"05\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"20\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"15\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"19\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"19\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"20\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"15\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"17\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"16\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"18\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"18\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"17\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-04-30T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":\"CS1010\",\"fulfillRequirements\":[\"CS6284\",\"CS3237\",\"CS2106\",\"CS3210\",\"EE5902\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2101.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.\",\"description\":\"This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.\",\"title\":\"Effective Communication for Computing Professionals\",\"department\":\"Center for Engl Lang Comms\",\"faculty\":\"Computing\",\"workload\":[0,4,0,4,2],\"prerequisite\":\"Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.\",\"corequisite\":\"Students have to read CS2103T Software Engineering at the same time as this module.\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2101\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[]},{\"semester\":2,\"timetable\":[]}],\"prereqTree\":{\"or\":[\"ES1000\",\"ES1103\"]},\"fulfillRequirements\":[\"CP3880\",\"CS3201\",\"IS4010\",\"IS3103\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2102.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS2102S, IT2002\",\"description\":\"The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.\",\"title\":\"Database Systems\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1.5,0.5,3,3],\"prerequisite\":\"((CS1020 or its equivalent) or CS2020 or CS2030 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2102\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"10\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"11\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B108\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":233},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-0339\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":22}],\"examDate\":\"2019-11-27T05:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":230},{\"classNo\":\"08\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"11\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"12\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"07\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"01\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"02\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"03\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"09\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"10\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":23},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":23}],\"examDate\":\"2020-04-28T01:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"and\":[{\"or\":[\"CS1020\",\"CS2020\",\"CS2030\",\"CS2040\"]},{\"or\":[\"MA1100\",\"CS1231\"]}]},\"fulfillRequirements\":[\"CP3106\",\"CS6284\",\"CS5346\",\"CS5228\",\"CS5425\",\"CS4225\",\"CS3223\",\"IS4302\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2103.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS2103T, CS2113, CS2113T\",\"description\":\"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\",\"title\":\"Software Engineering\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,4],\"prerequisite\":\"(CS1020 or its equivalent) or CS2020 or (CS2030 and (CS2040 or its equivalent))\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2103\",\"aliases\":[\"CS2103T\"],\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":150}],\"examDate\":\"2019-11-29T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":100},{\"classNo\":\"05\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-04-25T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"CS1020\",\"CS2020\",{\"and\":[\"CS2030\",\"CS2040\"]}]},\"fulfillRequirements\":[\"CP3101A\",\"CP3880\",\"CS5232\",\"CS5246\",\"CS5272\",\"CS6880\",\"CS5439\",\"CS3201\",\"CS3216\",\"CS4211\",\"UIS3951R\",\"CS3249\",\"CS3202\",\"CS3281\",\"CS3217\",\"CS3283\",\"CS4239\",\"CS3219\",\"CS3203\",\"IS4302\",\"BT3102\",\"IS4234\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2103T.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS2103, CS2113, CS2113T, IS2101 or its equivalent.\",\"description\":\"This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.\",\"title\":\"Software Engineering\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,4],\"prerequisite\":\"For SoC students only. (CS1020 or its equivalent) or CS2020 or (CS2030 and (CS2040 or its equivalent))\",\"corequisite\":\"Students have to read CS2101 Effective Communication for Computing Professionals at the same time as this module\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2103T\",\"aliases\":[\"CS2103\"],\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"G13\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G11\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G13\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G13\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G13\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0217\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1500\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G10\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G12\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G12\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0217\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G10\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1500\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G10\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G12\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G11\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G12\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G11\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G11\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0210\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20}],\"examDate\":\"2019-11-29T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"G02\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G08\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G07\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G05\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G01\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G03\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G09\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":20},{\"classNo\":\"G06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":20}],\"examDate\":\"2020-04-25T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"CS1020\",\"CS2020\",{\"and\":[\"CS2030\",\"CS2040\"]}]},\"fulfillRequirements\":[\"CP3880\",\"CS3203\",\"CS3283\",\"IS4302\",\"BT3102\",\"IS4234\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2104.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"description\":\"This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.\",\"title\":\"Programming Language Concepts\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,3],\"prerequisite\":\"CS1020 or CS1020E or CS2020 or CS2030 or CS2113/T\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2104\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0212\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":80},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0421\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"3\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0421\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"4\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0421\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"2\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0421\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2019-11-25T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"CS1020\",\"CS1020E\",\"CS2020\",\"CS2030\",\"CS2113\",\"CS2113T\"]},\"fulfillRequirements\":[\"CS5219\",\"CS5215\",\"CS4216\",\"CS4214\",\"CS4212\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2106.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CG2271 or EE4214. CEG students are not allowed to take this module.\",\"description\":\"This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.\",\"title\":\"Introduction to Operating Systems\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,1,0,6],\"prerequisite\":\"CS2100 or EE2007 or EE2024 or EE2028\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2106\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":250},{\"classNo\":\"02\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"13\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":20}],\"examDate\":\"2019-12-03T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"13\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"07\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"08\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"09\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"10\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":280},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"12\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"10\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"05\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"06\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"14\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B113\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-04-27T09:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"CS2100\",\"EE2007\",\"EE2024\",\"EE2028\"]},\"fulfillRequirements\":[\"CS6280\",\"CS6211\",\"CS5272\",\"CS6219\",\"CS5248\",\"CS5250\",\"CS3235\",\"CS4344\",\"CS4223\",\"CS3211\",\"CS3221\",\"CS3220\",\"EE5903\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2108.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"CS3246\",\"description\":\"This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.\",\"title\":\"Introduction to Media Computing\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,4],\"prerequisite\":\"(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS2108\",\"semesterData\":[{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0206\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":104},{\"classNo\":\"5\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"2\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0208\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"3\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"4\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":21}]}],\"prereqTree\":{\"or\":[\"CS1020\",\"CS2020\",\"CS2040\"]},\"fulfillRequirements\":[\"CS4347\",\"CS4242\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS2202.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS3131.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS3230.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\",\"description\":\"This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students\u0027 ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.\",\"title\":\"Design and Analysis of Algorithms\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,3],\"prerequisite\":\"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS3230\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"05\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-B103\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":250}],\"examDate\":\"2019-12-02T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"13\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0207\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"12\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"02\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"06\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"09\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"I3-AUD\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":250},{\"classNo\":\"10\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"01\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":15},{\"classNo\":\"03\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0114\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":15}],\"examDate\":\"2020-05-05T01:00:00.000Z\",\"examDuration\":120},{\"semester\":4,\"timetable\":[{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-06-22\",\"end\":\"2020-07-27\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-06-22\",\"end\":\"2020-07-27\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":{\"start\":\"2020-06-22\",\"end\":\"2020-07-27\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-06-24\",\"end\":\"2020-07-29\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-06-24\",\"end\":\"2020-07-29\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":{\"start\":\"2020-06-24\",\"end\":\"2020-07-29\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-06-24\",\"end\":\"2020-07-29\"},\"venue\":\"LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":100},{\"classNo\":\"01\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-06-22\",\"end\":\"2020-07-27\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-06-22\",\"end\":\"2020-07-27\"},\"venue\":\"SR_LT19\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":{\"start\":\"2020-06-24\",\"end\":\"2020-07-29\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-06-22\",\"end\":\"2020-07-27\"},\"venue\":\"LT19\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":100},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-06-24\",\"end\":\"2020-07-29\"},\"venue\":\"SR_LT19\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20}]}],\"prereqTree\":{\"and\":[{\"or\":[\"CS2010\",\"CS2020\",\"CS2040\"]},{\"or\":[\"MA1100\",\"CS1231\"]}]},\"fulfillRequirements\":[\"CS6283\",\"CS6244\",\"CS6215\",\"CS6285\",\"CS6281\",\"CS6235\",\"CS5330\",\"CS5238\",\"CS5234\",\"CS5237\",\"CS5206\",\"CS6210\",\"CS4257\",\"CS4234\",\"CS4268\",\"CS4235\",\"CS4231\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS3243.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.\",\"description\":\"The module introduces the basic concepts in search and knowledge representation as well as to a number of sub-areas of artificial intelligence. It focuses on covering the essential concepts in AI. The module covers Turing test, blind search, iterative deepening, production systems, heuristic search, A* algorithm, minimax and alpha-beta procedures, predicate and first-order logic, resolution refutation, non-monotonic reasoning, assumption-based truth maintenance systems, inheritance hierarchies, the frame problem, certainly factors, Bayes\u0027 rule, frames and semantic nets, planning, learning, natural language, vision, and expert systems and LISP.\",\"title\":\"Introduction to Artificial Intelligence\",\"department\":\"Computer Science\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,4],\"prerequisite\":\"((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent))\\nand (MA1100 or (CS1231 or its equivalent))\",\"moduleCredit\":\"4\",\"moduleCode\":\"CS3243\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"08\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT19\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"03\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2019-11-26T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT15\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"07\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"11\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0216\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"09\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"12\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"08\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"10\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"06\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0113\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"04\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-05-02T05:00:00.000Z\",\"examDuration\":120},{\"semester\":3,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-VCRM\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":50},{\"classNo\":\"01\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-VCRM\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-VCRM\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-VCRM\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-VCRM\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":50},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-VCRM\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"01\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":{\"start\":\"2020-05-11\",\"end\":\"2020-06-15\"},\"venue\":\"COM1-VCRM\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":20},{\"classNo\":\"03\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":{\"start\":\"2020-05-13\",\"end\":\"2020-06-17\"},\"venue\":\"COM1-VCRM\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":20}],\"examDate\":\"2020-06-19T01:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"and\":[{\"or\":[\"CS2010\",\"CS2020\",\"CS2040\"]},{\"or\":[\"MA1100\",\"CS1231\"]}]},\"fulfillRequirements\":[\"CS5340\",\"CS5228\",\"CS5338\",\"CS5446\",\"CS6208\",\"CS4246\",\"CS4244\",\"CS4248\",\"CS5478\",\"CS4278\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS4433.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CS4434.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/CSDAS.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/DASDAS.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/DASDSA.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/ES2660.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"GET1006 and GEK1901\",\"description\":\"In a context of prolific production and convenient access to content and innovation in the Information Age, how should one critically process and clearly communicate ideas to various audiences? In this module, students will learn to question and articulate their analysis of assumptions and assertions on issues facing the Information Age through processes such as identifying bias and substantiating arguments. The Ennis’ (1986, 2001) taxonomy of critical thinking dispositions will be employed to develop students’ analytical thinking skills and their ability to articulate cogent responses to arguments or to defend their own positions in both written and oral form.\",\"title\":\"Communicating in the Information Age\",\"department\":\"Center for Engl Lang Comms\",\"faculty\":\"NUS\",\"workload\":[0,4,0,2,4],\"prerequisite\":\"1. Students who are required to take ES1000 Foundation Academic English and/or ES1103 English for Academic Purposes, must pass those modules before they are allowed to read this module.\\n2. Only SoC students matriculated in AY2016/2017 and after, are allowed to take ES2660.\",\"moduleCredit\":\"4\",\"moduleCode\":\"ES2660\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"G14\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G03\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G11\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G06\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G12\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G12\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G13\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G05\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G11\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G04\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G09\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G05\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0201\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G01\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G08\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G08\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G02\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0210\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G06\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G09\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G14\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G15\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G10\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G13\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G15\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"COM1-0203\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G03\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS6-0208\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18}]},{\"semester\":2,\"timetable\":[{\"classNo\":\"G11\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G11\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G12\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G04\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G03\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G03\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G04\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G10\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G10\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G05\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G08\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G09\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G01\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G01\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G05\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G09\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G08\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G12\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G13\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G13\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0611\",\"day\":\"Friday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G02\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Thursday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G02\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0620\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":18},{\"classNo\":\"G07\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"AS3-0610\",\"day\":\"Tuesday\",\"lessonType\":\"Sectional Teaching\",\"size\":18}]}]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/IS1103.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"description\":\"The module gives a wide yet insightful understanding of the impact of IT on organisation and society. Issues such as Internet and “new economy” geographies; impacts of IT and creation of IT innovation for public\\nhealth, urban planning, and regional equity, food systems, climate change can be discussed. Other issues for consideration could be dark web and IT security advancement, open vs. closed innovation creation. Misuse of IT that put ethics and professionalism into question will be also discussed.\",\"title\":\"IS Innovations in Organisations and Society\",\"department\":\"Information Systems and Analytics\",\"faculty\":\"Computing\",\"workload\":[2,1,0,3,4],\"moduleCredit\":\"4\",\"moduleCode\":\"IS1103\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Monday\",\"lessonType\":\"Sectional Teaching\",\"size\":465},{\"classNo\":\"18\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0207\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"03\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM2-0108\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"01\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"10\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0216\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"12\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM2-0108\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"09\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0216\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"05\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0209\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"08\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0216\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"07\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0216\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"13\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"15\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0216\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"19\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"17\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM1-0207\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"11\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,3,5,7,9,11,13],\"venue\":\"COM2-0108\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"06\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0209\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"20\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0209\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"02\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0209\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"04\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM2-0108\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25},{\"classNo\":\"16\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0216\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":21},{\"classNo\":\"14\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[2,4,6,8,10,12],\"venue\":\"COM1-0207\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":25}]},{\"semester\":2,\"timetable\":[]}],\"fulfillRequirements\":[\"IS4100\",\"IS3251\",\"IS3103\",\"IS3240\",\"IS4240\",\"IS4250\",\"IS4241\",\"IS3221\",\"IS3101\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/IT1107.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/MA1101R.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"EG1401, EG1402, MA1101, MA1311, MA1506, MA1508, FOE students\",\"description\":\"This module is a first course in linear algebra.  Fundamental concepts of linear algebra will be introduced and investigated in the context of the Euclidean spaces R^n.  Proofs of results will be presented in the concrete setting.  Students are expected to acquire computational facilities and geometric intuition with regard to vectors and matrices.  Some applications will be presented. Major topics: Systems of linear equations, matrices, determinants, Euclidean spaces, linear combinations and linear span, subspaces, linear independence, bases and dimension, rank of a matrix, inner products, eigenvalues and eigenvectors, diagonalization, linear transformations between Euclidean spaces, applications.\",\"title\":\"Linear Algebra I\",\"department\":\"Mathematics\",\"faculty\":\"Science\",\"workload\":[3,1,1,0,6],\"prerequisite\":\"GCE ‘A’ Level or H2 Mathematics or H2 Further Mathematics  or MA1301 or MA1301FC or MA1301X\",\"moduleCredit\":\"4\",\"moduleCode\":\"MA1101R\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"3\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":335},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"4\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"10\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"29\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"30\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"27\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"17\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"18\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0436\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"12\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"5\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"7\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"20\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":335},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD1\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":335},{\"classNo\":\"1\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":335},{\"classNo\":\"C1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[4,6,8,10,12],\"venue\":\"S17-0302\",\"day\":\"Monday\",\"lessonType\":\"Laboratory\",\"size\":42},{\"classNo\":\"22\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":335},{\"classNo\":\"11\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"21\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"15\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"14\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD1\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":335},{\"classNo\":\"C2\",\"startTime\":\"1100\",\"endTime\":\"1300\",\"weeks\":[4,6,8,10,12],\"venue\":\"S17-0302\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":42},{\"classNo\":\"24\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"13\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"C5\",\"startTime\":\"1500\",\"endTime\":\"1700\",\"weeks\":[12],\"venue\":\"S17-0302\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":42},{\"classNo\":\"C3\",\"startTime\":\"1100\",\"endTime\":\"1300\",\"weeks\":[4,6,8,10,12],\"venue\":\"S17-0302\",\"day\":\"Friday\",\"lessonType\":\"Laboratory\",\"size\":42},{\"classNo\":\"C4\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[12],\"venue\":\"S17-0302\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":42}],\"examDate\":\"2019-11-28T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"8\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"9\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"16\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"20\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S14-0620\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"21\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S14-0620\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"22\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S14-0620\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"23\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S14-0620\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"12\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"14\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT27\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":450},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT27\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":451},{\"classNo\":\"18\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"24\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"4\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"7\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"25\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"15\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"6\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"C2\",\"startTime\":\"1100\",\"endTime\":\"1300\",\"weeks\":[4,6,8,10,12],\"venue\":\"S17-0302\",\"day\":\"Wednesday\",\"lessonType\":\"Laboratory\",\"size\":42},{\"classNo\":\"C3\",\"startTime\":\"1300\",\"endTime\":\"1500\",\"weeks\":[4,6,8,10,12],\"venue\":\"S17-0302\",\"day\":\"Thursday\",\"lessonType\":\"Laboratory\",\"size\":42},{\"classNo\":\"3\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"5\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"10\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"17\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT27\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":450},{\"classNo\":\"19\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT27\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":451},{\"classNo\":\"1\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"13\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"C1\",\"startTime\":\"1500\",\"endTime\":\"1700\",\"weeks\":[4,6,8,10,12],\"venue\":\"S17-0302\",\"day\":\"Tuesday\",\"lessonType\":\"Laboratory\",\"size\":42}],\"examDate\":\"2020-04-30T09:00:00.000Z\",\"examDuration\":120}],\"fulfillRequirements\":[\"EC3314\",\"DSC3214\",\"CS5246\",\"CS6244\",\"CS5240\",\"CS5332\",\"CS5343\",\"CS5249\",\"CS5241\",\"CS4347\",\"CS3218\",\"CS4234\",\"CS3242\",\"CS4268\",\"CS4243\",\"CS3244\",\"CS4235\",\"BT4240\",\"MA3266\",\"MA3252\",\"MA3238\",\"MA3229\",\"MA3220\",\"DSA3102\",\"MA2312\",\"MA2289\",\"MA2288\",\"MA2219\",\"MA2214\",\"MA2213\",\"DSA2102\",\"MA2101S\",\"MA2101\",\"PC2130\",\"PC2131\",\"PC2134\",\"PC2132\",\"DSA4212\",\"ST3236\",\"DSA2101\",\"CS5478\",\"CS5477\",\"CS4278\",\"CS4277\",\"IT3011\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/MA1521.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"Students reading a primary major in Mathematics/Applied Mathematics/Quantitative Finance/Data Science and Analytics, MA1102R, MA1312, MA1505, MA1507, MA2501, FoE students\",\"description\":\"This module provides a basic foundation for calculus and its related subjects required by computing students. The objective is to train the students to be able to handle calculus techniques arising in their courses of specialization. In addition to the standard calculus material, the course also covers simple mathematical modeling techniques and numerical methods in connection with ordinary differential equations. \\n\\n\\n\\nMajor topics: \\n\\nPreliminaries on sets and number systems. \\n\\nCalculus of functions of one variable and applications. \\n\\nSequences, series and power series.   \\n\\nFunctions of several variables. Extrema.\\n\\nFirst and second order differential equations. \\n\\nBasic numerical methods for ordinary differential equations.\",\"title\":\"Calculus for Computing\",\"department\":\"Mathematics\",\"faculty\":\"Science\",\"workload\":[3,1,0,0,6],\"prerequisite\":\"GCE ‘A’ Level Mathematics or H2 Mathematics or H2 Further Mathematics or MA1301 or MA1301X\",\"moduleCredit\":\"4\",\"moduleCode\":\"MA1521\",\"attributes\":{\"su\":true},\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"16\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"20\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"21\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"4\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0304\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"5\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"6\",\"startTime\":\"1700\",\"endTime\":\"1800\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"24\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"7\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"8\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S14-0620\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"10\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"18\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"11\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"22\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0512\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"14\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"15\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"13\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0304\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"12\",\"startTime\":\"0800\",\"endTime\":\"0900\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT32\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":400},{\"classNo\":\"2\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT32\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":400},{\"classNo\":\"17\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"9\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S14-0620\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"19\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0511\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":350},{\"classNo\":\"1\",\"startTime\":\"1600\",\"endTime\":\"1800\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":350}],\"examDate\":\"2019-11-30T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"8\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"11\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"10\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"6\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"7\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"4\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"5\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD3\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":260},{\"classNo\":\"9\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0406\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":360},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD3\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":260},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"UT-AUD2\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":360}],\"examDate\":\"2020-05-05T01:00:00.000Z\",\"examDuration\":120}],\"fulfillRequirements\":[\"DSC3214\",\"CS5240\",\"CS5332\",\"CS5343\",\"CS5249\",\"CS5241\",\"CS4347\",\"CS3218\",\"CS3242\",\"CS4243\",\"CS3244\",\"BT2101\",\"IS4242\",\"BT4240\",\"MA3220\",\"MA2312\",\"MA2311\",\"MA2216\",\"MA2213\",\"MA2108S\",\"MA2108\",\"MA2104\",\"MA1506\",\"MA1104\",\"ST2131\",\"ST2334\",\"CS5478\",\"IT3011\",\"CS4278\"]}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/MA2108.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"MA2108S, MA2311\",\"description\":\"This module is a continuation of MA1100. The main objective is to further develop the student\u0027s mastery of the mathematical language, concepts, and methods. The focus here is more on the analytic and topological notions such as convergence and continuity, which are essential for a rigorous treatment of mathematical analysis. The student\u0027s ability to read and write mathematical proofs is also further developed in this module. Main topics: real numbers, sequences and series of real numbers, metrics in Euclidean spaces, open and closed sets, continuous functions, compact sets, connected sets, sequences of functions. Major applications include: intermediate value theorem, extreme value theorem.\",\"title\":\"Mathematical Analysis I\",\"department\":\"Mathematics\",\"faculty\":\"Science\",\"workload\":[3,1,0,0,6],\"prerequisite\":\"MA1102R or MA1505 or MA1511 or MA1505C or MA1507 or MA1521\",\"moduleCredit\":\"4\",\"moduleCode\":\"MA2108\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"2\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT29\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":100},{\"classNo\":\"4\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0611\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT29\",\"day\":\"Monday\",\"lessonType\":\"Lecture\",\"size\":100}],\"examDate\":\"2019-12-04T09:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":150},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":150},{\"classNo\":\"2\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0405\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"1\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S17-0404\",\"day\":\"Monday\",\"lessonType\":\"Tutorial\",\"size\":30}],\"examDate\":\"2020-05-05T05:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"MA1102R\",\"MA1505\",\"MA1511\",\"MA1505C\",\"MA1507\",\"MA1521\"]},\"fulfillRequirements\":[\"MA4248\",\"MA3291\",\"MA3265\",\"MA3264\",\"MA3220\",\"MA3110S\",\"MA3110\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/ST2132.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"description\":\"This module introduces students to the theoretical underpinnings of statistical methodology and concentrates on inferential procedures within the framework of parametric models. Topic include: random sample and statistics, method of moments, maximum likelihood estimate, Fisher information, sufficiency and completeness, consistency and unbiasedness, sampling distributions, x2-, t- and Fdistributions, confidence intervals, exact and asymptotic pivotal method, concepts of hypothesis testing, likelihood ratio test, Neyman-Pearson lemma. This module is targeted at students who are interested in Statistic and are able to meet the prerequisite.\",\"title\":\"Mathematical Statistics\",\"department\":\"Statistics and Applied Probability\",\"faculty\":\"Science\",\"workload\":[3,1,0,3,3],\"prerequisite\":\"MA2216 or ST2131 or ST2334\",\"moduleCredit\":\"4\",\"moduleCode\":\"ST2132\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT31\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"1\",\"startTime\":\"1400\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT31\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":200},{\"classNo\":\"1\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-06118\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":28},{\"classNo\":\"5\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05102\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"6\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0304\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"2\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-06118\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":28},{\"classNo\":\"3\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-06118\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":28},{\"classNo\":\"4\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05102\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29}],\"examDate\":\"2019-12-02T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT29\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":190},{\"classNo\":\"1\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0430\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"2\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0440\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"3\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-0440\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":30},{\"classNo\":\"4\",\"startTime\":\"1600\",\"endTime\":\"1700\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-06118\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":45},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT29\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":190}],\"examDate\":\"2020-05-06T01:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"MA2216\",\"ST2131\",\"ST2334\"]},\"fulfillRequirements\":[\"CS5239\",\"CS5340\",\"CS5346\",\"CS5228\",\"CS5233\",\"CS5332\",\"CS5446\",\"CS4257\",\"CS4246\",\"IS4242\",\"ST5217\",\"ST5215\",\"ST5212\",\"ST5211\",\"ST4241\",\"ST4234\",\"ST4232\",\"ST4231\",\"DSA4212\",\"ST3248\",\"ST3246\",\"ST3243\",\"ST3242\",\"ST3233\",\"ST3232\",\"DSA3101\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/ST2312.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/ST3131.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "{\"acadYear\":\"2019/2020\",\"preclusion\":\"ST2335, EC3303\",\"description\":\"This module focuses on data analysis using multiple regression models. Topics include simple linear regression, multiple regression, model building and regression diagnostics. One and two factor analysis of variance, analysis of covariance, linear model as special case of generalized linear model. This module is targeted at students who are interested in Statistics and are able to meet the pre-requisites.\",\"title\":\"Regression Analysis\",\"department\":\"Statistics and Applied Probability\",\"faculty\":\"Science\",\"workload\":[3,1,0,3,3],\"prerequisite\":\"ST2131 or MA2216 or ST2334\",\"moduleCredit\":\"4\",\"moduleCode\":\"ST3131\",\"semesterData\":[{\"semester\":1,\"timetable\":[{\"classNo\":\"1\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT34\",\"day\":\"Wednesday\",\"lessonType\":\"Lecture\",\"size\":190},{\"classNo\":\"1\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT34\",\"day\":\"Friday\",\"lessonType\":\"Lecture\",\"size\":190},{\"classNo\":\"4\",\"startTime\":\"1400\",\"endTime\":\"1500\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05102\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":48},{\"classNo\":\"5\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05102\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"1\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":47},{\"classNo\":\"2\",\"startTime\":\"1100\",\"endTime\":\"1200\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":47},{\"classNo\":\"3\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Friday\",\"lessonType\":\"Tutorial\",\"size\":48}],\"examDate\":\"2019-11-27T01:00:00.000Z\",\"examDuration\":120},{\"semester\":2,\"timetable\":[{\"classNo\":\"6\",\"startTime\":\"0900\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"5\",\"startTime\":\"1000\",\"endTime\":\"1100\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"3\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"4\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Thursday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"1\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Thursday\",\"lessonType\":\"Lecture\",\"size\":220},{\"classNo\":\"1\",\"startTime\":\"0800\",\"endTime\":\"1000\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"LT26\",\"day\":\"Tuesday\",\"lessonType\":\"Lecture\",\"size\":220},{\"classNo\":\"1\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Tuesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"2\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"8\",\"startTime\":\"1300\",\"endTime\":\"1400\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"9\",\"startTime\":\"1500\",\"endTime\":\"1600\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29},{\"classNo\":\"7\",\"startTime\":\"1200\",\"endTime\":\"1300\",\"weeks\":[1,2,3,4,5,6,7,8,9,10,11,12,13],\"venue\":\"S16-05101\",\"day\":\"Wednesday\",\"lessonType\":\"Tutorial\",\"size\":29}],\"examDate\":\"2020-04-30T01:00:00.000Z\",\"examDuration\":120}],\"prereqTree\":{\"or\":[\"ST2131\",\"MA2216\",\"ST2334\"]},\"fulfillRequirements\":[\"BSS4003B\",\"BSN4811A\",\"ST5207\",\"ST5213\",\"ST5220\",\"ST4248\",\"ST4245\",\"DSA4211\",\"ST4233\",\"ST3241\",\"ST3240\",\"ST4242\",\"ST4240\"]}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/searcher/cache/casfas.txt",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 45,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * API for module book storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public interface CalendarBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getCalendarEntriesFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns Calendar data as a List of task"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Optional\u003cObservableList\u003cTask\u003e\u003e readCalendar() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see #readCalendar()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Optional\u003cObservableList\u003cTask\u003e\u003e readCalendar(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void saveCalendar(ObservableList\u003cTask\u003e taskList) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void saveCalendar(ObservableList\u003cTask\u003e taskList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedCalendar.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Jackson-friendly version of {@link Task}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class JsonAdaptedCalendar {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Calendar\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final boolean status;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Constructs a {@code JsonAdaptedCalendar} with the given date details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAdaptedCalendar(@JsonProperty(\"description\") String description, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                               @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                               @JsonProperty(\"module\") String module,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                               @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                               @JsonProperty(\"status\") boolean status) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Converts a given {@code calendar} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAdaptedCalendar(Task task) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        description \u003d task.getDescription();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        date \u003d task.getDate();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        status \u003d task.getStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (task instanceof ModuleTask) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            category \u003d \"School\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            priority \u003d Integer.toString(((ModuleTask) task).getPriority().getLevelOfSignificance());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            module \u003d ((ModuleTask) task).getModuleRelated().toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            category \u003d task.getCategory();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            priority \u003d \"1\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            module \u003d \"-1\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Converts this Jackson-friendly adapted Task object into the model\u0027s {@code task} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Task toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (this.module.equals(\"-1\")) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Deadline deadline \u003d new Deadline(description, date, category, \"add\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (status) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                deadline.markAsDone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return deadline;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            ModuleTask moduleTask \u003d new ModuleTask("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    description, new ModuleCode(module), date, Priority.getPriority(priority));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (status) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                moduleTask.markAsDone();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return moduleTask;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "zhouxinwei97": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDiary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Jackson-friendly version of {@link DiaryEntry}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class JsonAdaptedDiary {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Diary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String entryContent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String weather;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String mood;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Constructs a {@code JsonAdaptedDiary} with the given person details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAdaptedDiary(@JsonProperty(\"entry_content\") String entryContent, @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            @JsonProperty(\"weather\") String weather,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            @JsonProperty(\"mood\") String mood) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.entryContent \u003d entryContent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.weather \u003d weather;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.mood \u003d mood;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Dummy java docs."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param source param"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAdaptedDiary(DiaryEntry source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        entryContent \u003d source.getEntryContent();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weather \u003d source.getWeather().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        mood \u003d source.getMood().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Converts this Jackson-friendly adapted DiaryEntry object into the model\u0027s {@code DiaryEntry} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntry toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new DiaryEntry(entryContent);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedModuleTask.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Creates a JsonAdaptedModuleTask for usage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class JsonAdaptedModuleTask {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String moduleRelated;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Constructs a {@code ModuleTask} with the given task details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonAdaptedModuleTask(@JsonProperty(\"moduleRelated\") String moduleRelated,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                                 @JsonProperty(\"timing\") String timing,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                                 @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                                 @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                 @JsonProperty(\"isDone\") boolean isDone) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleRelated \u003d moduleRelated;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.timing \u003d timing;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonAdaptedModuleTask(ModuleTask source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleRelated \u003d source.getModuleRelated().toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        timing \u003d source.getDate();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        priority \u003d Integer.toString(source.getPriority().getLevelOfSignificance());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        description \u003d source.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        isDone \u003d source.getStatus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleTask toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (moduleRelated \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleRelated)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final ModuleCode moduleCode \u003d new ModuleCode(moduleRelated);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (timing \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"timing\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!Task.isValidDate(timing)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(\"invalid date!\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final Priority modelPriority \u003d Priority.getPriority(priority);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTask result \u003d new ModuleTask(description, moduleCode, timing, modelPriority);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            result.markAsDone();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 81,
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedNusModule.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Jackson-friendly version of {@link NusModule}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class JsonAdaptedNusModule {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"NusModule\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String modularCredit;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final String grade;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final List\u003cJsonAdaptedModuleTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Constructs a {@code JsonAdaptedNusModule} with the given module details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonAdaptedNusModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                                @JsonProperty(\"modularCredit\") String modularCredit,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                                @JsonProperty(\"grade\") String grade,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                                @JsonProperty(\"tasks\") List\u003cJsonAdaptedModuleTask\u003e tasks) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modularCredit \u003d modularCredit;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.grade \u003d grade;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (tasks !\u003d null) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            this.tasks.addAll(tasks);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonAdaptedNusModule(NusModule source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleCode \u003d source.getModuleCode().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        modularCredit \u003d Integer.toString(source.getModularCredit());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (source.getGrade().isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            grade \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            grade \u003d source.getGrade().get().getText();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        tasks.addAll(source.getTasks().stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .map(JsonAdaptedModuleTask::new)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Converts this Jackson-friendly adapted nus module object into the model\u0027s {@code NusModule} object."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted nus module."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public NusModule toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final List\u003cModuleTask\u003e moduleTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (JsonAdaptedModuleTask task : tasks) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            moduleTasks.add(task.toModelType());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (modularCredit \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"modular credit\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final int modelMc \u003d Integer.parseInt(modularCredit);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Grade modelGrade \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (grade !\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            modelGrade \u003d Grade.getGrade(grade);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new NusModule(modelModuleCode, modelMc, Optional.ofNullable(modelGrade), moduleTasks);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 92,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAddressBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAddressBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Path calendarEntriesFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonAddressBookStorage(Path filePath, Path calendarEntriesFilePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.calendarEntriesFilePath \u003d calendarEntriesFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.calendarEntriesFilePath \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cJsonSerializableAddressBook\u003e jsonAddressBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                filePath, JsonSerializableAddressBook.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!jsonAddressBook.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(jsonAddressBook.get().toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAddressBook(addressBook), filePath);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 80,
      "zhouxinwei97": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCalendarStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * A class to access ModuleBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class JsonCalendarStorage implements CalendarBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonCalendarStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getCalendarEntriesFilePath() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cObservableList\u003cTask\u003e\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return readCalendar(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cObservableList\u003cTask\u003e\u003e readCalendar(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Optional\u003cJsonSerializableCalenderBook\u003e jsonCalendarBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                filePath, JsonSerializableCalenderBook.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!jsonCalendarBook.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return Optional.of(jsonCalendarBook.get().toModelType());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void saveCalendar(ObservableList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        saveCalendar(taskList, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void saveCalendar(ObservableList\u003cTask\u003e taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCalenderBook(taskList), filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonModuleBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * A class to access ModuleBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class JsonModuleBookStorage implements ModuleBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonModuleBookStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonModuleBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Optional\u003cModuleBook\u003e readModuleBook() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return readModuleBook(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Similar to {@link #readModuleBook()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Optional\u003cModuleBook\u003e readModuleBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Optional\u003cJsonSerializableModuleBook\u003e jsonModuleBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                filePath, JsonSerializableModuleBook.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        if (!jsonModuleBook.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return Optional.of(jsonModuleBook.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void saveModuleBook(ModuleBook moduleBook) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        saveModuleBook(moduleBook, filePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Similar to {@link #saveModuleBook(ModuleBook)}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void saveModuleBook(ModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(moduleBook);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableModuleBook(moduleBook), filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAddressBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@JsonRootName(value \u003d \"addressbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonSerializableAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedPerson\u003e persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cJsonAdaptedDiary\u003e diary \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cJsonAdaptedCalendar\u003e calendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonSerializableAddressBook(@JsonProperty(\"persons\") List\u003cJsonAdaptedPerson\u003e persons,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                       @JsonProperty(\"diary\") List\u003cJsonAdaptedDiary\u003e diary) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.addAll(persons);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (diary !\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            this.diary.addAll(diary);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonSerializableAddressBook(ReadOnlyAddressBook source) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.addAll(source.getPersonList().stream().map(JsonAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedPerson jsonAdaptedPerson : persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Person person \u003d jsonAdaptedPerson.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            if (addressBook.hasPerson(person)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBook.addPerson(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 59,
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCalenderBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An Immutable calendarbook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "@JsonRootName(value \u003d \"calendarbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class JsonSerializableCalenderBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final List\u003cJsonAdaptedCalendar\u003e calendar \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonSerializableCalenderBook (@JsonProperty(\"calendar\") List\u003cJsonAdaptedCalendar\u003e calendar) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.calendar.addAll(calendar);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public JsonSerializableCalenderBook(ObservableList\u003cTask\u003e source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calendar.addAll(source.stream().map(JsonAdaptedCalendar::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ObservableList\u003cTask\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ObservableList\u003cTask\u003e taskList \u003d FXCollections.observableList(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        for (JsonAdaptedCalendar jsonAdaptedCalendar : calendar) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Task calendarTask \u003d jsonAdaptedCalendar.toModelType();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            taskList.add(calendarTask);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            Task.addTaskPerDate(calendarTask.getDate(), calendarTask);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableModuleBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * An Immutable ModuleBook that is serializable to JSON format."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "@JsonRootName(value \u003d \"modulebook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class JsonSerializableModuleBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"Modules list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private final List\u003cJsonAdaptedNusModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given persons."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonSerializableModuleBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedNusModule\u003e modules) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public JsonSerializableModuleBook(ModuleBook source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        modules.addAll(source.getModulesTakenList().stream().map(JsonAdaptedNusModule::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Converts this module book into the model\u0027s {@code ModuleBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public ModuleBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (JsonAdaptedNusModule jsonAdaptedNusModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            NusModule module \u003d jsonAdaptedNusModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            if (moduleBook.hasModule(module.getModuleCode())) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            moduleBook.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBook;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 59,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ModuleBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * API for module book storage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public interface ModuleBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns ModuleBook data as a {@link ModuleBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Optional\u003cModuleBook\u003e readModuleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @see #getModuleBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Optional\u003cModuleBook\u003e readModuleBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @param moduleBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void saveModuleBook(ModuleBook moduleBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * @see #saveModuleBook(ModuleBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void saveModuleBook(ModuleBook moduleBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 42,
      "zhouxinwei97": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public interface Storage extends AddressBookStorage, UserPrefsStorage, ModuleBookStorage, CalendarBookStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Path getModuleBookFilePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    Optional\u003cModuleBook\u003e readModuleBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void saveModuleBook(ModuleBook moduleBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    Path getCalendarEntriesFilePath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 9,
      "-": 31,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private ModuleBookStorage moduleBookStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private CalendarBookStorage calendarBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          ModuleBookStorage moduleBookStorage, CalendarBookStorage calendarBookStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        this.moduleBookStorage \u003d moduleBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.calendarBookStorage \u003d calendarBookStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ModuleBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBookStorage.getModuleBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Optional\u003cModuleBook\u003e readModuleBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return readModuleBook(moduleBookStorage.getModuleBookFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public Optional\u003cModuleBook\u003e readModuleBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return moduleBookStorage.readModuleBook(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void saveModuleBook(ModuleBook moduleBook) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        saveModuleBook(moduleBook, moduleBookStorage.getModuleBookFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void saveModuleBook(ModuleBook moduleBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBookStorage.saveModuleBook(moduleBook, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Path getCalendarEntriesFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return calendarBookStorage.getCalendarEntriesFilePath();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cObservableList\u003cTask\u003e\u003e readCalendar() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return readCalendar(calendarBookStorage.getCalendarEntriesFilePath());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public Optional\u003cObservableList\u003cTask\u003e\u003e readCalendar(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return calendarBookStorage.readCalendar(filePath);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void saveCalendar(ObservableList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        saveCalendar(taskList, calendarBookStorage.getCalendarEntriesFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void saveCalendar(ObservableList\u003cTask\u003e taskList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calendarBookStorage.saveCalendar(taskList, filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 32,
      "-": 77,
      "zhouxinwei97": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * CalenderPanel that holds the month"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderDate extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"CalenderDate.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalenderDate.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String day;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label calenderDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderDate(String date, int day) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.day \u003d \"\" + day;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDate.setText(this.day);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setCircleNotVisible();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setCssStyles();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setCssStyles() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDate.setStyle(\"-fx-text-fill: #fb7b6b\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setCircleNotVisible() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        circle.setVisible(false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Changes colour of the circle based on priority"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setPriorityColour(Priority priority) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String priorityLevel \u003d priority.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (priorityLevel.equals(\"Very high\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #dd2c00\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (priorityLevel.equals(\"High\")) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #ff5722\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (priorityLevel.equals(\"Medium\")) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #f2ed6f\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (priorityLevel.equals(\"Low\")) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #639a67\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #2b580c\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setCircleVisible() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        circle.setVisible(true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderDeadline.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderDeadline extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"CalenderDeadline.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final Task deadline;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private FlowPane modCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Circle circle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderDeadline(Task deadline, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        category.setText(deadline.getCategory());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        description.setText(deadline.getDescription());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        date.setText(\"Deadline: \" + deadline.getDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (deadline instanceof ModuleTask) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            setModuleTask(deadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            setPriorityColour(((ModuleTask) deadline).getPriority());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            setPriorityColour(Priority.VERYLOW);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setStatusColor();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private void setModuleTask(Task deadline) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        category.setText(\"School\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modCode.getChildren().add(new Label(((ModuleTask) deadline).getModuleRelated().toString()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modCode.setStyle(\"-fx-background-color: #5b8c5a\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private void setStatusColor() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (deadline.getStatus()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #323232\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            cardPane.setStyle(\"-fx-background-color: #515658\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Changes colour of the circle based on priority"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param priority"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setPriorityColour(Priority priority) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String priorityLevel \u003d priority.toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (priorityLevel.equals(\"Very high\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #dd2c00\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (priorityLevel.equals(\"High\")) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #ff5722\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (priorityLevel.equals(\"Medium\")) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #f2ed6f\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (priorityLevel.equals(\"Low\")) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #639a67\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            circle.setStyle(\"-fx-fill: #2b580c\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof CalenderDeadline)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"CalenderListPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalenderListPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cTask\u003e calenderDeadlineListView;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderListPanel(ObservableList\u003cTask\u003e deadlineList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDeadlineListView.setItems(deadlineList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderDeadlineListView.setCellFactory(listView -\u003e new DeadlineListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class DeadlineListViewCell extends ListCell\u003cTask\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(Task deadline, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (CalenderDate calenderDate : CalenderPanel.getCalenderDatesArrayList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                calenderDate.setCircleNotVisible();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (CalenderDate calenderDate : CalenderPanel.getCalenderDatesArrayList()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                if (Task.isTaskPresent(calenderDate.getDate())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    boolean flag \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    for (Task tasks : Task.getDeadlineTaskHashMap().get(calenderDate.getDate())) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        if (!tasks.getStatus()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            flag \u003d false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    if (flag \u003d\u003d false) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        calenderDate.setCircleVisible();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        ArrayList\u003cTask\u003e allTask \u003d Task.getDeadlineTaskHashMap().get(calenderDate.getDate());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        Priority highestPriority \u003d Priority.VERYLOW;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        for (Task tasks : allTask) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            if (tasks instanceof ModuleTask) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                if (((ModuleTask) tasks).getPriority().compareTo(highestPriority) \u003c 0) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                    highestPriority \u003d ((ModuleTask) tasks).getPriority();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        calenderDate.setPriorityColour(highestPriority);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(deadline, empty);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || deadline \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new CalenderDeadline(deadline, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CalenderPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * CalenderPanel that holds the month"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalenderPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static int year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static int monthNow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ArrayList\u003cCalenderDate\u003e calenderDatesArrayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"Calender.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CalenderPanel.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final String[] monthsArray \u003d {\"January\", \"February\", \"March\", \"April\", \"May\", \"June\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HashMap\u003cString, Integer\u003e datesArray \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String todayMonth;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String todayYear;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Text month;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Text todayDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private GridPane calenderGrid;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label mon1;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public CalenderPanel() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.setMonth();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.setDatesArray();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.setDates();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderGrid.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setMonth() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy/MM/dd\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        LocalDateTime now \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String[] currentDateArray \u003d dtf.format(now).split(\"/\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentMonth \u003d currentDateArray[1];"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentYear \u003d currentDateArray[0];"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String date \u003d currentDateArray[2];"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        todayMonth \u003d currentMonth;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        todayYear \u003d currentYear;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        int currentMonthInt \u003d Integer.parseInt(currentMonth);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        monthNow \u003d currentMonthInt;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        year \u003d Integer.parseInt(todayYear);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String currentMonthAndYear \u003d monthsArray[currentMonthInt - 1] + \" \" + currentYear;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        month.setText(currentMonthAndYear);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        todayDate.setText(\"Today: \" + date + \" \" + currentMonthAndYear);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void setDates() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String firstDay \u003d getCalenderDates();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int firstDayInt \u003d datesArray.get(firstDay);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            String dateSkeleton \u003d makeDate();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (int i \u003d 1; i \u003c 32; i++) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String temp \u003d \"\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                if (i \u003c 10) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    temp \u003d \"0\" + i;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    temp \u003d \"\" + i;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                calenderDatesArrayList.add(new CalenderDate(temp + dateSkeleton, i));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            int x \u003d 0;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (int col \u003d firstDayInt; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                System.out.println(col);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                calenderGrid.add(calenderDatesArrayList.get(x).getRoot(), col, 1, 1, 1);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                x++;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            for (int row \u003d 2; row \u003c 7; row++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                for (int col \u003d 0; col \u003c 7; col++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    if (x \u003e\u003d 31) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    calenderGrid.add(calenderDatesArrayList.get(x).getRoot(), col, row, 1, 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                    x++;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            logger.info(ex.getMessage());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Create the date format."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return a new date format"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String makeDate() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String dateSkeleton \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (monthNow \u003c 10) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            dateSkeleton \u003d \"-\" + 0 + monthNow + \"-\" + year;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            dateSkeleton \u003d \"-\" + monthNow + \"-\" + year;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return dateSkeleton;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String getCalenderDates() throws ParseException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String inputDate \u003d String.format(\"01/%s/%s\", todayMonth, todayYear);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        SimpleDateFormat format1 \u003d new SimpleDateFormat(\"dd/MM/yyyy\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Date dt1 \u003d format1.parse(inputDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DateFormat format2 \u003d new SimpleDateFormat(\"EEEE\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "mpang45456"
        },
        "content": "        return format2.format(dt1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static ArrayList\u003cCalenderDate\u003e getCalenderDatesArrayList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return calenderDatesArrayList;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static int getYear() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static int getCurrentMonth() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return monthNow;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private void setDatesArray() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Monday\", 0);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Tuesday\", 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Wednesday\", 2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Thursday\", 3);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Friday\", 4);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Saturday\", 5);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        datesArray.put(\"Sunday\", 6);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "mpang45456": 1,
      "zhouxinwei97": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DiaryEntriesCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryEntriesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"DiaryListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final DiaryEntry diaryEntry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label text;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntriesCard(DiaryEntry diaryEntry, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryEntry \u003d diaryEntry;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        text.setText(diaryEntry.getDate().toString());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DiaryEntryMainPage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryEntryMainPage extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"DiaryEntryMainPage.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final DiaryEntry diaryEntry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label weather;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label mood;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private TextArea text;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryEntryMainPage(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.diaryEntry \u003d diaryEntry;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        date.setText(diaryEntry.getDate().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        weather.setText(diaryEntry.getWeather().get().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        mood.setText(diaryEntry.getMood().get().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        text.setText(diaryEntry.getEntryContent());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        text.setWrapText(true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        text.setStyle(\"-fx-text-inner-color: white;\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof DiaryEntryMainPage)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 65
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/DiaryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of Notes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"DiaryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(DiaryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cDiaryEntry\u003e diaryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public DiaryListPanel(ObservableList\u003cDiaryEntry\u003e diaryList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListView.setItems(diaryList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListView.setCellFactory(listView -\u003e new DiaryListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Notes} using a {@code NotesCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class DiaryListViewCell extends ListCell\u003cDiaryEntry\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(DiaryEntry diaryEntries, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(diaryEntries, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || diaryEntries.toString() \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new DiaryEntriesCard(diaryEntries, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"https://ay1920s2-cs2103t-w16-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 101,
      "zhouxinwei97": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Tab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private NotesListPanel notesListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private DiaryListPanel diaryListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private CalenderPanel calenderPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private CalenderListPanel calenderListPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ModulesTakenListPanel modulesTakenListPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ModulesTakenListPanel modulesTakenListPanel2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ProfileMainScreen profileMainScreen;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private DiaryEntryMainPage diaryEntryMainPage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ModulesYetTaken modulesYetTaken;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private StackPane notesListPanelPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane diaryListPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane diaryFullViewPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane modulesTaken;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane profile;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane profileMainScreenplaceholder;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane taskLists;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane calenderPanelPlaceholder;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane deadlinePanelPlaceholder;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane modulesTakenBefore;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private AnchorPane modulesYetTakenplaceholder;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane profileSplitPane;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane calenderSplitPane;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane profilePlaceholder;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane diarySplitPane;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private SplitPane modPlanSplitPane;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Tab addBookTab;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Helper method to build image to tabs"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param imgPatch image path"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static ImageView buildImage(String imgPatch) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Image i \u003d new Image(imgPatch);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ImageView imageView \u003d new ImageView();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        //You can set width and height"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        imageView.setFitHeight(16);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        imageView.setFitWidth(16);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        imageView.setImage(i);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return imageView;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        defaultSettings();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListPanel \u003d new DiaryListPanel(logic.getDiaryList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diaryListPanelPlaceholder.getChildren().add(diaryListPanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(diaryListPanelPlaceholder, diaryListPanelPlaceholder.getChildren().get(0));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        //diaryEntryMainPage \u003d new DiaryEntryMainPage();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        //diaryFullViewPlaceholder.getChildren().add(diaryEntryMainPage.getRoot());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        //setAnchorPaneSize(diaryFullViewPlaceholder, diaryFullViewPlaceholder.getChildren().get(0));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListPanel \u003d new NotesListPanel(logic.getFilesInFolderList());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListPanelPlaceholder.getChildren().add(notesListPanel.getRoot());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderPanel \u003d new CalenderPanel();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderPanelPlaceholder.getChildren().add(calenderPanel.getRoot());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(calenderPanelPlaceholder, calenderPanelPlaceholder.getChildren().get(0));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderListPanel \u003d new CalenderListPanel(logic.getDeadlineTaskList());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        deadlinePanelPlaceholder.getChildren().add(calenderListPanel.getRoot());"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(deadlinePanelPlaceholder, deadlinePanelPlaceholder.getChildren().get(0));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profileMainScreen \u003d new ProfileMainScreen(logic.getProfile());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profileMainScreenplaceholder.getChildren().add(profileMainScreen.getRoot());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(profile, profile.getChildren().get(0));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTakenListPanel \u003d new ModulesTakenListPanel(logic.getModulesListTaken());"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTakenListPanel2 \u003d new ModulesTakenListPanel(logic.getModulesListTaken());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTakenBefore.getChildren().add(modulesTakenListPanel.getRoot());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTaken.getChildren().add(modulesTakenListPanel2.getRoot());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(modulesTaken, modulesTaken.getChildren().get(0));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        setAnchorPaneSize(modulesTakenBefore, modulesTakenBefore.getChildren().get(0));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Default Settings."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void defaultSettings() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profileSplitPane.setDividerPositions(0.25f, 0.75f);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profileSplitPane.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderSplitPane.setDividerPositions(0.25f, 0.75f);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        calenderSplitPane.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profilePlaceholder.setDividerPositions(0.75f, 0.25f);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        profilePlaceholder.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diarySplitPane.setDividerPositions(0.25f, 0.75f);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        diarySplitPane.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modPlanSplitPane.setDividerPositions(0.50f, 0.50f);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modPlanSplitPane.lookupAll(\".split-pane-divider\").stream()"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .forEach(div -\u003e div.setMouseTransparent(true));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    void setAnchorPaneSize(AnchorPane anchorPane, Node node) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setTopAnchor(node, 0.0);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setRightAnchor(node, 0.0);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setLeftAnchor(node, 0.0);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AnchorPane.setBottomAnchor(node, 0.0);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (commandResult.isSwitchTab()) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                showSelectedTab(commandText);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Shows the selected tab based on the command text."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @param commandText the selected tab to be shown"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private void showSelectedTab(String commandText) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // diary \u003d 0, modplan \u003d 1, addbook \u003d 2, calender \u003d 3, notes \u003d 4, profile \u003d 5"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String tabName \u003d commandText.split(\" \")[0];"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (tabName.equals(\"notes\")) {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            tabPane.getSelectionModel().select(4);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (tabName.equals(\"calender\")) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            tabPane.getSelectionModel().select(0);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (tabName.equals(\"addressbook\")) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            tabPane.getSelectionModel().select(3);"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (tabName.equals(\"diary\")) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            tabPane.getSelectionModel().select(1);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (tabName.equals(\"profile\")) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            tabPane.getSelectionModel().select(5);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else if (tabName.equals(\"modplan\")) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            tabPane.getSelectionModel().select(2);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 195,
      "zhouxinwei97": 194
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModuleCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"ModuleTaken.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final NusModule module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label moduleName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private GridPane grid;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModuleCard(NusModule module) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        moduleName.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!module.getGrade().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            grade.setText(module.getGrade().get().getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            grade.setText(\"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModulesTakenListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModulesTakenListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"ModulesTakenListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModulesTakenListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cNusModule\u003e modulesTaken;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModulesTakenListPanel(ObservableList\u003cNusModule\u003e moduleList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTaken.setItems(moduleList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        modulesTaken.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cNusModule\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(NusModule module, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic((new ModuleCard(module)).getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ModulesYetTaken.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModulesYetTaken extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"ModulesYetTaken.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final Profile student;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label modulesEligible;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label modulesUneligible;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ModulesYetTaken(String asd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.student \u003d new Profile(new ModuleBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof ModulesYetTaken)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"NotesListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public final Notes note;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label directory;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesCard(Notes note, int displayedIndex) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        directory.setText(note.getPath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof NotesCard)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotesListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * Panel containing the list of Notes."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"NotesListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(NotesListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private ListView\u003cNotes\u003e notesListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label currentDirectory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private StackPane placeholder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public NotesListPanel(ObservableList\u003cNotes\u003e notesList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListView.setItems(notesList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        notesListView.setCellFactory(listView -\u003e new NotesListViewCell());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        currentDirectory.setText(\"Current Directory: \" + Notes.getCurrentDirectory());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Notes} using a {@code NotesCard}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    class NotesListViewCell extends ListCell\u003cNotes\u003e {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        protected void updateItem(Notes note, boolean empty) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super.updateItem(note, empty);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            currentDirectory.setText(\"Current Directory: \" + Notes.getCurrentDirectory());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            if (empty || note.getPath() \u003d\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                setGraphic(new NotesCard(note, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProfileMainScreen.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ProfileMainScreen extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String FXML \u003d \"ProfileMainScreen.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private StackPane profileMainScreenPanel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label major;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Label currentCap;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public ProfileMainScreen(Profile student) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        currentCap.setText(student.getCap().get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        if (!(other instanceof ProfileMainScreen)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 57
    }
  },
  {
    "path": "src/main/resources/view/Calender.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" \u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"54.0\" prefWidth\u003d\"456.0\" \u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cText fx:id\u003d\"month\" fill\u003d\"#b27878\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Month\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"455.5126953125\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"70.0\" prefWidth\u003d\"456.0\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cText fx:id\u003d\"todayDate\" fill\u003d\"#b27878\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"todayDate\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"455.5126953125\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cfont\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/font\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/Text\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane fx:id\u003d\"placeHolder\" prefHeight\u003d\"273.0\" prefWidth\u003d\"409.0\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cGridPane fx:id\u003d\"calenderGrid\" gridLinesVisible\u003d\"true\" prefHeight\u003d\"343.0\" prefWidth\u003d\"409.0\" stylesheets\u003d\"@DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Mon\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Mon\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Tue\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Tue\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"1\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Wed\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Wed\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"2\"\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Thurs\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Thurs\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"3\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Fri\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Fri\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"4\"\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Sat\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Sat\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cText fx:id\u003d\"Sun\" fill\u003d\"#a15454\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"Sun\" textAlignment\u003d\"CENTER\" wrappingWidth\u003d\"56.22900390625\" GridPane.columnIndex\u003d\"6\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Text\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 98
    }
  },
  {
    "path": "src/main/resources/view/CalenderDate.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"35.0\" prefWidth\u003d\"31.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cLabel fx:id\u003d\"calenderDate\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" prefHeight\u003d\"16.0\" prefWidth\u003d\"28.0\" text\u003d\"Date\" translateX\u003d\"50.0\" translateY\u003d\"-10.0\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cCircle fx:id\u003d\"circle\" fill\u003d\"#ff1f6b\" radius\u003d\"5.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" translateX\u003d\"10.0\" translateY\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 12
    }
  },
  {
    "path": "src/main/resources/view/CalenderDeadline.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.shape.Circle?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                           \u003cminWidth\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                              \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                           \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/Label\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cCircle fx:id\u003d\"circle\" fill\u003d\"DODGERBLUE\" radius\u003d\"5.0\" stroke\u003d\"BLACK\" strokeType\u003d\"INSIDE\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/children\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/HBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cFlowPane fx:id\u003d\"modCode\" maxWidth\u003d\"30.0\" prefHeight\u003d\"0.0\" prefWidth\u003d\"30.0\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 48
    }
  },
  {
    "path": "src/main/resources/view/CalenderListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cListView fx:id\u003d\"calenderDeadlineListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/resources/view/DiaryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"text\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 31
    }
  },
  {
    "path": "src/main/resources/view/DiaryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cListView fx:id\u003d\"diaryListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"NUSProductivity\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"259.0\" prefWidth\u003d\"395.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cTabPane fx:id\u003d\"tabPane\" prefHeight\u003d\"600.0\" prefWidth\u003d\"200.0\" stylesheets\u003d\"@DarkTheme.css\" tabClosingPolicy\u003d\"UNAVAILABLE\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003ctabs\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"calenderTab\" text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"calenderSplitPane\" dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"deadlinePanelPlaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"167.0\" prefWidth\u003d\"79.0\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"calenderPanelPlaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"167.0\" prefWidth\u003d\"288.0\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cTab id\u003d\"diaryTab\" fx:id\u003d\"diaryTab\" text\u003d\"Diary\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"diarySplitPane\" dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"diaryListPanelPlaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"diaryFullViewPlaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cTab fx:id\u003d\"modPlanTab\" text\u003d\"Mod plan\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"modPlanSplitPane\" dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"modulesTakenBefore\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"167.0\" prefWidth\u003d\"132.0\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"modulesYetTakenplaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"addBookTab\" text\u003d\"Add Book\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Tab\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"notesTab\" text\u003d\"Notes\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"notesListPanelPlaceholder\" prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cTab fx:id\u003d\"profileTab\" text\u003d\"Profile\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003ccontent\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cSplitPane fx:id\u003d\"profileSplitPane\" dividerPositions\u003d\"0.29797979797979796\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003citems\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"modulesTaken\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                            \u003cAnchorPane fx:id\u003d\"profile\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                 \u003cchildren\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                    \u003cSplitPane fx:id\u003d\"profilePlaceholder\" dividerPositions\u003d\"0.6212121212121212\" layoutX\u003d\"-3.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"166.0\" prefWidth\u003d\"277.0\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                      \u003citems\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                        \u003cAnchorPane fx:id\u003d\"profileMainScreenplaceholder\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                        \u003cAnchorPane fx:id\u003d\"taskLists\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                      \u003c/items\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                    \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                 \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                          \u003c/items\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/content\u003e\u003c/Tab\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003c/tabs\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cpadding\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/padding\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" maxHeight\u003d\"10\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "zhouxinwei97": 68
    }
  },
  {
    "path": "src/main/resources/view/ModuleTaken.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" prefHeight\u003d\"66.0\" prefWidth\u003d\"224.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cGridPane fx:id\u003d\"grid\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"66.0\" prefWidth\u003d\"154.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"moduleName\" prefHeight\u003d\"26.0\" prefWidth\u003d\"114.0\" style\u003d\"-fx-font-size: 25; -fx-font-family: Noteworthy;\" styleClass\u003d\"cell_small_label\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"moduleName\" translateX\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003cfont\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"21.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                     \u003c/font\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cLabel fx:id\u003d\"grade\" style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 25; -fx-text-fill: #679b9b679b9b;\" stylesheets\u003d\"@DarkTheme.css\" text\u003d\"grade\" translateX\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 33
    }
  },
  {
    "path": "src/main/resources/view/ModulesTakenListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cListView fx:id\u003d\"modulesTaken\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 10
    }
  },
  {
    "path": "src/main/resources/view/ModulesYetTaken.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.5\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cLabel fx:id\u003d\"modulesEligible\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cLabel fx:id\u003d\"modulesUneligible\" prefHeight\u003d\"17.0\" prefWidth\u003d\"295.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 18
    }
  },
  {
    "path": "src/main/resources/view/NotesListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        \u003cLabel fx:id\u003d\"directory\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 32
    }
  },
  {
    "path": "src/main/resources/view/NotesListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.text.Font?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cStackPane fx:id\u003d\"placeholder\" prefHeight\u003d\"110.0\" prefWidth\u003d\"1031.0\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cLabel fx:id\u003d\"currentDirectory\" style\u003d\"-fx-font-family: Noteworthy; -fx-text-fill: #cd7474; -fx-font-size: 28;\" text\u003d\"Label\" textFill\u003d\"#cd7474\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cfont\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cFont name\u003d\"Noteworthy Light\" size\u003d\"28.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/font\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/Label\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/children\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003cListView fx:id\u003d\"notesListView\" prefHeight\u003d\"400.0\" prefWidth\u003d\"795.0\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/main/resources/view/Profile.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cSplitPane dividerPositions\u003d\"0.3093645484949833\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cVBox prefHeight\u003d\"398.0\" prefWidth\u003d\"181.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cSplitPane dividerPositions\u003d\"0.6565656565656566\" layoutX\u003d\"1.0\" layoutY\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"398.0\" prefWidth\u003d\"409.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"241.0\" prefWidth\u003d\"383.0\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 23
    }
  },
  {
    "path": "src/main/resources/view/ProfileMainScreen.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.image.ImageView?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cStackPane fx:id\u003d\"profileMainScreenPanel\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"474.0\" prefWidth\u003d\"673.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cImageView fitHeight\u003d\"200.0\" fitWidth\u003d\"200.0\" translateY\u003d\"-130.0\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cimage\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cImage url\u003d\"@../images/iconfinder_photo_370076.png\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/image\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/ImageView\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cHBox prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\" translateY\u003d\"30.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cVBox prefHeight\u003d\"279.0\" prefWidth\u003d\"167.0\" translateY\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel prefHeight\u003d\"47.0\" prefWidth\u003d\"168.0\" style\u003d\"-fx-font-family: noteworthy; -fx-font-size: 28; -fx-text-fill: white;\" text\u003d\"Current Cap\" translateY\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cVBox prefHeight\u003d\"474.0\" prefWidth\u003d\"441.0\" translateY\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"currentCap\" prefHeight\u003d\"47.0\" prefWidth\u003d\"526.0\" style\u003d\"-fx-font-family: noteworthy; -fx-font-size: 28; -fx-text-fill: white;\" translateY\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 32
    }
  },
  {
    "path": "src/main/resources/view/ProfilePanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cSplitPane fx:id\u003d\"placeholder\" dividerPositions\u003d\"0.29797979797979796\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003citems\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"modulesTaken\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    \u003cAnchorPane fx:id\u003d\"profile\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cSplitPane fx:id\u003d\"placeholder\" dividerPositions\u003d\"0.7286432160804021\" layoutX\u003d\"1.0\" orientation\u003d\"VERTICAL\" prefHeight\u003d\"400.0\" prefWidth\u003d\"416.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"mainProfile\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                \u003cAnchorPane fx:id\u003d\"taskLists\" minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"100.0\" prefWidth\u003d\"160.0\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "              \u003c/items\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "  \u003c/items\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/SplitPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 19
    }
  },
  {
    "path": "src/main/resources/view/diaryEntryMainPage.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003cStackPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cStackPane prefHeight\u003d\"150.0\" prefWidth\u003d\"200.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003cVBox prefHeight\u003d\"200.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cHBox fx:id\u003d\"cardPane\" prefHeight\u003d\"100.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 28; -fx-text-fill: white;\" text\u003d\"Date:\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"date\" style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 20; -fx-text-fill: white;\" text\u003d\"date\" translateX\u003d\"20.0\" translateY\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 28; -fx-text-fill: white;\" text\u003d\"Weather: \" translateX\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"weather\" style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 20; -fx-text-fill: white;\" text\u003d\"weather\" translateX\u003d\"120.0\" translateY\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 28; -fx-text-fill: white;\" text\u003d\"Mood: \" translateX\u003d\"150.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                  \u003cLabel fx:id\u003d\"mood\" style\u003d\"-fx-font-family: Noteworthy; -fx-font-size: 20; -fx-text-fill: white;\" text\u003d\"mood\" translateX\u003d\"170.0\" translateY\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \u003cTextArea fx:id\u003d\"text\" editable\u003d\"false\" prefHeight\u003d\"291.0\" prefWidth\u003d\"558.0\" style\u003d\"-fx-background-color: #323232; -fx-border-color: #323232 #323232;\" stylesheets\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.storage.JsonCalendarStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.storage.JsonModuleBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                        temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonModuleBookStorage jsonModuleBookStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonModuleBookStorage(temporaryFolder.resolve(\"modulebook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonCalendarStorage jsonCalendarStorage \u003d new JsonCalendarStorage(temporaryFolder.resolve(\"calendar.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                jsonModuleBookStorage, jsonCalendarStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonModuleBookStorage moduleBookStorage \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonModuleBookStorage(temporaryFolder.resolve(\"ioExceptionModuleBook.json\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonCalendarStorage calendarStorage \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonCalendarStorage(temporaryFolder.resolve(\"ioExceptionCalendar.json\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                moduleBookStorage, calendarStorage);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                model.getModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            super(filePath, filePath);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 16,
      "-": 154,
      "zhouxinwei97": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 7,
      "-": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isValidEntryId(int entryId) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void deleteDiaryEntry(int entryId) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void tagWeather(int entryId, Weather weather) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void tagMood(int entryId, Mood mood) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public DiaryEntry getDiaryEntryById(int entryId) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cInteger\u003e getListOfIdsByDate(LocalDate date) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isExistingDate(LocalDate date) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isEmptyDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String showDiaryLog() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void doneModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String getModuleTaskInfo(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String getTaskBreakdown() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cModuleTask\u003e getModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cTask\u003e findTasksByDate(String date) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cTask\u003e findTasksByCat(String cat) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void gradeModule(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addModuleTask(ModuleTask moduleTask) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public int getSizeOfModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deleteModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateMajor(Major major) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableValue\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Profile getProfile() {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void sortTaskList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Task deleteTask(Task task) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Task doneDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void sortTask(String param) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyDeadline(Task deadline) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "xuanxinng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addToDo(Task todo) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyToDo(Task todo) {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 114,
      "xuanxinng": 16,
      "-": 194,
      "zhouxinwei97": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CalendarCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CalenderCommand.SWITCHED_MESSAGE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class CalendarCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(new CalenderCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 9,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, false)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, false).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 49,
      "zhouxinwei97": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_FILE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_PATH_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NOTES_TYPE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_PATH \u003d \"Desktop\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_FILE_PATH \u003d \"abs\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_FILE_TYPE \u003d \"file\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_FILE_NAME \u003d \"test.doc\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_PATH_WITH_PREFIX \u003d \" \" + PREFIX_NOTES_PATH + VALID_PATH;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_FILE_PATH_WITH_PREFIX \u003d \" \" + PREFIX_NOTES_PATH_TYPE + VALID_FILE_PATH;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_FILE_TYPE_WITH_PREFIX \u003d \" \" + PREFIX_NOTES_TYPE + VALID_FILE_TYPE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final String VALID_FILE_NAME_WITH_PREFIX \u003d \" \" + PREFIX_NOTES_FILE_NAME + VALID_FILE_NAME;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Check success of command execution based on model only."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, Model expectedModel) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            command.execute(actualModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 14,
      "-": 120,
      "zhouxinwei97": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 11,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DiaryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.DiaryCommand.SWITCHED_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DiaryCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(new DiaryCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 15,
      "-": 168
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 8,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 9,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ModplanCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.ModPlanCommand.SWITCHED_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ModplanCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(new ModPlanCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/NotesCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.NotesCommand.SWITCHED_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(new NotesCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ProfileCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.ProfileCommand.SWITCHED_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class ProfileCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_switch_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SWITCHED_MESSAGE, false, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(new ProfileCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/modulecommand/AddModuleCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class AddModuleCommandIntegrationTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule moduleInList \u003d model.getModuleBook().getModulesTakenList().get(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertCommandFailure(new AddModuleCommand(moduleInList), model, AddModuleCommand.MESSAGE_DUPLICATE_NUS_MODULE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/modulecommand/AddModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void constructor_nullNusModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleCommand(null));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_nusModuleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModelStubAcceptingNusModuleAdded modelStub \u003d new ModelStubAcceptingNusModuleAdded();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule validModule \u003d TypicalNusModules.CS2030;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(AddModuleCommand.MESSAGE_SUCCESS + validModule, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_duplicateNusModule_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule validModule \u003d TypicalNusModules.CS2030;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        AddModuleCommand addModuleCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithNusModule(validModule);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, AddModuleCommand.MESSAGE_DUPLICATE_NUS_MODULE, ("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e addModuleCommand.execute(modelStub));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module1 \u003d TypicalNusModules.CS2030;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module2 \u003d TypicalNusModules.CS2103;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        AddModuleCommand addModuleCommand1 \u003d new AddModuleCommand(module1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        AddModuleCommand addModuleCommand2 \u003d new AddModuleCommand(module2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(addModuleCommand1.equals(addModuleCommand1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        AddModuleCommand addModuleCommand1Copy \u003d new AddModuleCommand(module1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(addModuleCommand1.equals(addModuleCommand1Copy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(addModuleCommand1.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(addModuleCommand1.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(addModuleCommand1.equals(addModuleCommand2));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isValidEntryId(int entryId) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deleteDiaryEntry(int entryId) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void tagWeather(int entryId, Weather weather) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void tagMood(int entryId, Mood mood) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public DiaryEntry getDiaryEntryById(int entryId) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public List\u003cInteger\u003e getListOfIdsByDate(LocalDate date) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isExistingDate(LocalDate date) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isEmptyDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String showDiaryLog() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void doneModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String getModuleTaskInfo(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String getTaskBreakdown() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public List\u003cModuleTask\u003e getModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public List\u003cTask\u003e findTasksByDate(String date) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public List\u003cTask\u003e findTasksByCat(String cat) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void gradeModule(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addModuleTask(ModuleTask moduleTask) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public int getSizeOfModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void deleteModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateMajor(Major major) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableValue\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Profile getProfile() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void sortTaskList() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Task deleteTask(Task task) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public Task doneDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void sortTask(String param) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isEmptyDeadline(Task deadline) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addToDo(Task todo) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean isEmptyToDo(Task todo) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private class ModelStubWithNusModule extends ModelStub {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        private final NusModule module;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModelStubWithNusModule(NusModule module) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return this.module.getModuleCode().equals(moduleCode);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private class ModelStubAcceptingNusModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final ArrayList\u003cNusModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return modulesAdded.stream().map(NusModule::getModuleCode).anyMatch(moduleCode::equals);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public ModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            return new ModuleBook();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 442
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/modulecommand/CapCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class CapCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_noGradeStatedForSomeModule_successful() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        CommandResult commandResult \u003d new CapCommand().execute(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(CapCommand.MESSAGE_SUCCESS + \"\\nCurrent CAP: \" + \"0.0\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/modulecommand/DeleteModuleCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * Contains unit tests for {@code DeleteModuleCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_invalidModule_throwsCommandException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2040\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, Messages.MESSAGE_NO_SUCH_MODULE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_validModule_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule validModule \u003d TypicalNusModules.CS2030;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        CommandResult commandResult \u003d new DeleteModuleCommand(validModule.getModuleCode()).execute(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(DeleteModuleCommand.MESSAGE_SUCCESS + validModule.getModuleCode(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module1 \u003d TypicalNusModules.CS2030;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module2 \u003d TypicalNusModules.CS2103;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand1 \u003d new DeleteModuleCommand(module1.getModuleCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand2 \u003d new DeleteModuleCommand(module2.getModuleCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(deleteModuleCommand1.equals(deleteModuleCommand1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand1Copy \u003d new DeleteModuleCommand(module1.getModuleCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(deleteModuleCommand1.equals(deleteModuleCommand1Copy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(deleteModuleCommand1.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(deleteModuleCommand1.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(deleteModuleCommand1.equals(deleteModuleCommand2));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/modulecommand/GradeCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.modulecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class GradeCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_updateGradeForModuleWithGrade_successful() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode validModuleCode \u003d TypicalNusModules.ST3131.getModuleCode();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(validModuleCode, Grade.S);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d GradeCommand.MESSAGE_SUCCESS + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + validModuleCode + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + Grade.S.getText();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(model.getModuleBook()), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        expectedModel.gradeModule(validModuleCode, Grade.S);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertCommandSuccess(gradeCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_invalidModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        GradeCommand gradeCommand \u003d new GradeCommand(new ModuleCode(\"CS2040\"), Grade.A);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_NO_SUCH_MODULE, ("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e gradeCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/addcommand/AddDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands.taskcommand.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.beans.value.ObservableValue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.mood.Mood;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.weather.Weather;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.studentprofile.Profile;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor_nullAddDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddDeadlineCommand(null));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_nusModuleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ModelStubAcceptingTasksAdded modelStub \u003d new ModelStubAcceptingTasksAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task validTask \u003d TypicalTasks.DEADLINE_A_DATE_A;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        CommandResult commandResult \u003d new AddDeadlineCommand(validTask).execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(AddDeadlineCommand.MESSAGE_SUCCESS + validTask, commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(Arrays.asList(validTask), modelStub.taskAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task task1 \u003d TypicalTasks.DEADLINE_A_DATE_A;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task task2 \u003d TypicalTasks.DEADLINE_B_DATE_A;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AddDeadlineCommand addDeadlineCommand1 \u003d new AddDeadlineCommand(task1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AddDeadlineCommand addDeadlineCommand2 \u003d new AddDeadlineCommand(task2);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(addDeadlineCommand1.equals(addDeadlineCommand1));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        AddDeadlineCommand addDeadlineCommand1Copy \u003d new AddDeadlineCommand(task1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(addDeadlineCommand1.equals(addDeadlineCommand1Copy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(addDeadlineCommand1.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(addDeadlineCommand1.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(addDeadlineCommand1.equals(addDeadlineCommand2));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Path getDiaryBookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cDiaryEntry\u003e getDiaryList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isValidEntryId(int entryId) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void deleteDiaryEntry(int entryId) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void tagWeather(int entryId, Weather weather) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void tagMood(int entryId, Mood mood) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public DiaryEntry getDiaryEntryById(int entryId) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cInteger\u003e getListOfIdsByDate(LocalDate date) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isExistingDate(LocalDate date) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cNotes\u003e getFilesInFolderList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyDiaryEntry(DiaryEntry diaryEntry) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public String showDiaryLog() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateNotesList(Predicate\u003cNotes\u003e predicate) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addModule(NusModule module) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void deleteModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void doneModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String getModuleTaskInfo(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        public String getTaskBreakdown() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cModuleTask\u003e getModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cTask\u003e findTasksByDate(String date) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public List\u003cTask\u003e findTasksByCat(String cat) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void gradeModule(ModuleCode moduleCode, Grade grade) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addModuleTask(ModuleTask moduleTask) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ModuleBook getModuleBook() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public int getSizeOfModuleTaskList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void deleteModuleTask(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateMajor(Major major) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableValue\u003cString\u003e getMajor() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Profile getProfile() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public double getCap() {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cNusModule\u003e getModulesListTaken() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateModulesListTaken(Predicate\u003cNusModule\u003e predicate) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Path getModuleBookFilePath() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void sortTaskList() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Task deleteTask(Task task) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public Task doneDeadlineTask(Task deadline) {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void sortTask(String param) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyDeadline(Task deadline) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cTask\u003e getDeadlineTaskList() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addToDo(Task todo) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyToDo(Task todo) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private class ModelStubAcceptingTasksAdded extends ModelStub {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        final ArrayList\u003cTask\u003e taskAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void addDeadlineTask(Task task) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            taskAdded.add(task);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public boolean isEmptyDeadline(Task task) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            requireNonNull(task);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void sortTaskList() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public void updateDeadlineTaskList(Predicate\u003cTask\u003e predicate) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 10,
      "zhouxinwei97": 410
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/addcommand/ModuleTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.addcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class ModuleTaskCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static ModuleTask taskValid \u003d TypicalNusModules.TYPICAL_MODULE_TASK_1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static ModuleTask taskInvalid \u003d TypicalNusModules.TYPICAL_MODULE_TASK_2;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_addInNewModuleTask_successful() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTaskCommand moduleTaskCommand \u003d new ModuleTaskCommand(taskValid);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(model.getModuleBook()), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        expectedModel.addModuleTask(taskValid);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertCommandSuccess(moduleTaskCommand, model, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_taskWithInvalidModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTaskCommand moduleTaskCommand \u003d new ModuleTaskCommand(taskInvalid);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, ModuleTaskCommand.MESSAGE_NO_SUCH_MODULE, ("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e moduleTaskCommand.execute(model));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final ModuleTaskCommand standardCommand \u003d new ModuleTaskCommand(taskValid);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTaskCommand commandWithSameValues \u003d new ModuleTaskCommand(taskValid);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different module tasks -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new ModuleTaskCommand(taskInvalid)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/deletecommand/DeleteDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands.taskcommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE_A_DATE_A;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE_B_DATE_A;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE_C_DATE_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class DeleteDeadlineCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String DATE_A \u003d \"20-04-2020\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MISC_CATEGORY \u003d \"MISC\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_deleteTask_successful() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DeleteDeadlineCommand deleteDeadlineCommand \u003d new DeleteDeadlineCommand(new Deadline(1, \"delete\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        model.addDeadlineTask(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                getTypicalModuleBook(), model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            expectedModel.addDeadlineTask(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            assertCommandSuccess(deleteDeadlineCommand, model, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (UnsupportedOperationException ex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_argumentWithInvalidIndex_showsFailCommandResult() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DeleteDeadlineCommand deleteDeadlineCommand \u003d new DeleteDeadlineCommand(new Deadline(10000, \"delete\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String expectedMessage \u003d DeleteDeadlineCommand.MESSAGE_FAIL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                getTypicalModuleBook(), model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(deleteDeadlineCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        final DeleteDeadlineCommand standardCommand \u003d new DeleteDeadlineCommand(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DeleteDeadlineCommand commandWithSameValues \u003d new DeleteDeadlineCommand("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                new Deadline(\"Test A with Date A\", DATE_A, MISC_CATEGORY, \"add\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different Date -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteDeadlineCommand(DEADLINE_C_DATE_B)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different different description -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteDeadlineCommand(DEADLINE_B_DATE_A)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/deletecommand/DeleteModuleTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.deletecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class DeleteModuleTaskCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleCode validModuleCode \u003d TypicalNusModules.CS2030.getModuleCode();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    //module code which hasn\u0027t been added to module book yet"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleCode invalidModuleCode \u003d new ModuleCode(\"CS1101S\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleCode anotherValidModuleCode \u003d TypicalNusModules.CS2103.getModuleCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_deleteModuleTask_successful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleTaskCommand deleteModuleTaskCommand \u003d new DeleteModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        model.addDeadlineTask(TypicalNusModules.TYPICAL_MODULE_TASK_1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(model.getModuleBook()), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        expectedModel.addDeadlineTask(TypicalNusModules.TYPICAL_MODULE_TASK_1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertCommandSuccess(deleteModuleTaskCommand, model, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_argumentWithInvalidModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleTaskCommand deleteModuleTaskCommand \u003d new DeleteModuleTaskCommand(invalidModuleCode,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_NO_SUCH_MODULE, ("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e deleteModuleTaskCommand.execute(model));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_argumentWithInvalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleTaskCommand deleteModuleTaskCommand \u003d new DeleteModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                Index.fromZeroBased(10000));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_MODULE_TASK_INDEX, ("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e deleteModuleTaskCommand.execute(model));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final DeleteModuleTaskCommand standardCommand \u003d new DeleteModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DeleteModuleTaskCommand commandWithSameValues \u003d new DeleteModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteModuleTaskCommand(anotherValidModuleCode,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0))));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new DeleteModuleTaskCommand(validModuleCode, Index.fromZeroBased(1))));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 96,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/donecommand/DoneDeadlineCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.commands.taskcommand.donecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTask;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.testutil.TypicalTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class DoneDeadlineCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final Task validDeadline \u003d TypicalTasks.DEADLINE_A_DATE_A;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final Task anotherValidDeadline \u003d TypicalTasks.DEADLINE_B_DATE_A;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(getTypicalTask()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_markTaskAsDone_successful() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                getTypicalModuleBook(), model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            expectedModel.doneDeadlineTask(new Deadline(1, \"done\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        } catch (UnsupportedOperationException ex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            System.out.println(ex);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(expectedModel.getDeadlineTaskList().get(0).getStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void execute_argumentWithInvalidIndex_showsFailCommandResult() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DoneDeadlineCommand doneDeadlineCommand \u003d new DoneDeadlineCommand(new Deadline(1000, \"done\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String expectedMessage \u003d DoneDeadlineCommand.MESSAGE_FAIL;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "               getTypicalModuleBook(), model.getDeadlineTaskList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertCommandSuccess(doneDeadlineCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        final DoneDeadlineCommand standardCommand \u003d new DoneDeadlineCommand(validDeadline);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        DoneDeadlineCommand commandWithSameValues \u003d new DoneDeadlineCommand(validDeadline);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // different Dates -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(standardCommand.equals(new DoneDeadlineCommand(anotherValidDeadline)));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 78
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/donecommand/DoneModuleTaskCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.donecommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.testutil.TypicalNusModules.getTypicalModuleBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class DoneModuleTaskCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleCode validModuleCode \u003d TypicalNusModules.ST3131.getModuleCode();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    //module code which hasn\u0027t been added to module book yet"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleCode invalidModuleCode \u003d new ModuleCode(\"CS1101S\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleCode anotherValidModuleCode \u003d TypicalNusModules.CS2103.getModuleCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private Model model \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            getTypicalModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_markModuleTaskAsDone_successful() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DoneModuleTaskCommand doneModuleTaskCommand \u003d new DoneModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(), new UserPrefs(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(model.getModuleBook()), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        expectedModel.doneModuleTask(validModuleCode, Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertCommandSuccess(doneModuleTaskCommand, model, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_argumentWithInvalidModuleCode_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DoneModuleTaskCommand doneModuleTaskCommand \u003d new DoneModuleTaskCommand(invalidModuleCode,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_NO_SUCH_MODULE, ("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e doneModuleTaskCommand.execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void execute_argumentWithInvalidIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DoneModuleTaskCommand doneModuleTaskCommand \u003d new DoneModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                Index.fromZeroBased(100000));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_MODULE_TASK_INDEX, ("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ) -\u003e doneModuleTaskCommand.execute(model));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final DoneModuleTaskCommand standardCommand \u003d new DoneModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        DoneModuleTaskCommand commandWithSameValues \u003d new DoneModuleTaskCommand(validModuleCode,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new DoneModuleTaskCommand(anotherValidModuleCode,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Index.fromZeroBased(0))));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new DoneModuleTaskCommand(validModuleCode, Index.fromZeroBased(1))));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 94,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/taskcommand/sortcommand/SortTasksCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.commands.taskcommand.sortcommand;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class SortTasksCommandTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        final SortTasksCommand standardCommand \u003d new SortTasksCommand(\"priority\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        SortTasksCommand commandWithSameValues \u003d new SortTasksCommand(\"priority\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different sorting param -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(standardCommand.equals(new SortTasksCommand(\"date\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY ,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 18,
      "-": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.AddModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule expectedModule \u003d new NusModule(new ModuleCode(\"CS2103\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                4, Optional.empty(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //with grade input"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103 g/A\", new AddModuleCommand(expectedModule));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //without grade input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103\", new AddModuleCommand(expectedModule));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" CS2103\", expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" g/A\", expectedMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/dasdas\", ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid grade"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/cs2030 g/dasd\", Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteModuleCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" cs2103\", new DeleteModuleCommand(new ModuleCode(\"CS2103\")));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.deletecommand.DeleteModuleTaskCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.deletecommand.DeleteTaskCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class DeleteTaskCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private DeleteTaskCommandParser parser \u003d new DeleteTaskCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(\"CS2030\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2030 index/1\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new DeleteModuleTaskCommand(expectedModuleCode, Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" CS2103\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/CS2103\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/asdasd index/1\", ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DoneCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class DoneCommandParserTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + EMAIL_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                + PHONE_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 9,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindTasksCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksByCatCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksByDateCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksByModuleCodeCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.findcommand.FindTasksCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.CatContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.DateContainKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.ModuleCodeContainKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class FindTasksCommandParserTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private FindTasksCommandParser parser \u003d new FindTasksCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(\"CS2103\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new FindTasksByModuleCodeCommand("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                        new ModuleCodeContainKeywordsPredicate(Arrays.asList(expectedModuleCode.toString()))));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedDate \u003d \"02-02-2020\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" date/02-02-2020\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new FindTasksByDateCommand("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                        new DateContainKeywordsPredicate(Arrays.asList(expectedDate))));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedCat \u003d \"school\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" cat/school\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new FindTasksByCatCommand("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                        new CatContainsKeywordsPredicate(Arrays.asList(expectedCat))));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindTasksCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" lhjjqs\", expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/casdas\", ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" date/casdass\", \"Invalid date! format:{dd-mm-yyyy}\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GradeCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.modulecommand.GradeCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class GradeCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private GradeCommandParser parser \u003d new GradeCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode expectedModuleCode \u003d new ModuleCode(\"CS2103\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" m/CS2103 g/A\", new GradeCommand(expectedModuleCode, Grade.A));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, GradeCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" CS2103 g/A\", expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/CS2103\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" g/A\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" M/CS2103 A\", expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" \", expectedMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/dasdas g/A\", ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid grade"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/cs2030 g/dasd\", Grade.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ModuleTaskCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.addcommand.ModuleTaskCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class ModuleTaskCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private ModuleTaskCommandParser parser \u003d new ModuleTaskCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTask expectedModuleTask \u003d TypicalNusModules.TYPICAL_MODULE_TASK_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" desc/assignment m/CS2030 date/02-02-2020 pri/4\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleTaskCommand(expectedModuleTask));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, ModuleTaskCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" m/CS2030 date/02-02-2020 pri/4\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment date/02-02-2020 pri/4\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment m/CS2030 pri/4\", expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment m/CS2030 date/02-02-2020\", expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment m/dasdas date/02-02-2020 pri/4\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid priority"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment m/CS2030 date/02-02-2020 pri/asdas\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid priority"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment m/CS2030 date/02-02-2020 pri/6\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid priority"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" desc/assignment m/CS2030 date/02-02-2020 pri/0\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NotesCreateCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_NAME_WITH_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_TYPE_WITH_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesCreateCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesCreateCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private NotesCreateCommandParser parser \u003d new NotesCreateCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPath \u003d \"Desktop\" + File.separator + \"test.doc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPathType \u003d \"abs\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validFileType \u003d \"file\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes testNote \u003d new Notes(validPath, validFileType, validPathType);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesCreateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_validArgs_returnsNotesOpenCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesCreateCommand expectedNotesOpenCommand \u003d new NotesCreateCommand(testNote);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_TYPE_WITH_PREFIX"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_NAME_WITH_PREFIX, expectedNotesOpenCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesCreateCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // No path type indicated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX + VALID_FILE_NAME_WITH_PREFIX + VALID_FILE_TYPE_WITH_PREFIX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file name indicated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX + VALID_FILE_PATH_WITH_PREFIX + VALID_FILE_TYPE_WITH_PREFIX,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file path indicated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_FILE_NAME_WITH_PREFIX"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_TYPE_WITH_PREFIX, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file type indicated"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_FILE_NAME_WITH_PREFIX + VALID_FILE_PATH_WITH_PREFIX + VALID_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NotesDeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_NAME_WITH_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesDeleteCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesDeleteCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private NotesDeleteCommandParser parser \u003d new NotesDeleteCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPath \u003d \"Desktop\" + File.separator + \"test.doc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPathType \u003d \"abs\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes testNote \u003d new Notes(validPath, validPathType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesDeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_validArgs_returnsNotesOpenCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        System.out.println(VALID_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_NAME_WITH_PREFIX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesDeleteCommand expectedNotesDeleteCommand \u003d new NotesDeleteCommand(testNote);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_NAME_WITH_PREFIX, expectedNotesDeleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesDeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // No path type indicated"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX + VALID_FILE_NAME_WITH_PREFIX,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file name indicated"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX + VALID_FILE_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file path indicated"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_FILE_NAME_WITH_PREFIX + VALID_FILE_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NotesListCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesListCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private NotesListCommandParser parser \u003d new NotesListCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPath \u003d \"Desktop\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPathType \u003d \"abs\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes testNote \u003d new Notes(validPath, validPathType);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesListCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_validArgs_returnsNotesListCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesListCommand expectedNotesListCommand \u003d new NotesListCommand(testNote);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_PATH_WITH_PREFIX, expectedNotesListCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesListCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // No path type indicated"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file path indicated"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_FILE_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/NotesOpenCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_NAME_WITH_PREFIX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_FILE_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PATH_WITH_PREFIX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.logic.commands.NotesOpenCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class NotesOpenCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private NotesOpenCommandParser parser \u003d new NotesOpenCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPath \u003d \"Desktop\" + File.separator + \"test.doc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private String validPathType \u003d \"abs\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private Notes testNote \u003d new Notes(validPath, validPathType);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, \"     \","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesOpenCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_validArgs_returnsNotesOpenCommand() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        NotesOpenCommand expectedNotesOpenCommand \u003d new NotesOpenCommand(testNote);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + VALID_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_PATH_WITH_PREFIX"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                + VALID_FILE_NAME_WITH_PREFIX, expectedNotesOpenCommand);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, NotesOpenCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // No path type indicated"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX + VALID_FILE_NAME_WITH_PREFIX,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file name indicated"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_PATH_WITH_PREFIX + VALID_FILE_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no file path indicated"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertParseFailure(parser, VALID_FILE_NAME_WITH_PREFIX + VALID_FILE_PATH_WITH_PREFIX,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.notes.Notes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String INVALID_PATH_TYPE \u003d \"asdasdqw\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String INVALID_FILE_TYPE \u003d \"Not a file\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_PATH_TYPE \u003d \"abs\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_PATH \u003d \"/Desktop/\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_FILE_TYPE \u003d \"file\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Notes \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesListOperation_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes expectedNotes \u003d new Notes(VALID_PATH, VALID_PATH_TYPE);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(expectedNotes, ParserUtil.parseNotesListOperation(VALID_PATH, VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesCreateOperation_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes expectedNotes \u003d new Notes(VALID_PATH, VALID_FILE_TYPE, VALID_PATH_TYPE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(expectedNotes, ParserUtil.parseNotesCreateOperation(VALID_PATH, VALID_FILE_TYPE, VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesOpenOperation_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes expectedNotes \u003d new Notes(VALID_PATH, VALID_PATH_TYPE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(expectedNotes, ParserUtil.parseNotesOpenOperation(VALID_PATH, VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesDeleteOperation_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Notes expectedNotes \u003d new Notes(VALID_PATH, VALID_PATH_TYPE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(expectedNotes, ParserUtil.parseNotesDeleteOperation(VALID_PATH, VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesListOperation_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNotesListOperation(VALID_PATH, INVALID_PATH_TYPE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesCreateOperation_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ParserUtil.parseNotesCreateOperation(VALID_PATH, INVALID_FILE_TYPE, INVALID_PATH_TYPE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesOpenOperation_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNotesOpenOperation(VALID_PATH, INVALID_PATH_TYPE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesDeleteOperation_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNotesDeleteOperation(VALID_PATH, INVALID_PATH_TYPE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesList_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ParserUtil.parseNotesListOperation((String) null, VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void parseNotesCreate_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ParserUtil.parseNotesCreateOperation(VALID_PATH, (String) null, VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Address Book  \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, () -\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 168,
      "zhouxinwei97": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SortTasksCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_SORTING_PARAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.logic.commands.taskcommand.sortcommand.SortTasksCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class SortTasksCommandParserTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private SortTasksCommandParser parser \u003d new SortTasksCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedSortingParam1 \u003d \"priority\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" by/priority\", new SortTasksCommand(expectedSortingParam1));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedSortingParam2 \u003d \"date\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseSuccess(parser, \" by/date\", new SortTasksCommand(expectedSortingParam2));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortTasksCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" lhjjqs\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //invalid sorting parameter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" by/dadsa\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                MESSAGE_INVALID_SORTING_PARAM + \" \" + SortTasksCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        //empty sorting parameter"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertParseFailure(parser, \" by/\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                MESSAGE_INVALID_SORTING_PARAM + \" \" + SortTasksCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.diary.DiaryEntry;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        private final ObservableList\u003cDiaryEntry\u003e diary \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        private final ObservableList\u003cTask\u003e tasks \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        public ObservableList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            return tasks;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 99,
      "zhouxinwei97": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()))));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()))));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new ModuleBook(), FXCollections.observableList(new ArrayList\u003cTask\u003e()))));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 13,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModuleBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class ModuleBookTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    final NusModule cs2030 \u003d TypicalNusModules.CS2030;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    final ModuleTask task \u003d TypicalNusModules.TYPICAL_MODULE_TASK_1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void addModule_hasModule_deleteModule() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(cs2030);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(moduleBook.hasModule(cs2030.getModuleCode()));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(moduleBook.hasModule(new ModuleCode(\"cs2040\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.deleteModule(cs2030.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(moduleBook.hasModule(cs2030.getModuleCode()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getModule() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(cs2030);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(moduleBook.getModule(cs2030.getModuleCode()), cs2030);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void gradeModule() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(cs2030);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.gradeModule(cs2030.getModuleCode(), Grade.S);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(cs2030.getGrade().get(), Grade.S);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void addModuleTask_doneModuleTask() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(cs2030);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModuleTask(task);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.doneModuleTask(cs2030.getModuleCode(), Index.fromZeroBased(0));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertDoesNotThrow(() -\u003e {});"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getSizeOfModuleTaskList() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook moduleBook \u003d new ModuleBook();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModule(cs2030);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        moduleBook.addModuleTask(task);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertNotEquals(moduleBook.getSizeOfModuleTaskList(cs2030.getModuleCode()), 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calender/DeadlineTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class DeadlineTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_DATE \u003d \"22-04-2020\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"2020-04-20\")); //YYYY-MM-DD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"2020-20-04\")); //YYYY-DD-MM"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"04-20-2020\")); //MM-DD-YYYY"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Deadline.isValidDate(\"not a date\")); // not a date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(Deadline.isValidDate(VALID_DATE)); // Correct date format DD-MM-YYYY"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(1, null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor2_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Deadline(\"test\", \"asd\", \"cat\", null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/calender/TaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.calender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class TaskTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_DATE \u003d \"20-04-2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_DATE_NEXT \u003d \"01-03-2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Task((String) null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Task.isValidDate(\"2020-04-20\")); //YYYY-MM-DD"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Task.isValidDate(\"2020-20-04\")); //YYYY-DD-MM"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Task.isValidDate(\"04-20-2020\")); //MM-DD-YYYY"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Task.isValidDate(\"not a date\")); // not a date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(Task.isValidDate(VALID_DATE)); // Correct date format DD-MM-YYYY"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void isDone() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task test \u003d new Task(\"Test\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        test.markAsDone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(test.getStatus());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void isTaskPresent() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.addTaskPerDate(VALID_DATE, new Task(\"Test task1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(Task.isTaskPresent(VALID_DATE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void removeTask() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task newTask \u003d new Task(\"Test Task\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.setDeadlineTaskList(FXCollections.observableList(new ArrayList\u003cTask\u003e()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.add(newTask);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        Task.remove(newTask);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        // no task should be present"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Task.isTaskPresent(VALID_DATE_NEXT));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/notes/NotesTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.model.notes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "class NotesTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_FILE_TYPE \u003d \"file\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String INVALID_FILE_TYPE \u003d \"DASDQWE\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String VALID_PATH_TYPE \u003d \"abs\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String INVALID_PATH_TYPE \u003d \"QEWDS\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Notes(null, \"dummy\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor2_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Notes(null, \"dummy\", \"dummy2\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void constructor3_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Notes(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void validFileType() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(Notes.isValidType(VALID_FILE_TYPE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void invalidFileType() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Notes.isValidType(INVALID_FILE_TYPE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void validPathType() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(Notes.isValidPathType(VALID_PATH_TYPE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void invalidPathType() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(Notes.isValidPathType(INVALID_PATH_TYPE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/CapulatorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class CapulatorTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void calculateCap() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module1 \u003d new NusModule(new ModuleCode(\"CS2030\"), 4,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.BPLUS), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module2 \u003d new NusModule(new ModuleCode(\"CS2040\"), 4,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.A), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module3 \u003d new NusModule(new ModuleCode(\"CS2100\"), 4,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.AMINUS), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module4 \u003d new NusModule(new ModuleCode(\"GES1012\"), 4,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.CPLUS), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module5 \u003d new NusModule(new ModuleCode(\"GEQ1000\"), 4,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.S), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module6 \u003d new NusModule(new ModuleCode(\"CS2103T\"), 4,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.empty(), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        List\u003cNusModule\u003e modules \u003d new ArrayList\u003c\u003e() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module3);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module5);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                add(module6);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        };"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        double result \u003d new Capulator(modules).calculateCap();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(4.0, result);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/GradeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class GradeTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getGrade() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"A\"), Grade.A);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"B\"), Grade.B);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"C\"), Grade.C);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGrade(\"F\"), Grade.F);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertNull(Grade.getGrade(\"fewhfk\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getGradeAfterSu() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"A\"), Grade.S);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"B\"), Grade.S);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"C\"), Grade.S);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"F\"), Grade.U);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Grade.getGradeAfterSu(\"dfsfsd\"), Grade.U);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void isSued() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Grade.A.isSued());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Grade.S.isSued());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Grade.U.isSued());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/ModuleCodeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void isValidModuleCode() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2030\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2040\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS1101S\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"ST3131\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"casfas\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"12312rd\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs 1101s\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"cs2030\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(moduleCode.toString(), \"cs2030\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"cs2030\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(moduleCode.equals(new ModuleCode(\"cs2030\")));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(moduleCode.equals(moduleCode));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(moduleCode.equals(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(moduleCode.equals(0.5f));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different module code value -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(moduleCode.equals(new ModuleCode(\"cs2040\")));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/ModuleTaskTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.testutil.TypicalNusModules;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class ModuleTaskTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleTask task_cs2030_0202 \u003d TypicalNusModules.TYPICAL_MODULE_TASK_1;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleTask task_cs2030_0102 \u003d TypicalNusModules.TYPICAL_MODULE_TASK_3;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleTask task_st3131_high \u003d TypicalNusModules.TYPICAL_MODULE_TASK_4;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    private static final ModuleTask task_st3131_very_high \u003d TypicalNusModules.TYPICAL_MODULE_TASK_5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getModuleRelated() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_cs2030_0102.getModuleRelated(), new ModuleCode(\"CS2030\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_cs2030_0202.getModuleRelated(), new ModuleCode(\"CS2030\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_st3131_high.getModuleRelated(), new ModuleCode(\"ST3131\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_st3131_very_high.getModuleRelated(), new ModuleCode(\"ST3131\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_cs2030_0102.getDate(), \"01-02-2020\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_cs2030_0202.getDate(), \"02-02-2020\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_st3131_high.getDate(), \"02-02-2020\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_st3131_very_high.getDate(), \"02-02-2020\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_cs2030_0102.getPriority(), Priority.LOW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_cs2030_0202.getPriority(), Priority.HIGH);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_st3131_high.getPriority(), Priority.HIGH);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(task_st3131_very_high.getPriority(), Priority.VERYHIGH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleTask moduleTask \u003d new ModuleTask(\"assignment\", new ModuleCode(\"CS2030\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                \"01-02-2020\", Priority.LOW);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(task_cs2030_0102.equals(moduleTask));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(task_st3131_very_high.equals(task_st3131_very_high));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(task_st3131_very_high.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(task_st3131_very_high.equals(\"dsada\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different priority value -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(task_st3131_very_high.equals(task_st3131_high));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different timing value -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(task_cs2030_0202.equals(task_cs2030_0102));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        // different module related value -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(task_cs2030_0202.equals(task_st3131_high));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/NusModuleTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class NusModuleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getGradePoint() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module1 \u003d new NusModule(new ModuleCode(\"CS2030\"), 4,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.A), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(5.0, module1.getGradePoint());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        NusModule module2 \u003d new NusModule(new ModuleCode(\"CS2030\"), 4,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                Optional.of(Grade.C), new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(2.0, module2.getGradePoint());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/nusmodule/PriorityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.model.nusmodule;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "class PriorityTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void isValidPriority() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"1\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"2\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertTrue(Priority.isValidPriority(\"5\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"6\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"dwawsdas\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"e32xr\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertFalse(Priority.isValidPriority(\"low\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getPriority() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Priority.getPriority(\"1\"), Priority.VERYLOW);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Priority.getPriority(\"2\"), Priority.LOW);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Priority.getPriority(\"3\"), Priority.MEDIAN);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Priority.getPriority(\"4\"), Priority.HIGH);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(Priority.getPriority(\"5\"), Priority.VERYHIGH);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void getLevelOfSignificance() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Priority priority \u003d Priority.VERYHIGH;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(priority.getLevelOfSignificance(), 5);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Priority priority \u003d Priority.HIGH;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        assertEquals(priority.toString(), \"High\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                .withEmail(\"alice@email.com\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 3,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedCalendarTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE_A_DATE_A;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.DEADLINE_D_DATE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.MODULE_TASK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class JsonAdaptedCalendarTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void toModelType_validDetails_returnsCalendar() throws Exception {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAdaptedCalendar calendar \u003d new JsonAdaptedCalendar(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(DEADLINE_A_DATE_A, calendar.toModelType());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void toModelType_notDoneTask_returnFalse() throws Exception {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAdaptedCalendar calendar \u003d new JsonAdaptedCalendar(DEADLINE_D_DATE_B);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(calendar.toModelType().getStatus());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void toModelType_isModuleTask_returnTrue() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAdaptedCalendar calendar \u003d new JsonAdaptedCalendar(MODULE_TASK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(calendar.toModelType() instanceof ModuleTask);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void toModelType_isNotModuleTask_returnFalse() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAdaptedCalendar calendar \u003d new JsonAdaptedCalendar(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(calendar.toModelType() instanceof ModuleTask);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void toModelType_isDeadlineTask_returnTrue() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAdaptedCalendar calendar \u003d new JsonAdaptedCalendar(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertTrue(calendar.toModelType() instanceof Deadline);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void toModelType_isNotDeadlineTask_returnFalse() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAdaptedCalendar calendar \u003d new JsonAdaptedCalendar(MODULE_TASK);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertFalse(calendar.toModelType() instanceof Deadline);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_TAGS);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, invalidTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 7,
      "-": 85
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                .readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 107,
      "zhouxinwei97": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import static seedu.address.testutil.TypicalTasks.getTypicalTask;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "                getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonModuleBookStorage jsonModuleBookStorage \u003d new JsonModuleBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        JsonCalendarStorage jsonCalendarStorage \u003d new JsonCalendarStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "                jsonModuleBookStorage, jsonCalendarStorage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public void calendarBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ObservableList\u003cTask\u003e original \u003d FXCollections.observableList(getTypicalTask());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        storageManager.saveCalendar(original);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ObservableList\u003cTask\u003e retrieved \u003d storageManager.readCalendar().get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 2,
      "-": 66,
      "zhouxinwei97": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new Person(name, phone, email, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 1,
      "-": 81,
      "zhouxinwei97": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalNusModules.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.ModuleBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Grade;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.NusModule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " * A utility class containing a list of {@code NusModule} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "public class TypicalNusModules {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final List\u003cModuleTask\u003e EMPTY_TASKS \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final NusModule CS2103 \u003d new NusModule(new ModuleCode(\"CS2103\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            4, Optional.empty(), EMPTY_TASKS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final NusModule CS2030 \u003d new NusModule(new ModuleCode(\"CS2030\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            4, Optional.empty(), EMPTY_TASKS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final NusModule ST3131 \u003d new NusModule(new ModuleCode(\"ST3131\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            4, Optional.of(Grade.getGrade(\"S\")), EMPTY_TASKS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final ModuleTask TYPICAL_MODULE_TASK_1 \u003d new ModuleTask(\"assignment\", CS2030.getModuleCode(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            \"02-02-2020\", Priority.HIGH);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final ModuleTask TYPICAL_MODULE_TASK_2 \u003d new ModuleTask(\"assignment\", new ModuleCode(\"GET1036\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            \"01-02-2020\", Priority.HIGH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final ModuleTask TYPICAL_MODULE_TASK_3 \u003d new ModuleTask(\"assignment\", CS2030.getModuleCode(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            \"01-02-2020\", Priority.LOW);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final ModuleTask TYPICAL_MODULE_TASK_4 \u003d new ModuleTask(\"assignment\", ST3131.getModuleCode(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            \"02-02-2020\", Priority.HIGH);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static final ModuleTask TYPICAL_MODULE_TASK_5 \u003d new ModuleTask(\"assignment\", ST3131.getModuleCode(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            \"02-02-2020\", Priority.VERYHIGH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static ModuleBook getTypicalModuleBook() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ModuleBook mb \u003d new ModuleBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        for (NusModule module : getTypicalNusModules()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            mb.addModule(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return mb;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    public static List\u003cNusModule\u003e getTypicalNusModules() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        CS2030.addTask(TYPICAL_MODULE_TASK_1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        CS2030.addTask(TYPICAL_MODULE_TASK_3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ST3131.addTask(TYPICAL_MODULE_TASK_4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        ST3131.addTask(TYPICAL_MODULE_TASK_5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103, CS2030, ST3131));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"heinz@example.com\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"werner@example.com\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"lydia@example.com\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"anna@example.com\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"stefan@example.com\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(\"hans@example.com\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Kangwkk"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Kangwkk": 10,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalTasks.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.calender.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.ModuleTask;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "import seedu.address.model.nusmodule.Priority;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "public class TypicalTasks {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String DATE_A \u003d \"20-04-2020\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String DATE_B \u003d \"21-04-2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String DATE_C \u003d \"21-04-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String MISC_CATEGORY \u003d \"MISC\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String WORK_CATEGORY \u003d \"WORK\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private static final String TEST_CATEGORY \u003d \"TEST\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Task DEADLINE_A_DATE_A \u003d new Deadline(\"Test A with Date A\", DATE_A, MISC_CATEGORY, \"add\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Task DEADLINE_B_DATE_A \u003d new Deadline(\"Test B with Date A\", DATE_A, WORK_CATEGORY, \"add\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Task DEADLINE_C_DATE_B \u003d new Deadline(\"Test C with Date B\", DATE_B, WORK_CATEGORY, \"add\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Task DEADLINE_D_DATE_B \u003d new Deadline(\"Test D with Date B\", DATE_B, MISC_CATEGORY, \"add\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Task DELETE_THIS_TASK \u003d new Deadline(\"DELETE THIS\", DATE_C, TEST_CATEGORY, \"add\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static final Task MODULE_TASK \u003d new ModuleTask("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "            \"Test D with Date B\", new ModuleCode(\"CS2103T\"), DATE_B, Priority.VERYLOW);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    private TypicalTasks() {} // prevents instantiation"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    public static List\u003cTask\u003e getTypicalTask() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        ArrayList\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        newList.add(DEADLINE_A_DATE_A);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        newList.add(DEADLINE_B_DATE_A);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        newList.add(DEADLINE_C_DATE_B);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        newList.add(DEADLINE_D_DATE_B);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhouxinwei97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhouxinwei97": 47
    }
  }
]
